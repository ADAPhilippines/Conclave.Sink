/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./wwwroot/scripts/App.ts":
/*!********************************!*\
  !*** ./wwwroot/scripts/App.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lucid_cardano__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lucid-cardano */ \"./node_modules/lucid-cardano/esm/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([lucid_cardano__WEBPACK_IMPORTED_MODULE_0__]);\nlucid_cardano__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst getWallets = () => {\n    const result = [];\n    const cardano = window.cardano;\n    for (const i in cardano) {\n        const p = cardano[i];\n        if (p.apiVersion != null && p.icon != null && p.name != null && i !== 'ccvault') {\n            result.push({\n                apiVersion: p.apiVersion,\n                icon: p.icon,\n                name: p.name,\n                id: i.toString()\n            });\n        }\n    }\n    return result;\n};\nconst enableAsync = (walletId) => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        const cardano = window.cardano;\n        const walletApi = yield cardano[walletId].enable();\n        window.CardanoWalletService.lucid = yield lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Lucid[\"new\"](new lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Kupmios('https://kupo-preview-api-teddy-swap-preview-414e80.us1.demeter.run', 'wss://ogmios-preview-api-teddy-swap-preview-414e80.us1.demeter.run'), \"Preview\");\n        window.CardanoWalletService.lucid.selectWallet(walletApi);\n        window.CardanoWalletService.walletApi = walletApi;\n    }\n    catch (ex) {\n        console.error(ex);\n    }\n    finally {\n        return window.CardanoWalletService.lucid != undefined;\n    }\n});\nconst getAddressAsync = () => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    return yield ((_a = window.CardanoWalletService.lucid) === null || _a === void 0 ? void 0 : _a.wallet.address());\n});\nconst getUsedAddressesAsync = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (window.CardanoWalletService.walletApi != null) {\n        const cborAddresses = yield window.CardanoWalletService.walletApi.getUsedAddresses();\n        const addresses = cborAddresses.map(cA => { var _a; return (_a = window.CardanoWalletService.lucid) === null || _a === void 0 ? void 0 : _a.utils.getAddressDetails(cA).address.bech32; }).filter(cA => cA);\n        return addresses;\n    }\n    else\n        return [];\n});\nconst disconnect = () => {\n    delete window.CardanoWalletService.lucid;\n    delete window.CardanoWalletService.walletApi;\n};\nwindow.CardanoWalletService = {\n    enableAsync,\n    disconnect,\n    getWallets,\n    getAddressAsync,\n    getUsedAddressesAsync\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./wwwroot/scripts/App.ts?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing_bg.wasm":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing_bg.wasm ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"6241fe555a2dad48aa7a.wasm\";\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing_bg.wasm?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib_bg.wasm":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib_bg.wasm ***!
  \******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"585f67e86ca5959a98e0.wasm\";\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib_bg.wasm?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/deps/deno.land/std@0.100.0/encoding/hex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/deps/deno.land/std@0.100.0/encoding/hex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decode\": () => (/* binding */ decode),\n/* harmony export */   \"decodeString\": () => (/* binding */ decodeString),\n/* harmony export */   \"decodedLen\": () => (/* binding */ decodedLen),\n/* harmony export */   \"encode\": () => (/* binding */ encode),\n/* harmony export */   \"encodeToString\": () => (/* binding */ encodeToString),\n/* harmony export */   \"encodedLen\": () => (/* binding */ encodedLen),\n/* harmony export */   \"errInvalidByte\": () => (/* binding */ errInvalidByte),\n/* harmony export */   \"errLength\": () => (/* binding */ errLength)\n/* harmony export */ });\n// Ported from Go\n// https://github.com/golang/go/blob/go1.12.5/src/encoding/hex/hex.go\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n// Copyright 2018-2021 the Deno authors. All rights reserved. MIT license.\nconst hexTable = new TextEncoder().encode(\"0123456789abcdef\");\n/**\n * ErrInvalidByte takes an invalid byte and returns an Error.\n * @param byte\n */\nfunction errInvalidByte(byte) {\n    return new Error(\"encoding/hex: invalid byte: \" +\n        new TextDecoder().decode(new Uint8Array([byte])));\n}\n/** ErrLength returns an error about odd string length. */\nfunction errLength() {\n    return new Error(\"encoding/hex: odd length hex string\");\n}\n// fromHexChar converts a hex character into its value.\nfunction fromHexChar(byte) {\n    // '0' <= byte && byte <= '9'\n    if (48 <= byte && byte <= 57)\n        return byte - 48;\n    // 'a' <= byte && byte <= 'f'\n    if (97 <= byte && byte <= 102)\n        return byte - 97 + 10;\n    // 'A' <= byte && byte <= 'F'\n    if (65 <= byte && byte <= 70)\n        return byte - 65 + 10;\n    throw errInvalidByte(byte);\n}\n/**\n * EncodedLen returns the length of an encoding of n source bytes. Specifically,\n * it returns n * 2.\n * @param n\n */\nfunction encodedLen(n) {\n    return n * 2;\n}\n/**\n * Encode encodes `src` into `encodedLen(src.length)` bytes.\n * @param src\n */\nfunction encode(src) {\n    const dst = new Uint8Array(encodedLen(src.length));\n    for (let i = 0; i < dst.length; i++) {\n        const v = src[i];\n        dst[i * 2] = hexTable[v >> 4];\n        dst[i * 2 + 1] = hexTable[v & 0x0f];\n    }\n    return dst;\n}\n/**\n * EncodeToString returns the hexadecimal encoding of `src`.\n * @param src\n */\nfunction encodeToString(src) {\n    return new TextDecoder().decode(encode(src));\n}\n/**\n * Decode decodes `src` into `decodedLen(src.length)` bytes\n * If the input is malformed an error will be thrown\n * the error.\n * @param src\n */\nfunction decode(src) {\n    const dst = new Uint8Array(decodedLen(src.length));\n    for (let i = 0; i < dst.length; i++) {\n        const a = fromHexChar(src[i * 2]);\n        const b = fromHexChar(src[i * 2 + 1]);\n        dst[i] = (a << 4) | b;\n    }\n    if (src.length % 2 == 1) {\n        // Check for invalid char before reporting bad length,\n        // since the invalid char (if present) is an earlier problem.\n        fromHexChar(src[dst.length * 2]);\n        throw errLength();\n    }\n    return dst;\n}\n/**\n * DecodedLen returns the length of decoding `x` source bytes.\n * Specifically, it returns `x / 2`.\n * @param x\n */\nfunction decodedLen(x) {\n    return x >>> 1;\n}\n/**\n * DecodeString returns the bytes represented by the hexadecimal string `s`.\n * DecodeString expects that src contains only hexadecimal characters and that\n * src has even length.\n * If the input is malformed, DecodeString will throw an error.\n * @param s the `string` to decode to `Uint8Array`\n */\nfunction decodeString(s) {\n    return decode(new TextEncoder().encode(s));\n}\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/deps/deno.land/std@0.100.0/encoding/hex.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/equals.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/equals.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"equals32Bit\": () => (/* binding */ equals32Bit),\n/* harmony export */   \"equalsNaive\": () => (/* binding */ equalsNaive)\n/* harmony export */ });\n// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n/** Check whether binary arrays are equal to each other using 8-bit comparisons.\n * @private\n * @param a first array to check equality\n * @param b second array to check equality\n */\nfunction equalsNaive(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < b.length; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\n/** Check whether binary arrays are equal to each other using 32-bit comparisons.\n * @private\n * @param a first array to check equality\n * @param b second array to check equality\n */\nfunction equals32Bit(a, b) {\n    if (a.length !== b.length)\n        return false;\n    const len = a.length;\n    const compressable = Math.floor(len / 4);\n    const compressedA = new Uint32Array(a.buffer, 0, compressable);\n    const compressedB = new Uint32Array(b.buffer, 0, compressable);\n    for (let i = compressable * 4; i < len; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    for (let i = 0; i < compressedA.length; i++) {\n        if (compressedA[i] !== compressedB[i])\n            return false;\n    }\n    return true;\n}\n/** Check whether binary arrays are equal to each other.\n * @param a first array to check equality\n * @param b second array to check equality\n */\nfunction equals(a, b) {\n    if (a.length < 1000)\n        return equalsNaive(a, b);\n    return equals32Bit(a, b);\n}\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/equals.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/mod.js":
/*!********************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/mod.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"concat\": () => (/* binding */ concat),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"endsWith\": () => (/* binding */ endsWith),\n/* harmony export */   \"equals\": () => (/* reexport safe */ _equals_js__WEBPACK_IMPORTED_MODULE_0__.equals),\n/* harmony export */   \"includesNeedle\": () => (/* binding */ includesNeedle),\n/* harmony export */   \"indexOfNeedle\": () => (/* binding */ indexOfNeedle),\n/* harmony export */   \"lastIndexOfNeedle\": () => (/* binding */ lastIndexOfNeedle),\n/* harmony export */   \"repeat\": () => (/* binding */ repeat),\n/* harmony export */   \"startsWith\": () => (/* binding */ startsWith)\n/* harmony export */ });\n/* harmony import */ var _equals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./equals.js */ \"./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/equals.js\");\n// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n/**\n * Provides helper functions to manipulate `Uint8Array` byte slices that are not\n * included on the `Uint8Array` prototype.\n *\n * @module\n */\n/** Returns the index of the first occurrence of the needle array in the source\n * array, or -1 if it is not present.\n *\n * A start index can be specified as the third argument that begins the search\n * at that given index. The start index defaults to the start of the array.\n *\n * The complexity of this function is O(source.lenth * needle.length).\n *\n * ```ts\n * import { indexOfNeedle } from \"./mod.ts\";\n * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);\n * const needle = new Uint8Array([1, 2]);\n * console.log(indexOfNeedle(source, needle)); // 1\n * console.log(indexOfNeedle(source, needle, 2)); // 3\n * ```\n */\nfunction indexOfNeedle(source, needle, start = 0) {\n    if (start >= source.length) {\n        return -1;\n    }\n    if (start < 0) {\n        start = Math.max(0, source.length + start);\n    }\n    const s = needle[0];\n    for (let i = start; i < source.length; i++) {\n        if (source[i] !== s)\n            continue;\n        const pin = i;\n        let matched = 1;\n        let j = i;\n        while (matched < needle.length) {\n            j++;\n            if (source[j] !== needle[j - pin]) {\n                break;\n            }\n            matched++;\n        }\n        if (matched === needle.length) {\n            return pin;\n        }\n    }\n    return -1;\n}\n/** Returns the index of the last occurrence of the needle array in the source\n * array, or -1 if it is not present.\n *\n * A start index can be specified as the third argument that begins the search\n * at that given index. The start index defaults to the end of the array.\n *\n * The complexity of this function is O(source.lenth * needle.length).\n *\n * ```ts\n * import { lastIndexOfNeedle } from \"./mod.ts\";\n * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);\n * const needle = new Uint8Array([1, 2]);\n * console.log(lastIndexOfNeedle(source, needle)); // 5\n * console.log(lastIndexOfNeedle(source, needle, 4)); // 3\n * ```\n */\nfunction lastIndexOfNeedle(source, needle, start = source.length - 1) {\n    if (start < 0) {\n        return -1;\n    }\n    if (start >= source.length) {\n        start = source.length - 1;\n    }\n    const e = needle[needle.length - 1];\n    for (let i = start; i >= 0; i--) {\n        if (source[i] !== e)\n            continue;\n        const pin = i;\n        let matched = 1;\n        let j = i;\n        while (matched < needle.length) {\n            j--;\n            if (source[j] !== needle[needle.length - 1 - (pin - j)]) {\n                break;\n            }\n            matched++;\n        }\n        if (matched === needle.length) {\n            return pin - needle.length + 1;\n        }\n    }\n    return -1;\n}\n/** Returns true if the prefix array appears at the start of the source array,\n * false otherwise.\n *\n * The complexity of this function is O(prefix.length).\n *\n * ```ts\n * import { startsWith } from \"./mod.ts\";\n * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);\n * const prefix = new Uint8Array([0, 1, 2]);\n * console.log(startsWith(source, prefix)); // true\n * ```\n */\nfunction startsWith(source, prefix) {\n    for (let i = 0, max = prefix.length; i < max; i++) {\n        if (source[i] !== prefix[i])\n            return false;\n    }\n    return true;\n}\n/** Returns true if the suffix array appears at the end of the source array,\n * false otherwise.\n *\n * The complexity of this function is O(suffix.length).\n *\n * ```ts\n * import { endsWith } from \"./mod.ts\";\n * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);\n * const suffix = new Uint8Array([1, 2, 3]);\n * console.log(endsWith(source, suffix)); // true\n * ```\n */\nfunction endsWith(source, suffix) {\n    for (let srci = source.length - 1, sfxi = suffix.length - 1; sfxi >= 0; srci--, sfxi--) {\n        if (source[srci] !== suffix[sfxi])\n            return false;\n    }\n    return true;\n}\n/** Returns a new Uint8Array composed of `count` repetitions of the `source`\n * array.\n *\n * If `count` is negative, a `RangeError` is thrown.\n *\n * ```ts\n * import { repeat } from \"./mod.ts\";\n * const source = new Uint8Array([0, 1, 2]);\n * console.log(repeat(source, 3)); // [0, 1, 2, 0, 1, 2, 0, 1, 2]\n * console.log(repeat(source, 0)); // []\n * console.log(repeat(source, -1)); // RangeError\n * ```\n */\nfunction repeat(source, count) {\n    if (count === 0) {\n        return new Uint8Array();\n    }\n    if (count < 0) {\n        throw new RangeError(\"bytes: negative repeat count\");\n    }\n    else if ((source.length * count) / count !== source.length) {\n        throw new Error(\"bytes: repeat count causes overflow\");\n    }\n    const int = Math.floor(count);\n    if (int !== count) {\n        throw new Error(\"bytes: repeat count must be an integer\");\n    }\n    const nb = new Uint8Array(source.length * count);\n    let bp = copy(source, nb);\n    for (; bp < nb.length; bp *= 2) {\n        copy(nb.slice(0, bp), nb, bp);\n    }\n    return nb;\n}\n/** Concatenate the given arrays into a new Uint8Array.\n *\n * ```ts\n * import { concat } from \"./mod.ts\";\n * const a = new Uint8Array([0, 1, 2]);\n * const b = new Uint8Array([3, 4, 5]);\n * console.log(concat(a, b)); // [0, 1, 2, 3, 4, 5]\n */\nfunction concat(...buf) {\n    let length = 0;\n    for (const b of buf) {\n        length += b.length;\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const b of buf) {\n        output.set(b, index);\n        index += b.length;\n    }\n    return output;\n}\n/** Returns true if the source array contains the needle array, false otherwise.\n *\n * A start index can be specified as the third argument that begins the search\n * at that given index. The start index defaults to the beginning of the array.\n *\n * The complexity of this function is O(source.length * needle.length).\n *\n * ```ts\n * import { includesNeedle } from \"./mod.ts\";\n * const source = new Uint8Array([0, 1, 2, 1, 2, 1, 2, 3]);\n * const needle = new Uint8Array([1, 2]);\n * console.log(includesNeedle(source, needle)); // true\n * console.log(includesNeedle(source, needle, 6)); // false\n * ```\n */\nfunction includesNeedle(source, needle, start = 0) {\n    return indexOfNeedle(source, needle, start) !== -1;\n}\n/** Copy bytes from the `src` array to the `dst` array. Returns the number of\n * bytes copied.\n *\n * If the `src` array is larger than what the `dst` array can hold, only the\n * amount of bytes that fit in the `dst` array are copied.\n *\n * An offset can be specified as the third argument that begins the copy at\n * that given index in the `dst` array. The offset defaults to the beginning of\n * the array.\n *\n * ```ts\n * import { copy } from \"./mod.ts\";\n * const src = new Uint8Array([9, 8, 7]);\n * const dst = new Uint8Array([0, 1, 2, 3, 4, 5]);\n * console.log(copy(src, dst)); // 3\n * console.log(dst); // [9, 8, 7, 3, 4, 5]\n * ```\n *\n * ```ts\n * import { copy } from \"./mod.ts\";\n * const src = new Uint8Array([1, 1, 1, 1]);\n * const dst = new Uint8Array([0, 0, 0, 0]);\n * console.log(copy(src, dst, 1)); // 3\n * console.log(dst); // [0, 1, 1, 1]\n * ```\n */\nfunction copy(src, dst, off = 0) {\n    off = Math.max(0, Math.min(off, dst.byteLength));\n    const dstBytesAvailable = dst.byteLength - off;\n    if (src.byteLength > dstBytesAvailable) {\n        src = src.subarray(0, dstBytesAvailable);\n    }\n    dst.set(src, off);\n    return src.byteLength;\n}\n\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/deps/deno.land/std@0.153.0/hash/sha256.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/deps/deno.land/std@0.153.0/hash/sha256.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HmacSha256\": () => (/* binding */ HmacSha256),\n/* harmony export */   \"Sha256\": () => (/* binding */ Sha256)\n/* harmony export */ });\n// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Sha256_block, _Sha256_blocks, _Sha256_bytes, _Sha256_finalized, _Sha256_first, _Sha256_h0, _Sha256_h1, _Sha256_h2, _Sha256_h3, _Sha256_h4, _Sha256_h5, _Sha256_h6, _Sha256_h7, _Sha256_hashed, _Sha256_hBytes, _Sha256_is224, _Sha256_lastByteIndex, _Sha256_start, _HmacSha256_inner, _HmacSha256_is224, _HmacSha256_oKeyPad, _HmacSha256_sharedMemory;\nconst HEX_CHARS = \"0123456789abcdef\".split(\"\");\nconst EXTRA = [-2147483648, 8388608, 32768, 128];\nconst SHIFT = [24, 16, 8, 0];\nconst K = [\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2,\n];\nconst blocks = [];\nclass Sha256 {\n    constructor(is224 = false, sharedMemory = false) {\n        _Sha256_block.set(this, void 0);\n        _Sha256_blocks.set(this, void 0);\n        _Sha256_bytes.set(this, void 0);\n        _Sha256_finalized.set(this, void 0);\n        _Sha256_first.set(this, void 0);\n        _Sha256_h0.set(this, void 0);\n        _Sha256_h1.set(this, void 0);\n        _Sha256_h2.set(this, void 0);\n        _Sha256_h3.set(this, void 0);\n        _Sha256_h4.set(this, void 0);\n        _Sha256_h5.set(this, void 0);\n        _Sha256_h6.set(this, void 0);\n        _Sha256_h7.set(this, void 0);\n        _Sha256_hashed.set(this, void 0);\n        _Sha256_hBytes.set(this, void 0);\n        _Sha256_is224.set(this, void 0);\n        _Sha256_lastByteIndex.set(this, 0);\n        _Sha256_start.set(this, void 0);\n        this.init(is224, sharedMemory);\n    }\n    init(is224, sharedMemory) {\n        if (sharedMemory) {\n            blocks[0] =\n                blocks[16] =\n                    blocks[1] =\n                        blocks[2] =\n                            blocks[3] =\n                                blocks[4] =\n                                    blocks[5] =\n                                        blocks[6] =\n                                            blocks[7] =\n                                                blocks[8] =\n                                                    blocks[9] =\n                                                        blocks[10] =\n                                                            blocks[11] =\n                                                                blocks[12] =\n                                                                    blocks[13] =\n                                                                        blocks[14] =\n                                                                            blocks[15] =\n                                                                                0;\n            __classPrivateFieldSet(this, _Sha256_blocks, blocks, \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _Sha256_blocks, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"f\");\n        }\n        if (is224) {\n            __classPrivateFieldSet(this, _Sha256_h0, 0xc1059ed8, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h1, 0x367cd507, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h2, 0x3070dd17, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h3, 0xf70e5939, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h4, 0xffc00b31, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h5, 0x68581511, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h6, 0x64f98fa7, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h7, 0xbefa4fa4, \"f\");\n        }\n        else {\n            // 256\n            __classPrivateFieldSet(this, _Sha256_h0, 0x6a09e667, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h1, 0xbb67ae85, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h2, 0x3c6ef372, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h3, 0xa54ff53a, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h4, 0x510e527f, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h5, 0x9b05688c, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h6, 0x1f83d9ab, \"f\");\n            __classPrivateFieldSet(this, _Sha256_h7, 0x5be0cd19, \"f\");\n        }\n        __classPrivateFieldSet(this, _Sha256_block, __classPrivateFieldSet(this, _Sha256_start, __classPrivateFieldSet(this, _Sha256_bytes, __classPrivateFieldSet(this, _Sha256_hBytes, 0, \"f\"), \"f\"), \"f\"), \"f\");\n        __classPrivateFieldSet(this, _Sha256_finalized, __classPrivateFieldSet(this, _Sha256_hashed, false, \"f\"), \"f\");\n        __classPrivateFieldSet(this, _Sha256_first, true, \"f\");\n        __classPrivateFieldSet(this, _Sha256_is224, is224, \"f\");\n    }\n    /** Update hash\n     *\n     * @param message The message you want to hash.\n     */\n    update(message) {\n        if (__classPrivateFieldGet(this, _Sha256_finalized, \"f\")) {\n            return this;\n        }\n        let msg;\n        if (message instanceof ArrayBuffer) {\n            msg = new Uint8Array(message);\n        }\n        else {\n            msg = message;\n        }\n        let index = 0;\n        const length = msg.length;\n        const blocks = __classPrivateFieldGet(this, _Sha256_blocks, \"f\");\n        while (index < length) {\n            let i;\n            if (__classPrivateFieldGet(this, _Sha256_hashed, \"f\")) {\n                __classPrivateFieldSet(this, _Sha256_hashed, false, \"f\");\n                blocks[0] = __classPrivateFieldGet(this, _Sha256_block, \"f\");\n                blocks[16] =\n                    blocks[1] =\n                        blocks[2] =\n                            blocks[3] =\n                                blocks[4] =\n                                    blocks[5] =\n                                        blocks[6] =\n                                            blocks[7] =\n                                                blocks[8] =\n                                                    blocks[9] =\n                                                        blocks[10] =\n                                                            blocks[11] =\n                                                                blocks[12] =\n                                                                    blocks[13] =\n                                                                        blocks[14] =\n                                                                            blocks[15] =\n                                                                                0;\n            }\n            if (typeof msg !== \"string\") {\n                for (i = __classPrivateFieldGet(this, _Sha256_start, \"f\"); index < length && i < 64; ++index) {\n                    blocks[i >> 2] |= msg[index] << SHIFT[i++ & 3];\n                }\n            }\n            else {\n                for (i = __classPrivateFieldGet(this, _Sha256_start, \"f\"); index < length && i < 64; ++index) {\n                    let code = msg.charCodeAt(index);\n                    if (code < 0x80) {\n                        blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                    }\n                    else if (code < 0x800) {\n                        blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                    }\n                    else if (code < 0xd800 || code >= 0xe000) {\n                        blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                    }\n                    else {\n                        code = 0x10000 +\n                            (((code & 0x3ff) << 10) | (msg.charCodeAt(++index) & 0x3ff));\n                        blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                    }\n                }\n            }\n            __classPrivateFieldSet(this, _Sha256_lastByteIndex, i, \"f\");\n            __classPrivateFieldSet(this, _Sha256_bytes, __classPrivateFieldGet(this, _Sha256_bytes, \"f\") + (i - __classPrivateFieldGet(this, _Sha256_start, \"f\")), \"f\");\n            if (i >= 64) {\n                __classPrivateFieldSet(this, _Sha256_block, blocks[16], \"f\");\n                __classPrivateFieldSet(this, _Sha256_start, i - 64, \"f\");\n                this.hash();\n                __classPrivateFieldSet(this, _Sha256_hashed, true, \"f\");\n            }\n            else {\n                __classPrivateFieldSet(this, _Sha256_start, i, \"f\");\n            }\n        }\n        if (__classPrivateFieldGet(this, _Sha256_bytes, \"f\") > 4294967295) {\n            __classPrivateFieldSet(this, _Sha256_hBytes, __classPrivateFieldGet(this, _Sha256_hBytes, \"f\") + ((__classPrivateFieldGet(this, _Sha256_bytes, \"f\") / 4294967296) << 0), \"f\");\n            __classPrivateFieldSet(this, _Sha256_bytes, __classPrivateFieldGet(this, _Sha256_bytes, \"f\") % 4294967296, \"f\");\n        }\n        return this;\n    }\n    finalize() {\n        if (__classPrivateFieldGet(this, _Sha256_finalized, \"f\")) {\n            return;\n        }\n        __classPrivateFieldSet(this, _Sha256_finalized, true, \"f\");\n        const blocks = __classPrivateFieldGet(this, _Sha256_blocks, \"f\");\n        const i = __classPrivateFieldGet(this, _Sha256_lastByteIndex, \"f\");\n        blocks[16] = __classPrivateFieldGet(this, _Sha256_block, \"f\");\n        blocks[i >> 2] |= EXTRA[i & 3];\n        __classPrivateFieldSet(this, _Sha256_block, blocks[16], \"f\");\n        if (i >= 56) {\n            if (!__classPrivateFieldGet(this, _Sha256_hashed, \"f\")) {\n                this.hash();\n            }\n            blocks[0] = __classPrivateFieldGet(this, _Sha256_block, \"f\");\n            blocks[16] =\n                blocks[1] =\n                    blocks[2] =\n                        blocks[3] =\n                            blocks[4] =\n                                blocks[5] =\n                                    blocks[6] =\n                                        blocks[7] =\n                                            blocks[8] =\n                                                blocks[9] =\n                                                    blocks[10] =\n                                                        blocks[11] =\n                                                            blocks[12] =\n                                                                blocks[13] =\n                                                                    blocks[14] =\n                                                                        blocks[15] =\n                                                                            0;\n        }\n        blocks[14] = (__classPrivateFieldGet(this, _Sha256_hBytes, \"f\") << 3) | (__classPrivateFieldGet(this, _Sha256_bytes, \"f\") >>> 29);\n        blocks[15] = __classPrivateFieldGet(this, _Sha256_bytes, \"f\") << 3;\n        this.hash();\n    }\n    hash() {\n        let a = __classPrivateFieldGet(this, _Sha256_h0, \"f\");\n        let b = __classPrivateFieldGet(this, _Sha256_h1, \"f\");\n        let c = __classPrivateFieldGet(this, _Sha256_h2, \"f\");\n        let d = __classPrivateFieldGet(this, _Sha256_h3, \"f\");\n        let e = __classPrivateFieldGet(this, _Sha256_h4, \"f\");\n        let f = __classPrivateFieldGet(this, _Sha256_h5, \"f\");\n        let g = __classPrivateFieldGet(this, _Sha256_h6, \"f\");\n        let h = __classPrivateFieldGet(this, _Sha256_h7, \"f\");\n        const blocks = __classPrivateFieldGet(this, _Sha256_blocks, \"f\");\n        let s0;\n        let s1;\n        let maj;\n        let t1;\n        let t2;\n        let ch;\n        let ab;\n        let da;\n        let cd;\n        let bc;\n        for (let j = 16; j < 64; ++j) {\n            // rightrotate\n            t1 = blocks[j - 15];\n            s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n            t1 = blocks[j - 2];\n            s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^\n                (t1 >>> 10);\n            blocks[j] = (blocks[j - 16] + s0 + blocks[j - 7] + s1) << 0;\n        }\n        bc = b & c;\n        for (let j = 0; j < 64; j += 4) {\n            if (__classPrivateFieldGet(this, _Sha256_first, \"f\")) {\n                if (__classPrivateFieldGet(this, _Sha256_is224, \"f\")) {\n                    ab = 300032;\n                    t1 = blocks[0] - 1413257819;\n                    h = (t1 - 150054599) << 0;\n                    d = (t1 + 24177077) << 0;\n                }\n                else {\n                    ab = 704751109;\n                    t1 = blocks[0] - 210244248;\n                    h = (t1 - 1521486534) << 0;\n                    d = (t1 + 143694565) << 0;\n                }\n                __classPrivateFieldSet(this, _Sha256_first, false, \"f\");\n            }\n            else {\n                s0 = ((a >>> 2) | (a << 30)) ^\n                    ((a >>> 13) | (a << 19)) ^\n                    ((a >>> 22) | (a << 10));\n                s1 = ((e >>> 6) | (e << 26)) ^\n                    ((e >>> 11) | (e << 21)) ^\n                    ((e >>> 25) | (e << 7));\n                ab = a & b;\n                maj = ab ^ (a & c) ^ bc;\n                ch = (e & f) ^ (~e & g);\n                t1 = h + s1 + ch + K[j] + blocks[j];\n                t2 = s0 + maj;\n                h = (d + t1) << 0;\n                d = (t1 + t2) << 0;\n            }\n            s0 = ((d >>> 2) | (d << 30)) ^\n                ((d >>> 13) | (d << 19)) ^\n                ((d >>> 22) | (d << 10));\n            s1 = ((h >>> 6) | (h << 26)) ^\n                ((h >>> 11) | (h << 21)) ^\n                ((h >>> 25) | (h << 7));\n            da = d & a;\n            maj = da ^ (d & b) ^ ab;\n            ch = (h & e) ^ (~h & f);\n            t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n            t2 = s0 + maj;\n            g = (c + t1) << 0;\n            c = (t1 + t2) << 0;\n            s0 = ((c >>> 2) | (c << 30)) ^\n                ((c >>> 13) | (c << 19)) ^\n                ((c >>> 22) | (c << 10));\n            s1 = ((g >>> 6) | (g << 26)) ^\n                ((g >>> 11) | (g << 21)) ^\n                ((g >>> 25) | (g << 7));\n            cd = c & d;\n            maj = cd ^ (c & a) ^ da;\n            ch = (g & h) ^ (~g & e);\n            t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n            t2 = s0 + maj;\n            f = (b + t1) << 0;\n            b = (t1 + t2) << 0;\n            s0 = ((b >>> 2) | (b << 30)) ^\n                ((b >>> 13) | (b << 19)) ^\n                ((b >>> 22) | (b << 10));\n            s1 = ((f >>> 6) | (f << 26)) ^\n                ((f >>> 11) | (f << 21)) ^\n                ((f >>> 25) | (f << 7));\n            bc = b & c;\n            maj = bc ^ (b & d) ^ cd;\n            ch = (f & g) ^ (~f & h);\n            t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n            t2 = s0 + maj;\n            e = (a + t1) << 0;\n            a = (t1 + t2) << 0;\n        }\n        __classPrivateFieldSet(this, _Sha256_h0, (__classPrivateFieldGet(this, _Sha256_h0, \"f\") + a) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h1, (__classPrivateFieldGet(this, _Sha256_h1, \"f\") + b) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h2, (__classPrivateFieldGet(this, _Sha256_h2, \"f\") + c) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h3, (__classPrivateFieldGet(this, _Sha256_h3, \"f\") + d) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h4, (__classPrivateFieldGet(this, _Sha256_h4, \"f\") + e) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h5, (__classPrivateFieldGet(this, _Sha256_h5, \"f\") + f) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h6, (__classPrivateFieldGet(this, _Sha256_h6, \"f\") + g) << 0, \"f\");\n        __classPrivateFieldSet(this, _Sha256_h7, (__classPrivateFieldGet(this, _Sha256_h7, \"f\") + h) << 0, \"f\");\n    }\n    /** Return hash in hex string. */\n    hex() {\n        this.finalize();\n        const h0 = __classPrivateFieldGet(this, _Sha256_h0, \"f\");\n        const h1 = __classPrivateFieldGet(this, _Sha256_h1, \"f\");\n        const h2 = __classPrivateFieldGet(this, _Sha256_h2, \"f\");\n        const h3 = __classPrivateFieldGet(this, _Sha256_h3, \"f\");\n        const h4 = __classPrivateFieldGet(this, _Sha256_h4, \"f\");\n        const h5 = __classPrivateFieldGet(this, _Sha256_h5, \"f\");\n        const h6 = __classPrivateFieldGet(this, _Sha256_h6, \"f\");\n        const h7 = __classPrivateFieldGet(this, _Sha256_h7, \"f\");\n        let hex = HEX_CHARS[(h0 >> 28) & 0x0f] +\n            HEX_CHARS[(h0 >> 24) & 0x0f] +\n            HEX_CHARS[(h0 >> 20) & 0x0f] +\n            HEX_CHARS[(h0 >> 16) & 0x0f] +\n            HEX_CHARS[(h0 >> 12) & 0x0f] +\n            HEX_CHARS[(h0 >> 8) & 0x0f] +\n            HEX_CHARS[(h0 >> 4) & 0x0f] +\n            HEX_CHARS[h0 & 0x0f] +\n            HEX_CHARS[(h1 >> 28) & 0x0f] +\n            HEX_CHARS[(h1 >> 24) & 0x0f] +\n            HEX_CHARS[(h1 >> 20) & 0x0f] +\n            HEX_CHARS[(h1 >> 16) & 0x0f] +\n            HEX_CHARS[(h1 >> 12) & 0x0f] +\n            HEX_CHARS[(h1 >> 8) & 0x0f] +\n            HEX_CHARS[(h1 >> 4) & 0x0f] +\n            HEX_CHARS[h1 & 0x0f] +\n            HEX_CHARS[(h2 >> 28) & 0x0f] +\n            HEX_CHARS[(h2 >> 24) & 0x0f] +\n            HEX_CHARS[(h2 >> 20) & 0x0f] +\n            HEX_CHARS[(h2 >> 16) & 0x0f] +\n            HEX_CHARS[(h2 >> 12) & 0x0f] +\n            HEX_CHARS[(h2 >> 8) & 0x0f] +\n            HEX_CHARS[(h2 >> 4) & 0x0f] +\n            HEX_CHARS[h2 & 0x0f] +\n            HEX_CHARS[(h3 >> 28) & 0x0f] +\n            HEX_CHARS[(h3 >> 24) & 0x0f] +\n            HEX_CHARS[(h3 >> 20) & 0x0f] +\n            HEX_CHARS[(h3 >> 16) & 0x0f] +\n            HEX_CHARS[(h3 >> 12) & 0x0f] +\n            HEX_CHARS[(h3 >> 8) & 0x0f] +\n            HEX_CHARS[(h3 >> 4) & 0x0f] +\n            HEX_CHARS[h3 & 0x0f] +\n            HEX_CHARS[(h4 >> 28) & 0x0f] +\n            HEX_CHARS[(h4 >> 24) & 0x0f] +\n            HEX_CHARS[(h4 >> 20) & 0x0f] +\n            HEX_CHARS[(h4 >> 16) & 0x0f] +\n            HEX_CHARS[(h4 >> 12) & 0x0f] +\n            HEX_CHARS[(h4 >> 8) & 0x0f] +\n            HEX_CHARS[(h4 >> 4) & 0x0f] +\n            HEX_CHARS[h4 & 0x0f] +\n            HEX_CHARS[(h5 >> 28) & 0x0f] +\n            HEX_CHARS[(h5 >> 24) & 0x0f] +\n            HEX_CHARS[(h5 >> 20) & 0x0f] +\n            HEX_CHARS[(h5 >> 16) & 0x0f] +\n            HEX_CHARS[(h5 >> 12) & 0x0f] +\n            HEX_CHARS[(h5 >> 8) & 0x0f] +\n            HEX_CHARS[(h5 >> 4) & 0x0f] +\n            HEX_CHARS[h5 & 0x0f] +\n            HEX_CHARS[(h6 >> 28) & 0x0f] +\n            HEX_CHARS[(h6 >> 24) & 0x0f] +\n            HEX_CHARS[(h6 >> 20) & 0x0f] +\n            HEX_CHARS[(h6 >> 16) & 0x0f] +\n            HEX_CHARS[(h6 >> 12) & 0x0f] +\n            HEX_CHARS[(h6 >> 8) & 0x0f] +\n            HEX_CHARS[(h6 >> 4) & 0x0f] +\n            HEX_CHARS[h6 & 0x0f];\n        if (!__classPrivateFieldGet(this, _Sha256_is224, \"f\")) {\n            hex += HEX_CHARS[(h7 >> 28) & 0x0f] +\n                HEX_CHARS[(h7 >> 24) & 0x0f] +\n                HEX_CHARS[(h7 >> 20) & 0x0f] +\n                HEX_CHARS[(h7 >> 16) & 0x0f] +\n                HEX_CHARS[(h7 >> 12) & 0x0f] +\n                HEX_CHARS[(h7 >> 8) & 0x0f] +\n                HEX_CHARS[(h7 >> 4) & 0x0f] +\n                HEX_CHARS[h7 & 0x0f];\n        }\n        return hex;\n    }\n    /** Return hash in hex string. */\n    toString() {\n        return this.hex();\n    }\n    /** Return hash in integer array. */\n    digest() {\n        this.finalize();\n        const h0 = __classPrivateFieldGet(this, _Sha256_h0, \"f\");\n        const h1 = __classPrivateFieldGet(this, _Sha256_h1, \"f\");\n        const h2 = __classPrivateFieldGet(this, _Sha256_h2, \"f\");\n        const h3 = __classPrivateFieldGet(this, _Sha256_h3, \"f\");\n        const h4 = __classPrivateFieldGet(this, _Sha256_h4, \"f\");\n        const h5 = __classPrivateFieldGet(this, _Sha256_h5, \"f\");\n        const h6 = __classPrivateFieldGet(this, _Sha256_h6, \"f\");\n        const h7 = __classPrivateFieldGet(this, _Sha256_h7, \"f\");\n        const arr = [\n            (h0 >> 24) & 0xff,\n            (h0 >> 16) & 0xff,\n            (h0 >> 8) & 0xff,\n            h0 & 0xff,\n            (h1 >> 24) & 0xff,\n            (h1 >> 16) & 0xff,\n            (h1 >> 8) & 0xff,\n            h1 & 0xff,\n            (h2 >> 24) & 0xff,\n            (h2 >> 16) & 0xff,\n            (h2 >> 8) & 0xff,\n            h2 & 0xff,\n            (h3 >> 24) & 0xff,\n            (h3 >> 16) & 0xff,\n            (h3 >> 8) & 0xff,\n            h3 & 0xff,\n            (h4 >> 24) & 0xff,\n            (h4 >> 16) & 0xff,\n            (h4 >> 8) & 0xff,\n            h4 & 0xff,\n            (h5 >> 24) & 0xff,\n            (h5 >> 16) & 0xff,\n            (h5 >> 8) & 0xff,\n            h5 & 0xff,\n            (h6 >> 24) & 0xff,\n            (h6 >> 16) & 0xff,\n            (h6 >> 8) & 0xff,\n            h6 & 0xff,\n        ];\n        if (!__classPrivateFieldGet(this, _Sha256_is224, \"f\")) {\n            arr.push((h7 >> 24) & 0xff, (h7 >> 16) & 0xff, (h7 >> 8) & 0xff, h7 & 0xff);\n        }\n        return arr;\n    }\n    /** Return hash in integer array. */\n    array() {\n        return this.digest();\n    }\n    /** Return hash in ArrayBuffer. */\n    arrayBuffer() {\n        this.finalize();\n        const buffer = new ArrayBuffer(__classPrivateFieldGet(this, _Sha256_is224, \"f\") ? 28 : 32);\n        const dataView = new DataView(buffer);\n        dataView.setUint32(0, __classPrivateFieldGet(this, _Sha256_h0, \"f\"));\n        dataView.setUint32(4, __classPrivateFieldGet(this, _Sha256_h1, \"f\"));\n        dataView.setUint32(8, __classPrivateFieldGet(this, _Sha256_h2, \"f\"));\n        dataView.setUint32(12, __classPrivateFieldGet(this, _Sha256_h3, \"f\"));\n        dataView.setUint32(16, __classPrivateFieldGet(this, _Sha256_h4, \"f\"));\n        dataView.setUint32(20, __classPrivateFieldGet(this, _Sha256_h5, \"f\"));\n        dataView.setUint32(24, __classPrivateFieldGet(this, _Sha256_h6, \"f\"));\n        if (!__classPrivateFieldGet(this, _Sha256_is224, \"f\")) {\n            dataView.setUint32(28, __classPrivateFieldGet(this, _Sha256_h7, \"f\"));\n        }\n        return buffer;\n    }\n}\n_Sha256_block = new WeakMap(), _Sha256_blocks = new WeakMap(), _Sha256_bytes = new WeakMap(), _Sha256_finalized = new WeakMap(), _Sha256_first = new WeakMap(), _Sha256_h0 = new WeakMap(), _Sha256_h1 = new WeakMap(), _Sha256_h2 = new WeakMap(), _Sha256_h3 = new WeakMap(), _Sha256_h4 = new WeakMap(), _Sha256_h5 = new WeakMap(), _Sha256_h6 = new WeakMap(), _Sha256_h7 = new WeakMap(), _Sha256_hashed = new WeakMap(), _Sha256_hBytes = new WeakMap(), _Sha256_is224 = new WeakMap(), _Sha256_lastByteIndex = new WeakMap(), _Sha256_start = new WeakMap();\nclass HmacSha256 extends Sha256 {\n    constructor(secretKey, is224 = false, sharedMemory = false) {\n        super(is224, sharedMemory);\n        _HmacSha256_inner.set(this, void 0);\n        _HmacSha256_is224.set(this, void 0);\n        _HmacSha256_oKeyPad.set(this, void 0);\n        _HmacSha256_sharedMemory.set(this, void 0);\n        let key;\n        if (typeof secretKey === \"string\") {\n            const bytes = [];\n            const length = secretKey.length;\n            let index = 0;\n            for (let i = 0; i < length; ++i) {\n                let code = secretKey.charCodeAt(i);\n                if (code < 0x80) {\n                    bytes[index++] = code;\n                }\n                else if (code < 0x800) {\n                    bytes[index++] = 0xc0 | (code >> 6);\n                    bytes[index++] = 0x80 | (code & 0x3f);\n                }\n                else if (code < 0xd800 || code >= 0xe000) {\n                    bytes[index++] = 0xe0 | (code >> 12);\n                    bytes[index++] = 0x80 | ((code >> 6) & 0x3f);\n                    bytes[index++] = 0x80 | (code & 0x3f);\n                }\n                else {\n                    code = 0x10000 +\n                        (((code & 0x3ff) << 10) | (secretKey.charCodeAt(++i) & 0x3ff));\n                    bytes[index++] = 0xf0 | (code >> 18);\n                    bytes[index++] = 0x80 | ((code >> 12) & 0x3f);\n                    bytes[index++] = 0x80 | ((code >> 6) & 0x3f);\n                    bytes[index++] = 0x80 | (code & 0x3f);\n                }\n            }\n            key = bytes;\n        }\n        else {\n            if (secretKey instanceof ArrayBuffer) {\n                key = new Uint8Array(secretKey);\n            }\n            else {\n                key = secretKey;\n            }\n        }\n        if (key.length > 64) {\n            key = new Sha256(is224, true).update(key).array();\n        }\n        const oKeyPad = [];\n        const iKeyPad = [];\n        for (let i = 0; i < 64; ++i) {\n            const b = key[i] || 0;\n            oKeyPad[i] = 0x5c ^ b;\n            iKeyPad[i] = 0x36 ^ b;\n        }\n        this.update(iKeyPad);\n        __classPrivateFieldSet(this, _HmacSha256_oKeyPad, oKeyPad, \"f\");\n        __classPrivateFieldSet(this, _HmacSha256_inner, true, \"f\");\n        __classPrivateFieldSet(this, _HmacSha256_is224, is224, \"f\");\n        __classPrivateFieldSet(this, _HmacSha256_sharedMemory, sharedMemory, \"f\");\n    }\n    finalize() {\n        super.finalize();\n        if (__classPrivateFieldGet(this, _HmacSha256_inner, \"f\")) {\n            __classPrivateFieldSet(this, _HmacSha256_inner, false, \"f\");\n            const innerHash = this.array();\n            super.init(__classPrivateFieldGet(this, _HmacSha256_is224, \"f\"), __classPrivateFieldGet(this, _HmacSha256_sharedMemory, \"f\"));\n            this.update(__classPrivateFieldGet(this, _HmacSha256_oKeyPad, \"f\"));\n            this.update(innerHash);\n            super.finalize();\n        }\n    }\n}\n_HmacSha256_inner = new WeakMap(), _HmacSha256_is224 = new WeakMap(), _HmacSha256_oKeyPad = new WeakMap(), _HmacSha256_sharedMemory = new WeakMap();\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/deps/deno.land/std@0.153.0/hash/sha256.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/deps/deno.land/x/typebox@0.25.13/src/typebox.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/deps/deno.land/x/typebox@0.25.13/src/typebox.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Hint\": () => (/* binding */ Hint),\n/* harmony export */   \"Kind\": () => (/* binding */ Kind),\n/* harmony export */   \"Modifier\": () => (/* binding */ Modifier),\n/* harmony export */   \"Type\": () => (/* binding */ Type),\n/* harmony export */   \"TypeBuilder\": () => (/* binding */ TypeBuilder)\n/* harmony export */ });\n/*--------------------------------------------------------------------------\n\r\n@sinclair/typebox\n\r\nThe MIT License (MIT)\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\r\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\r\n---------------------------------------------------------------------------*/\n// --------------------------------------------------------------------------\n// Symbols\n// --------------------------------------------------------------------------\nconst Kind = Symbol.for('TypeBox.Kind');\nconst Hint = Symbol.for('TypeBox.Hint');\nconst Modifier = Symbol.for('TypeBox.Modifier');\n// --------------------------------------------------------------------------\n// TypeBuilder\n// --------------------------------------------------------------------------\nlet TypeOrdinal = 0;\nclass TypeBuilder {\n    // ----------------------------------------------------------------------\n    // Modifiers\n    // ----------------------------------------------------------------------\n    /** Creates a readonly optional property */\n    ReadonlyOptional(item) {\n        return { [Modifier]: 'ReadonlyOptional', ...item };\n    }\n    /** Creates a readonly property */\n    Readonly(item) {\n        return { [Modifier]: 'Readonly', ...item };\n    }\n    /** Creates a optional property */\n    Optional(item) {\n        return { [Modifier]: 'Optional', ...item };\n    }\n    // ----------------------------------------------------------------------\n    // Types\n    // ----------------------------------------------------------------------\n    /** `Standard` Creates a any type */\n    Any(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Any' });\n    }\n    /** `Standard` Creates a array type */\n    Array(items, options = {}) {\n        return this.Create({ ...options, [Kind]: 'Array', type: 'array', items });\n    }\n    /** `Standard` Creates a boolean type */\n    Boolean(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Boolean', type: 'boolean' });\n    }\n    /** `Extended` Creates a tuple type from this constructors parameters */\n    ConstructorParameters(schema, options = {}) {\n        return this.Tuple([...schema.parameters], { ...options });\n    }\n    /** `Extended` Creates a constructor type */\n    Constructor(parameters, returns, options = {}) {\n        if (parameters[Kind] === 'Tuple') {\n            const inner = parameters.items === undefined ? [] : parameters.items;\n            return this.Create({ ...options, [Kind]: 'Constructor', type: 'object', instanceOf: 'Constructor', parameters: inner, returns });\n        }\n        else if (globalThis.Array.isArray(parameters)) {\n            return this.Create({ ...options, [Kind]: 'Constructor', type: 'object', instanceOf: 'Constructor', parameters, returns });\n        }\n        else {\n            throw new Error('TypeBuilder.Constructor: Invalid parameters');\n        }\n    }\n    /** `Extended` Creates a Date type */\n    Date(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Date', type: 'object', instanceOf: 'Date' });\n    }\n    /** `Standard` Creates a enum type */\n    Enum(item, options = {}) {\n        const values = Object.keys(item)\n            .filter((key) => isNaN(key))\n            .map((key) => item[key]);\n        const anyOf = values.map((value) => (typeof value === 'string' ? { [Kind]: 'Literal', type: 'string', const: value } : { [Kind]: 'Literal', type: 'number', const: value }));\n        return this.Create({ ...options, [Kind]: 'Union', [Hint]: 'Enum', anyOf });\n    }\n    /** `Extended` Creates a function type */\n    Function(parameters, returns, options = {}) {\n        if (parameters[Kind] === 'Tuple') {\n            const inner = parameters.items === undefined ? [] : parameters.items;\n            return this.Create({ ...options, [Kind]: 'Function', type: 'object', instanceOf: 'Function', parameters: inner, returns });\n        }\n        else if (globalThis.Array.isArray(parameters)) {\n            return this.Create({ ...options, [Kind]: 'Function', type: 'object', instanceOf: 'Function', parameters, returns });\n        }\n        else {\n            throw new Error('TypeBuilder.Function: Invalid parameters');\n        }\n    }\n    /** `Extended` Creates a type from this constructors instance type */\n    InstanceType(schema, options = {}) {\n        return { ...options, ...this.Clone(schema.returns) };\n    }\n    /** `Standard` Creates a integer type */\n    Integer(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Integer', type: 'integer' });\n    }\n    /** `Standard` Creates a intersect type. */\n    Intersect(objects, options = {}) {\n        const isOptional = (schema) => (schema[Modifier] && schema[Modifier] === 'Optional') || schema[Modifier] === 'ReadonlyOptional';\n        const [required, optional] = [new Set(), new Set()];\n        for (const object of objects) {\n            for (const [key, schema] of Object.entries(object.properties)) {\n                if (isOptional(schema))\n                    optional.add(key);\n            }\n        }\n        for (const object of objects) {\n            for (const key of Object.keys(object.properties)) {\n                if (!optional.has(key))\n                    required.add(key);\n            }\n        }\n        const properties = {};\n        for (const object of objects) {\n            for (const [key, schema] of Object.entries(object.properties)) {\n                properties[key] = properties[key] === undefined ? schema : { [Kind]: 'Union', anyOf: [properties[key], { ...schema }] };\n            }\n        }\n        if (required.size > 0) {\n            return this.Create({ ...options, [Kind]: 'Object', type: 'object', properties, required: [...required] });\n        }\n        else {\n            return this.Create({ ...options, [Kind]: 'Object', type: 'object', properties });\n        }\n    }\n    /** `Standard` Creates a keyof type */\n    KeyOf(object, options = {}) {\n        const items = Object.keys(object.properties).map((key) => this.Create({ ...options, [Kind]: 'Literal', type: 'string', const: key }));\n        return this.Create({ ...options, [Kind]: 'Union', [Hint]: 'KeyOf', anyOf: items });\n    }\n    /** `Standard` Creates a literal type. */\n    Literal(value, options = {}) {\n        return this.Create({ ...options, [Kind]: 'Literal', const: value, type: typeof value });\n    }\n    /** `Standard` Creates a never type */\n    Never(options = {}) {\n        return this.Create({\n            ...options,\n            [Kind]: 'Never',\n            allOf: [\n                { type: 'boolean', const: false },\n                { type: 'boolean', const: true },\n            ],\n        });\n    }\n    /** `Standard` Creates a null type */\n    Null(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Null', type: 'null' });\n    }\n    /** `Standard` Creates a number type */\n    Number(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Number', type: 'number' });\n    }\n    /** `Standard` Creates an object type */\n    Object(properties, options = {}) {\n        const property_names = Object.keys(properties);\n        const optional = property_names.filter((name) => {\n            const property = properties[name];\n            const modifier = property[Modifier];\n            return modifier && (modifier === 'Optional' || modifier === 'ReadonlyOptional');\n        });\n        const required = property_names.filter((name) => !optional.includes(name));\n        if (required.length > 0) {\n            return this.Create({ ...options, [Kind]: 'Object', type: 'object', properties, required });\n        }\n        else {\n            return this.Create({ ...options, [Kind]: 'Object', type: 'object', properties });\n        }\n    }\n    /** `Standard` Creates a new object type whose keys are omitted from the given source type */\n    Omit(schema, keys, options = {}) {\n        const select = keys[Kind] === 'Union' ? keys.anyOf.map((schema) => schema.const) : keys;\n        const next = { ...this.Clone(schema), ...options, [Hint]: 'Omit' };\n        if (next.required) {\n            next.required = next.required.filter((key) => !select.includes(key));\n            if (next.required.length === 0)\n                delete next.required;\n        }\n        for (const key of Object.keys(next.properties)) {\n            if (select.includes(key))\n                delete next.properties[key];\n        }\n        return this.Create(next);\n    }\n    /** `Extended` Creates a tuple type from this functions parameters */\n    Parameters(schema, options = {}) {\n        return Type.Tuple(schema.parameters, { ...options });\n    }\n    /** `Standard` Creates an object type whose properties are all optional */\n    Partial(schema, options = {}) {\n        const next = { ...this.Clone(schema), ...options, [Hint]: 'Partial' };\n        delete next.required;\n        for (const key of Object.keys(next.properties)) {\n            const property = next.properties[key];\n            const modifer = property[Modifier];\n            switch (modifer) {\n                case 'ReadonlyOptional':\n                    property[Modifier] = 'ReadonlyOptional';\n                    break;\n                case 'Readonly':\n                    property[Modifier] = 'ReadonlyOptional';\n                    break;\n                case 'Optional':\n                    property[Modifier] = 'Optional';\n                    break;\n                default:\n                    property[Modifier] = 'Optional';\n                    break;\n            }\n        }\n        return this.Create(next);\n    }\n    /** `Standard` Creates a new object type whose keys are picked from the given source type */\n    Pick(schema, keys, options = {}) {\n        const select = keys[Kind] === 'Union' ? keys.anyOf.map((schema) => schema.const) : keys;\n        const next = { ...this.Clone(schema), ...options, [Hint]: 'Pick' };\n        if (next.required) {\n            next.required = next.required.filter((key) => select.includes(key));\n            if (next.required.length === 0)\n                delete next.required;\n        }\n        for (const key of Object.keys(next.properties)) {\n            if (!select.includes(key))\n                delete next.properties[key];\n        }\n        return this.Create(next);\n    }\n    /** `Extended` Creates a Promise type */\n    Promise(item, options = {}) {\n        return this.Create({ ...options, [Kind]: 'Promise', type: 'object', instanceOf: 'Promise', item });\n    }\n    /** `Standard` Creates a record type */\n    Record(key, value, options = {}) {\n        // If string literal union return TObject with properties extracted from union.\n        if (key[Kind] === 'Union') {\n            return this.Object(key.anyOf.reduce((acc, literal) => {\n                return { ...acc, [literal.const]: value };\n            }, {}), { ...options, [Hint]: 'Record' });\n        }\n        // otherwise return TRecord with patternProperties\n        const pattern = ['Integer', 'Number'].includes(key[Kind]) ? '^(0|[1-9][0-9]*)$' : key[Kind] === 'String' && key.pattern ? key.pattern : '^.*$';\n        return this.Create({\n            ...options,\n            [Kind]: 'Record',\n            type: 'object',\n            patternProperties: { [pattern]: value },\n            additionalProperties: false,\n        });\n    }\n    /** `Standard` Creates recursive type */\n    Recursive(callback, options = {}) {\n        if (options.$id === undefined)\n            options.$id = `T${TypeOrdinal++}`;\n        const self = callback({ [Kind]: 'Self', $ref: `${options.$id}` });\n        self.$id = options.$id;\n        return this.Create({ ...options, ...self });\n    }\n    /** `Standard` Creates a reference type. The referenced type must contain a $id. */\n    Ref(schema, options = {}) {\n        if (schema.$id === undefined)\n            throw Error('TypeBuilder.Ref: Referenced schema must specify an $id');\n        return this.Create({ ...options, [Kind]: 'Ref', $ref: schema.$id });\n    }\n    /** `Standard` Creates a string type from a regular expression */\n    RegEx(regex, options = {}) {\n        return this.Create({ ...options, [Kind]: 'String', type: 'string', pattern: regex.source });\n    }\n    /** `Standard` Creates an object type whose properties are all required */\n    Required(schema, options = {}) {\n        const next = { ...this.Clone(schema), ...options, [Hint]: 'Required' };\n        next.required = Object.keys(next.properties);\n        for (const key of Object.keys(next.properties)) {\n            const property = next.properties[key];\n            const modifier = property[Modifier];\n            switch (modifier) {\n                case 'ReadonlyOptional':\n                    property[Modifier] = 'Readonly';\n                    break;\n                case 'Readonly':\n                    property[Modifier] = 'Readonly';\n                    break;\n                case 'Optional':\n                    delete property[Modifier];\n                    break;\n                default:\n                    delete property[Modifier];\n                    break;\n            }\n        }\n        return this.Create(next);\n    }\n    /** `Extended` Creates a type from this functions return type */\n    ReturnType(schema, options = {}) {\n        return { ...options, ...this.Clone(schema.returns) };\n    }\n    /** Removes Kind and Modifier symbol property keys from this schema */\n    Strict(schema) {\n        return JSON.parse(JSON.stringify(schema));\n    }\n    /** `Standard` Creates a string type */\n    String(options = {}) {\n        return this.Create({ ...options, [Kind]: 'String', type: 'string' });\n    }\n    /** `Standard` Creates a tuple type */\n    Tuple(items, options = {}) {\n        const additionalItems = false;\n        const minItems = items.length;\n        const maxItems = items.length;\n        const schema = (items.length > 0 ? { ...options, [Kind]: 'Tuple', type: 'array', items, additionalItems, minItems, maxItems } : { ...options, [Kind]: 'Tuple', type: 'array', minItems, maxItems });\n        return this.Create(schema);\n    }\n    /** `Extended` Creates a undefined type */\n    Undefined(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Undefined', type: 'null', typeOf: 'Undefined' });\n    }\n    /** `Standard` Creates a union type */\n    Union(items, options = {}) {\n        return items.length === 0 ? Type.Never({ ...options }) : this.Create({ ...options, [Kind]: 'Union', anyOf: items });\n    }\n    /** `Extended` Creates a Uint8Array type */\n    Uint8Array(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Uint8Array', type: 'object', instanceOf: 'Uint8Array' });\n    }\n    /** `Standard` Creates an unknown type */\n    Unknown(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Unknown' });\n    }\n    /** `Standard` Creates a user defined schema that infers as type T  */\n    Unsafe(options = {}) {\n        return this.Create({ ...options, [Kind]: options[Kind] || 'Unsafe' });\n    }\n    /** `Extended` Creates a void type */\n    Void(options = {}) {\n        return this.Create({ ...options, [Kind]: 'Void', type: 'null', typeOf: 'Void' });\n    }\n    /** Use this function to return TSchema with static and params omitted */\n    Create(schema) {\n        return schema;\n    }\n    /** Clones the given value */\n    Clone(value) {\n        const isObject = (object) => typeof object === 'object' && object !== null && !Array.isArray(object);\n        const isArray = (object) => typeof object === 'object' && object !== null && Array.isArray(object);\n        if (isObject(value)) {\n            return Object.keys(value).reduce((acc, key) => ({\n                ...acc,\n                [key]: this.Clone(value[key]),\n            }), Object.getOwnPropertySymbols(value).reduce((acc, key) => ({\n                ...acc,\n                [key]: this.Clone(value[key]),\n            }), {}));\n        }\n        else if (isArray(value)) {\n            return value.map((item) => this.Clone(item));\n        }\n        else {\n            return value;\n        }\n    }\n}\n/** JSON Schema Type Builder with Static Type Resolution for TypeScript */\nconst Type = new TypeBuilder();\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/deps/deno.land/x/typebox@0.25.13/src/typebox.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/mod.js":
/*!***********************************************!*\
  !*** ./node_modules/lucid-cardano/esm/mod.js ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blockfrost\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Blockfrost),\n/* harmony export */   \"C\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   \"Constr\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Constr),\n/* harmony export */   \"Data\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Data),\n/* harmony export */   \"Emulator\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Emulator),\n/* harmony export */   \"Kupmios\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Kupmios),\n/* harmony export */   \"Lucid\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Lucid),\n/* harmony export */   \"M\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   \"MerkleTree\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.MerkleTree),\n/* harmony export */   \"PROTOCOL_PARAMETERS_DEFAULT\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.PROTOCOL_PARAMETERS_DEFAULT),\n/* harmony export */   \"SLOT_CONFIG_NETWORK\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.SLOT_CONFIG_NETWORK),\n/* harmony export */   \"Tx\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Tx),\n/* harmony export */   \"TxComplete\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.TxComplete),\n/* harmony export */   \"TxSigned\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.TxSigned),\n/* harmony export */   \"Utils\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.Utils),\n/* harmony export */   \"applyDoubleCborEncoding\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.applyDoubleCborEncoding),\n/* harmony export */   \"applyParamsToScript\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.applyParamsToScript),\n/* harmony export */   \"assetsToValue\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.assetsToValue),\n/* harmony export */   \"combineHash\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.combineHash),\n/* harmony export */   \"concat\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.concat),\n/* harmony export */   \"coreToUtxo\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.coreToUtxo),\n/* harmony export */   \"createCostModels\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.createCostModels),\n/* harmony export */   \"datumJsonToCbor\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.datumJsonToCbor),\n/* harmony export */   \"equals\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.equals),\n/* harmony export */   \"fromHex\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromHex),\n/* harmony export */   \"fromLabel\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromLabel),\n/* harmony export */   \"fromScriptRef\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromScriptRef),\n/* harmony export */   \"fromText\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromText),\n/* harmony export */   \"fromUnit\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromUnit),\n/* harmony export */   \"generatePrivateKey\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.generatePrivateKey),\n/* harmony export */   \"generateSeedPhrase\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.generateSeedPhrase),\n/* harmony export */   \"getAddressDetails\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.getAddressDetails),\n/* harmony export */   \"nativeScriptFromJson\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.nativeScriptFromJson),\n/* harmony export */   \"networkToId\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.networkToId),\n/* harmony export */   \"paymentCredentialOf\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.paymentCredentialOf),\n/* harmony export */   \"sha256\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.sha256),\n/* harmony export */   \"slotToBeginUnixTime\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.slotToBeginUnixTime),\n/* harmony export */   \"stakeCredentialOf\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.stakeCredentialOf),\n/* harmony export */   \"toHex\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex),\n/* harmony export */   \"toLabel\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.toLabel),\n/* harmony export */   \"toPublicKey\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.toPublicKey),\n/* harmony export */   \"toScriptRef\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.toScriptRef),\n/* harmony export */   \"toText\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.toText),\n/* harmony export */   \"toUnit\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.toUnit),\n/* harmony export */   \"unixTimeToEnclosingSlot\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.unixTimeToEnclosingSlot),\n/* harmony export */   \"utxoToCore\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.utxoToCore),\n/* harmony export */   \"valueToAssets\": () => (/* reexport safe */ _src_mod_js__WEBPACK_IMPORTED_MODULE_0__.valueToAssets)\n/* harmony export */ });\n/* harmony import */ var _src_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/mod.js */ \"./node_modules/lucid-cardano/esm/src/mod.js\");\n/* harmony import */ var _node_imports_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_imports.js */ \"./node_modules/lucid-cardano/esm/node_imports.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_mod_js__WEBPACK_IMPORTED_MODULE_0__, _node_imports_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_src_mod_js__WEBPACK_IMPORTED_MODULE_0__, _node_imports_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/node_imports.js":
/*!********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/node_imports.js ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst isNode = globalThis?.process?.versions?.node;\nif (isNode) {\n  const fetch = /* #__PURE__ */ await import(/* webpackIgnore: true */ \"node-fetch\");\n  const { Crypto } = /* #__PURE__ */ await import(/* webpackIgnore: true */ \"@peculiar/webcrypto\");\n  const { WebSocket } = /* #__PURE__ */ await import(/* webpackIgnore: true */ \"ws\");\n  if (!globalThis.WebSocket) globalThis.WebSocket = WebSocket;\n  if (!globalThis.crypto) globalThis.crypto = new Crypto();\n  if (!globalThis.fetch) globalThis.fetch = fetch.default;\n  if (!globalThis.Headers) globalThis.Headers = fetch.Headers;\n  if (!globalThis.Request) globalThis.Request = fetch.Request;\n  if (!globalThis.Response) globalThis.Response = fetch.Response;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/node_imports.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/package.js":
/*!***************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/package.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"lucid-cardano\",\n    \"version\": \"0.9.6\",\n    \"license\": \"MIT\",\n    \"author\": \"Alessandro Konrad\",\n    \"description\": \"Lucid is a library, which allows you to create Cardano transactions and off-chain code for your Plutus contracts in JavaScript, Deno and Node.js.\",\n    \"repository\": \"https://github.com/spacebudz/lucid\"\n});\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/package.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/core/core.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/core.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"C\": () => (/* reexport module object */ _libs_cardano_multiplatform_lib_cardano_multiplatform_lib_generated_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"M\": () => (/* reexport module object */ _libs_cardano_message_signing_cardano_message_signing_generated_js__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _libs_cardano_multiplatform_lib_cardano_multiplatform_lib_generated_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js */ \"./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js\");\n/* harmony import */ var _libs_cardano_message_signing_cardano_message_signing_generated_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/cardano_message_signing/cardano_message_signing.generated.js */ \"./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing.generated.js\");\n/* harmony import */ var _package_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../package.js */ \"./node_modules/lucid-cardano/esm/package.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_libs_cardano_multiplatform_lib_cardano_multiplatform_lib_generated_js__WEBPACK_IMPORTED_MODULE_0__, _libs_cardano_message_signing_cardano_message_signing_generated_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_libs_cardano_multiplatform_lib_cardano_multiplatform_lib_generated_js__WEBPACK_IMPORTED_MODULE_0__, _libs_cardano_message_signing_cardano_message_signing_generated_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nasync function unsafeInstantiate(module, url) {\n    try {\n        await module.instantiate({\n            // Exception for Deno fresh framework\n            url: new URL(url, `https://deno.land/x/lucid@${_package_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].version}/src/core/libs/`),\n        });\n    }\n    catch (_e) {\n        // This only ever happens during SSR rendering\n    }\n}\nawait Promise.all([\n    unsafeInstantiate(_libs_cardano_multiplatform_lib_cardano_multiplatform_lib_generated_js__WEBPACK_IMPORTED_MODULE_0__, `cardano_multiplatform_lib/cardano_multiplatform_lib_bg.wasm`),\n    unsafeInstantiate(_libs_cardano_message_signing_cardano_message_signing_generated_js__WEBPACK_IMPORTED_MODULE_1__, `cardano_message_signing/cardano_message_signing_bg.wasm`),\n]);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/core.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing.generated.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing.generated.js ***!
  \*******************************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AlgorithmId\": () => (/* binding */ AlgorithmId),\n/* harmony export */   \"BigNum\": () => (/* binding */ BigNum),\n/* harmony export */   \"CBORArray\": () => (/* binding */ CBORArray),\n/* harmony export */   \"CBORObject\": () => (/* binding */ CBORObject),\n/* harmony export */   \"CBORSpecial\": () => (/* binding */ CBORSpecial),\n/* harmony export */   \"CBORSpecialType\": () => (/* binding */ CBORSpecialType),\n/* harmony export */   \"CBORValue\": () => (/* binding */ CBORValue),\n/* harmony export */   \"CBORValueKind\": () => (/* binding */ CBORValueKind),\n/* harmony export */   \"COSEEncrypt\": () => (/* binding */ COSEEncrypt),\n/* harmony export */   \"COSEEncrypt0\": () => (/* binding */ COSEEncrypt0),\n/* harmony export */   \"COSEKey\": () => (/* binding */ COSEKey),\n/* harmony export */   \"COSERecipient\": () => (/* binding */ COSERecipient),\n/* harmony export */   \"COSERecipients\": () => (/* binding */ COSERecipients),\n/* harmony export */   \"COSESign\": () => (/* binding */ COSESign),\n/* harmony export */   \"COSESign1\": () => (/* binding */ COSESign1),\n/* harmony export */   \"COSESign1Builder\": () => (/* binding */ COSESign1Builder),\n/* harmony export */   \"COSESignBuilder\": () => (/* binding */ COSESignBuilder),\n/* harmony export */   \"COSESignature\": () => (/* binding */ COSESignature),\n/* harmony export */   \"COSESignatures\": () => (/* binding */ COSESignatures),\n/* harmony export */   \"CounterSignature\": () => (/* binding */ CounterSignature),\n/* harmony export */   \"CurveType\": () => (/* binding */ CurveType),\n/* harmony export */   \"ECKey\": () => (/* binding */ ECKey),\n/* harmony export */   \"EdDSA25519Key\": () => (/* binding */ EdDSA25519Key),\n/* harmony export */   \"HeaderMap\": () => (/* binding */ HeaderMap),\n/* harmony export */   \"Headers\": () => (/* binding */ Headers),\n/* harmony export */   \"Int\": () => (/* binding */ Int),\n/* harmony export */   \"KeyOperation\": () => (/* binding */ KeyOperation),\n/* harmony export */   \"KeyType\": () => (/* binding */ KeyType),\n/* harmony export */   \"Label\": () => (/* binding */ Label),\n/* harmony export */   \"LabelKind\": () => (/* binding */ LabelKind),\n/* harmony export */   \"Labels\": () => (/* binding */ Labels),\n/* harmony export */   \"PasswordEncryption\": () => (/* binding */ PasswordEncryption),\n/* harmony export */   \"ProtectedHeaderMap\": () => (/* binding */ ProtectedHeaderMap),\n/* harmony export */   \"PubKeyEncryption\": () => (/* binding */ PubKeyEncryption),\n/* harmony export */   \"SigContext\": () => (/* binding */ SigContext),\n/* harmony export */   \"SigStructure\": () => (/* binding */ SigStructure),\n/* harmony export */   \"SignedMessage\": () => (/* binding */ SignedMessage),\n/* harmony export */   \"SignedMessageKind\": () => (/* binding */ SignedMessageKind),\n/* harmony export */   \"TaggedCBOR\": () => (/* binding */ TaggedCBOR),\n/* harmony export */   \"instantiate\": () => (/* binding */ instantiate),\n/* harmony export */   \"instantiateWithInstance\": () => (/* binding */ instantiateWithInstance),\n/* harmony export */   \"isInstantiated\": () => (/* binding */ isInstantiated)\n/* harmony export */ });\n// @generated file from wasmbuild -- do not edit\n// deno-lint-ignore-file\n// deno-fmt-ignore-file\n// source-hash: ccea9a27c8aee355bc2051725d859ee0a31dcb77\nconst require = /* #__PURE__ */ globalThis?.process?.versions?.node\n    ? await (async () => {\n        const { createRequire } = await import(\n        /* webpackIgnore: true */ \"module\");\n        return createRequire(\"file:///home/alphonzoescolar/Documents/SAIB-PROJECTS/teddyswap/TeddySwap.Offchain/src/TeddySwap.UI/node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing.generated.js\");\n    })()\n    : null;\nif (globalThis?.process?.versions?.node && typeof btoa === \"undefined\") {\n    globalThis.btoa = function (str) {\n        return Buffer.from(str, \"binary\").toString(\"base64\");\n    };\n    globalThis.atob = function (b64Encoded) {\n        return Buffer.from(b64Encoded, \"base64\").toString(\"binary\");\n    };\n}\nlet wasm;\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 132)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nconst cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nlet WASM_VECTOR_LEN = 0;\nconst cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nlet cachedFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n/** */\nconst AlgorithmId = Object.freeze({\n    /**\n     * r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n     */\n    EdDSA: 0,\n    \"0\": \"EdDSA\",\n    /**\n     * r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n     */\n    ChaCha20Poly1305: 1,\n    \"1\": \"ChaCha20Poly1305\",\n});\n/** */\nconst KeyType = Object.freeze({\n    /**\n     * r\" octet key pair\n     */\n    OKP: 0,\n    \"0\": \"OKP\",\n    /**\n     * r\" 2-coord EC\n     */\n    EC2: 1,\n    \"1\": \"EC2\",\n    Symmetric: 2,\n    \"2\": \"Symmetric\",\n});\n/** */\nconst ECKey = Object.freeze({\n    CRV: 0,\n    \"0\": \"CRV\",\n    X: 1,\n    \"1\": \"X\",\n    Y: 2,\n    \"2\": \"Y\",\n    D: 3,\n    \"3\": \"D\",\n});\n/** */\nconst CurveType = Object.freeze({\n    P256: 0,\n    \"0\": \"P256\",\n    P384: 1,\n    \"1\": \"P384\",\n    P521: 2,\n    \"2\": \"P521\",\n    X25519: 3,\n    \"3\": \"X25519\",\n    X448: 4,\n    \"4\": \"X448\",\n    Ed25519: 5,\n    \"5\": \"Ed25519\",\n    Ed448: 6,\n    \"6\": \"Ed448\",\n});\n/** */\nconst KeyOperation = Object.freeze({\n    Sign: 0,\n    \"0\": \"Sign\",\n    Verify: 1,\n    \"1\": \"Verify\",\n    Encrypt: 2,\n    \"2\": \"Encrypt\",\n    Decrypt: 3,\n    \"3\": \"Decrypt\",\n    WrapKey: 4,\n    \"4\": \"WrapKey\",\n    UnwrapKey: 5,\n    \"5\": \"UnwrapKey\",\n    DeriveKey: 6,\n    \"6\": \"DeriveKey\",\n    DeriveBits: 7,\n    \"7\": \"DeriveBits\",\n});\n/** */\nconst CBORSpecialType = Object.freeze({\n    Bool: 0,\n    \"0\": \"Bool\",\n    Float: 1,\n    \"1\": \"Float\",\n    Unassigned: 2,\n    \"2\": \"Unassigned\",\n    Break: 3,\n    \"3\": \"Break\",\n    Undefined: 4,\n    \"4\": \"Undefined\",\n    Null: 5,\n    \"5\": \"Null\",\n});\n/** */\nconst CBORValueKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Bytes: 1,\n    \"1\": \"Bytes\",\n    Text: 2,\n    \"2\": \"Text\",\n    Array: 3,\n    \"3\": \"Array\",\n    Object: 4,\n    \"4\": \"Object\",\n    TaggedCBOR: 5,\n    \"5\": \"TaggedCBOR\",\n    Special: 6,\n    \"6\": \"Special\",\n});\n/** */\nconst LabelKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Text: 1,\n    \"1\": \"Text\",\n});\n/** */\nconst SignedMessageKind = Object.freeze({\n    COSESIGN: 0,\n    \"0\": \"COSESIGN\",\n    COSESIGN1: 1,\n    \"1\": \"COSESIGN1\",\n});\n/** */\nconst SigContext = Object.freeze({\n    Signature: 0,\n    \"0\": \"Signature\",\n    Signature1: 1,\n    \"1\": \"Signature1\",\n    CounterSignature: 2,\n    \"2\": \"CounterSignature\",\n});\nconst BigNumFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bignum_free(ptr));\n/** */\nclass BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        BigNumFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BigNumFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bignum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bignum_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_mul(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_add(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_sub(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst CBORArrayFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cborarray_free(ptr));\n/** */\nclass CBORArray {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n        CBORArrayFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CBORArrayFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORArray}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cborarray_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CBORArray.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    static new() {\n        const ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {CBORValue}\n     */\n    get(index) {\n        const ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} elem\n     */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        const ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\nconst CBORObjectFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cborobject_free(ptr));\n/** */\nclass CBORObject {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n        CBORObjectFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CBORObjectFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORObject}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cborobject_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CBORObject.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CBORObject}\n     */\n    static new() {\n        const ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {CBORValue} key\n     * @param {CBORValue} value\n     * @returns {CBORValue | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        const ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} key\n     * @returns {CBORValue | undefined}\n     */\n    get(key) {\n        _assertClass(key, CBORValue);\n        const ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    keys() {\n        const ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        const ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\nconst CBORSpecialFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cborspecial_free(ptr));\n/** */\nclass CBORSpecial {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n        CBORSpecialFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CBORSpecialFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORSpecial}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cborspecial_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CBORSpecial.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} b\n     * @returns {CBORSpecial}\n     */\n    static new_bool(b) {\n        const ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {number} u\n     * @returns {CBORSpecial}\n     */\n    static new_unassigned(u) {\n        const ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_break() {\n        const ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_null() {\n        const ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_undefined() {\n        const ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    as_bool() {\n        const ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r2 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r2;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_unassigned() {\n        const ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\nconst CBORValueFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cborvalue_free(ptr));\n/** */\nclass CBORValue {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n        CBORValueFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CBORValueFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cborvalue_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CBORValue.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Int} int\n     * @returns {CBORValue}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        const ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static new_bytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {CBORValue}\n     */\n    static new_text(text) {\n        const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORArray} arr\n     * @returns {CBORValue}\n     */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        const ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORObject} obj\n     * @returns {CBORValue}\n     */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        const ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {TaggedCBOR} tagged\n     * @returns {CBORValue}\n     */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        const ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORSpecial} special\n     * @returns {CBORValue}\n     */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        const ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue}\n     */\n    static from_label(label) {\n        _assertClass(label, Label);\n        const ret = wasm.cborvalue_from_label(label.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        const ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CBORArray | undefined}\n     */\n    as_array() {\n        const ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject | undefined}\n     */\n    as_object() {\n        const ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {TaggedCBOR | undefined}\n     */\n    as_tagged() {\n        const ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial | undefined}\n     */\n    as_special() {\n        const ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\nconst COSEEncryptFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_coseencrypt_free(ptr));\n/** */\nclass COSEEncrypt {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n        COSEEncryptFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSEEncryptFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coseencrypt_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSEEncrypt.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        const ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    recipients() {\n        const ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @param {COSERecipients} recipients\n     * @returns {COSEEncrypt}\n     */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        const ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\nconst COSEEncrypt0Finalization = new FinalizationRegistry((ptr) => wasm.__wbg_coseencrypt0_free(ptr));\n/** */\nclass COSEEncrypt0 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n        COSEEncrypt0Finalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSEEncrypt0Finalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt0}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coseencrypt0_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSEEncrypt0.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        const ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSEEncrypt0}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\nconst COSEKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosekey_free(ptr));\n/** */\nclass COSEKey {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n        COSEKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSEKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cosekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSEKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} key_type\n     */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n     * @returns {Label}\n     */\n    key_type() {\n        const ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        const ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        const ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} key_ops\n     */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    key_ops() {\n        const ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} base_init_vector\n     */\n    set_base_init_vector(base_init_vector) {\n        const ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        const ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(label, Label);\n            _assertClass(value, CBORValue);\n            wasm.cosekey_set_header(retptr, this.ptr, label.ptr, value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} key_type\n     * @returns {COSEKey}\n     */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        const ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\nconst COSERecipientFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_coserecipient_free(ptr));\n/** */\nclass COSERecipient {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n        COSERecipientFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSERecipientFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipient}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coserecipient_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSERecipient.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        const ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSERecipient}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\nconst COSERecipientsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_coserecipients_free(ptr));\n/** */\nclass COSERecipients {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n        COSERecipientsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSERecipientsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipients}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coserecipients_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSERecipients.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    static new() {\n        const ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSERecipient}\n     */\n    get(index) {\n        const ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @param {COSERecipient} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\nconst COSESignFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosesign_free(ptr));\n/** */\nclass COSESign {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n        COSESignFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSESignFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cosesign_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSESign.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        const ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        const ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {COSESignatures} signatures\n     * @returns {COSESign}\n     */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        const ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\nconst COSESign1Finalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosesign1_free(ptr));\n/** */\nclass COSESign1 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n        COSESign1Finalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSESign1Finalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign1}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cosesign1_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSESign1.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        const ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n     * # Arguments\n     * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n     * @param {Uint8Array | undefined} external_aad\n     * @param {Uint8Array | undefined} external_payload\n     * @returns {SigStructure}\n     */\n    signed_data(external_aad, external_payload) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(external_aad)\n                ? 0\n                : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(external_payload)\n                ? 0\n                : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.cosesign1_signed_data(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SigStructure.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {Uint8Array} signature\n     * @returns {COSESign1}\n     */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\nconst COSESign1BuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosesign1builder_free(ptr));\n/** */\nclass COSESign1Builder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n        COSESign1BuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSESign1BuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESign1Builder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        const ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        const ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        const ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} signed_sig_structure\n     * @returns {COSESign1}\n     */\n    build(signed_sig_structure) {\n        const ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\nconst COSESignBuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosesignbuilder_free(ptr));\n/** */\nclass COSESignBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n        COSESignBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSESignBuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESignBuilder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        const ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        const ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        const ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} signed_sig_structure\n     * @returns {COSESign}\n     */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        const ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\nconst COSESignatureFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosesignature_free(ptr));\n/** */\nclass COSESignature {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n        COSESignatureFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSESignatureFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignature}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cosesignature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSESignature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        const ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} signature\n     * @returns {COSESignature}\n     */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        const ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\nconst COSESignaturesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_cosesignatures_free(ptr));\n/** */\nclass COSESignatures {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n        COSESignaturesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        COSESignaturesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignatures}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cosesignatures_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return COSESignatures.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    static new() {\n        const ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSESignature}\n     */\n    get(index) {\n        const ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\nconst CounterSignatureFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_countersignature_free(ptr));\n/** */\nclass CounterSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n        CounterSignatureFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CounterSignatureFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CounterSignature}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.countersignature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CounterSignature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {COSESignature} cose_signature\n     * @returns {CounterSignature}\n     */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        const ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} cose_signatures\n     * @returns {CounterSignature}\n     */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        const ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        const ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\nconst EdDSA25519KeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_eddsa25519key_free(ptr));\n/** */\nclass EdDSA25519Key {\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n        EdDSA25519KeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        EdDSA25519KeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} pubkey_bytes\n     * @returns {EdDSA25519Key}\n     */\n    static new(pubkey_bytes) {\n        const ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} private_key_bytes\n     */\n    set_private_key(private_key_bytes) {\n        const ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /** */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /** */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n     * @returns {COSEKey}\n     */\n    build() {\n        const ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\nconst HeaderMapFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_headermap_free(ptr));\n/** */\nclass HeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n        HeaderMapFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        HeaderMapFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderMap}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.headermap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        const ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} criticality\n     */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    criticality() {\n        const ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Label} content_type\n     */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.headermap_set_content_type(this.ptr, content_type.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    content_type() {\n        const ret = wasm.headermap_content_type(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        const ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} init_vector\n     */\n    set_init_vector(init_vector) {\n        const ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} partial_init_vector\n     */\n    set_partial_init_vector(partial_init_vector) {\n        const ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CounterSignature} counter_signature\n     */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n     * @returns {CounterSignature | undefined}\n     */\n    counter_signature() {\n        const ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        const ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(label, Label);\n            _assertClass(value, CBORValue);\n            wasm.headermap_set_header(retptr, this.ptr, label.ptr, value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Labels}\n     */\n    keys() {\n        const ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    static new() {\n        const ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\nconst HeadersFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_headers_free(ptr));\n/** */\nclass Headers {\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n        HeadersFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        HeadersFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Headers}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.headers_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Headers.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    protected() {\n        const ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    unprotected() {\n        const ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {ProtectedHeaderMap} protected_\n     * @param {HeaderMap} unprotected_\n     * @returns {Headers}\n     */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        const ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\nconst IntFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_int_free(ptr));\n/** */\nclass Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        IntFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        IntFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.__destroy_into_raw();\n        const ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.__destroy_into_raw();\n        const ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        const ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        const ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        const ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        const ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst LabelFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_label_free(ptr));\n/** */\nclass Label {\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n        LabelFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        LabelFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Label}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.label_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Label.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Int} int\n     * @returns {Label}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        const ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {Label}\n     */\n    static new_text(text) {\n        const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        const ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} id\n     * @returns {Label}\n     */\n    static from_algorithm_id(id) {\n        const ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_type\n     * @returns {Label}\n     */\n    static from_key_type(key_type) {\n        const ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} ec_key\n     * @returns {Label}\n     */\n    static from_ec_key(ec_key) {\n        const ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} curve_type\n     * @returns {Label}\n     */\n    static from_curve_type(curve_type) {\n        const ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_op\n     * @returns {Label}\n     */\n    static from_key_operation(key_op) {\n        const ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\nconst LabelsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_labels_free(ptr));\n/** */\nclass Labels {\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n        LabelsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        LabelsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Labels}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.labels_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Labels.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Labels}\n     */\n    static new() {\n        const ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Label}\n     */\n    get(index) {\n        const ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Label} elem\n     */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\nconst PasswordEncryptionFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_passwordencryption_free(ptr));\n/** */\nclass PasswordEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n        PasswordEncryptionFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PasswordEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PasswordEncryption}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.passwordencryption_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PasswordEncryption.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {COSEEncrypt0} data\n     * @returns {PasswordEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        const ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\nconst ProtectedHeaderMapFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_protectedheadermap_free(ptr));\n/** */\nclass ProtectedHeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n        ProtectedHeaderMapFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProtectedHeaderMapFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtectedHeaderMap}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protectedheadermap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtectedHeaderMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    static new_empty() {\n        const ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {HeaderMap} header_map\n     * @returns {ProtectedHeaderMap}\n     */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        const ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    deserialized_headers() {\n        const ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\nconst PubKeyEncryptionFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_pubkeyencryption_free(ptr));\n/** */\nclass PubKeyEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n        PubKeyEncryptionFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PubKeyEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PubKeyEncryption}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.pubkeyencryption_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PubKeyEncryption.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {COSEEncrypt} data\n     * @returns {PubKeyEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        const ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\nconst SigStructureFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_sigstructure_free(ptr));\n/** */\nclass SigStructure {\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n        SigStructureFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        SigStructureFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SigStructure}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.sigstructure_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SigStructure.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    context() {\n        const ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    body_protected() {\n        const ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap | undefined}\n     */\n    sign_protected() {\n        const ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ProtectedHeaderMap} sign_protected\n     */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n     * @param {number} context\n     * @param {ProtectedHeaderMap} body_protected\n     * @param {Uint8Array} external_aad\n     * @param {Uint8Array} payload\n     * @returns {SigStructure}\n     */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        const ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\nconst SignedMessageFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_signedmessage_free(ptr));\n/** */\nclass SignedMessage {\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n        SignedMessageFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        SignedMessageFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SignedMessage}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.signedmessage_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SignedMessage.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {COSESign} cose_sign\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        const ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign1} cose_sign1\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        const ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {SignedMessage}\n     */\n    static from_user_facing_encoding(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.signedmessage_from_user_facing_encoding(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SignedMessage.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {COSESign | undefined}\n     */\n    as_cose_sign() {\n        const ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {COSESign1 | undefined}\n     */\n    as_cose_sign1() {\n        const ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\nconst TaggedCBORFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_taggedcbor_free(ptr));\n/** */\nclass TaggedCBOR {\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n        TaggedCBORFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TaggedCBORFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TaggedCBOR}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.taggedcbor_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TaggedCBOR.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tag() {\n        const ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {CBORValue}\n     */\n    value() {\n        const ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tag\n     * @param {CBORValue} value\n     * @returns {TaggedCBOR}\n     */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.__destroy_into_raw();\n        _assertClass(value, CBORValue);\n        const ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\nconst imports = {\n    __wbindgen_placeholder__: {\n        __wbindgen_object_drop_ref: function (arg0) {\n            takeObject(arg0);\n        },\n        __wbindgen_string_new: function (arg0, arg1) {\n            const ret = getStringFromWasm0(arg0, arg1);\n            return addHeapObject(ret);\n        },\n        __wbindgen_debug_string: function (arg0, arg1) {\n            const ret = debugString(getObject(arg1));\n            const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            getInt32Memory0()[arg0 / 4 + 1] = len0;\n            getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n        },\n        __wbindgen_throw: function (arg0, arg1) {\n            throw new Error(getStringFromWasm0(arg0, arg1));\n        },\n    },\n};\n/**\n * Decompression callback\n *\n * @callback DecompressCallback\n * @param {Uint8Array} compressed\n * @return {Uint8Array} decompressed\n */\n/**\n * Options for instantiating a Wasm instance.\n * @typedef {Object} InstantiateOptions\n * @property {URL=} url - Optional url to the Wasm file to instantiate.\n * @property {DecompressCallback=} decompress - Callback to decompress the\n * raw Wasm file bytes before instantiating.\n */\n/** Instantiates an instance of the Wasm module returning its functions.\n * @remarks It is safe to call this multiple times and once successfully\n * loaded it will always return a reference to the same object.\n * @param {InstantiateOptions=} opts\n */\nasync function instantiate(opts) {\n    return (await instantiateWithInstance(opts)).exports;\n}\nlet instanceWithExports;\nlet lastLoadPromise;\n/** Instantiates an instance of the Wasm module along with its exports.\n * @remarks It is safe to call this multiple times and once successfully\n * loaded it will always return a reference to the same object.\n * @param {InstantiateOptions=} opts\n * @returns {Promise<{\n *   instance: WebAssembly.Instance;\n *   exports: { BigNum : typeof BigNum ; CBORArray : typeof CBORArray ; CBORObject : typeof CBORObject ; CBORSpecial : typeof CBORSpecial ; CBORValue : typeof CBORValue ; COSEEncrypt : typeof COSEEncrypt ; COSEEncrypt0 : typeof COSEEncrypt0 ; COSEKey : typeof COSEKey ; COSERecipient : typeof COSERecipient ; COSERecipients : typeof COSERecipients ; COSESign : typeof COSESign ; COSESign1 : typeof COSESign1 ; COSESign1Builder : typeof COSESign1Builder ; COSESignBuilder : typeof COSESignBuilder ; COSESignature : typeof COSESignature ; COSESignatures : typeof COSESignatures ; CounterSignature : typeof CounterSignature ; EdDSA25519Key : typeof EdDSA25519Key ; HeaderMap : typeof HeaderMap ; Headers : typeof Headers ; Int : typeof Int ; Label : typeof Label ; Labels : typeof Labels ; PasswordEncryption : typeof PasswordEncryption ; ProtectedHeaderMap : typeof ProtectedHeaderMap ; PubKeyEncryption : typeof PubKeyEncryption ; SigStructure : typeof SigStructure ; SignedMessage : typeof SignedMessage ; TaggedCBOR : typeof TaggedCBOR  }\n * }>}\n */\nfunction instantiateWithInstance(opts) {\n    if (instanceWithExports != null) {\n        return Promise.resolve(instanceWithExports);\n    }\n    if (lastLoadPromise == null) {\n        lastLoadPromise = (async () => {\n            try {\n                const instance = (await instantiateModule(opts ?? {})).instance;\n                wasm = instance.exports;\n                cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n                cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n                instanceWithExports = {\n                    instance,\n                    exports: getWasmInstanceExports(),\n                };\n                return instanceWithExports;\n            }\n            finally {\n                lastLoadPromise = null;\n            }\n        })();\n    }\n    return lastLoadPromise;\n}\nfunction getWasmInstanceExports() {\n    return {\n        BigNum,\n        CBORArray,\n        CBORObject,\n        CBORSpecial,\n        CBORValue,\n        COSEEncrypt,\n        COSEEncrypt0,\n        COSEKey,\n        COSERecipient,\n        COSERecipients,\n        COSESign,\n        COSESign1,\n        COSESign1Builder,\n        COSESignBuilder,\n        COSESignature,\n        COSESignatures,\n        CounterSignature,\n        EdDSA25519Key,\n        HeaderMap,\n        Headers,\n        Int,\n        Label,\n        Labels,\n        PasswordEncryption,\n        ProtectedHeaderMap,\n        PubKeyEncryption,\n        SigStructure,\n        SignedMessage,\n        TaggedCBOR,\n    };\n}\n/** Gets if the Wasm module has been instantiated. */\nfunction isInstantiated() {\n    return instanceWithExports != null;\n}\n/**\n * @param {InstantiateOptions} opts\n */\nasync function instantiateModule(opts) {\n    // Temporary exception for fresh framework\n    const wasmUrl = \"file:///home/alphonzoescolar/Documents/SAIB-PROJECTS/teddyswap/TeddySwap.Offchain/src/TeddySwap.UI/node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing.generated.js\".includes(\"_frsh\")\n        ? opts.url\n        : new URL(/* asset import */ __webpack_require__(/*! cardano_message_signing_bg.wasm */ \"./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing_bg.wasm\"), __webpack_require__.b);\n    const decompress = opts.decompress;\n    const isFile = wasmUrl.protocol === \"file:\";\n    // make file urls work in Node via dnt\n    const isNode = globalThis.process?.versions?.node != null;\n    if (isNode && isFile) {\n        // the deno global will be shimmed by dnt\n        const wasmCode = await Deno.readFile(wasmUrl);\n        return WebAssembly.instantiate(decompress ? decompress(wasmCode) : wasmCode, imports);\n    }\n    switch (wasmUrl.protocol) {\n        case \"file:\":\n        case \"https:\":\n        case \"http:\": {\n            if (isFile) {\n                if (typeof Deno !== \"object\") {\n                    throw new Error(\"file urls are not supported in this environment\");\n                }\n                if (\"permissions\" in Deno) {\n                    await Deno.permissions.request({ name: \"read\", path: wasmUrl });\n                }\n            }\n            else if (typeof Deno === \"object\" && \"permissions\" in Deno) {\n                await Deno.permissions.request({ name: \"net\", host: wasmUrl.host });\n            }\n            const wasmResponse = await fetch(wasmUrl);\n            if (decompress) {\n                const wasmCode = new Uint8Array(await wasmResponse.arrayBuffer());\n                return WebAssembly.instantiate(decompress(wasmCode), imports);\n            }\n            if (isFile ||\n                wasmResponse.headers.get(\"content-type\")?.toLowerCase()\n                    .startsWith(\"application/wasm\")) {\n                return WebAssembly.instantiateStreaming(wasmResponse, imports);\n            }\n            else {\n                return WebAssembly.instantiate(await wasmResponse.arrayBuffer(), imports);\n            }\n        }\n        default:\n            throw new Error(`Unsupported protocol: ${wasmUrl.protocol}`);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/libs/cardano_message_signing/cardano_message_signing.generated.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js ***!
  \***********************************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Address\": () => (/* binding */ Address),\n/* harmony export */   \"AssetName\": () => (/* binding */ AssetName),\n/* harmony export */   \"AssetNames\": () => (/* binding */ AssetNames),\n/* harmony export */   \"Assets\": () => (/* binding */ Assets),\n/* harmony export */   \"AuxiliaryData\": () => (/* binding */ AuxiliaryData),\n/* harmony export */   \"AuxiliaryDataHash\": () => (/* binding */ AuxiliaryDataHash),\n/* harmony export */   \"AuxiliaryDataSet\": () => (/* binding */ AuxiliaryDataSet),\n/* harmony export */   \"BaseAddress\": () => (/* binding */ BaseAddress),\n/* harmony export */   \"BigInt\": () => (/* binding */ BigInt),\n/* harmony export */   \"BigNum\": () => (/* binding */ BigNum),\n/* harmony export */   \"Bip32PrivateKey\": () => (/* binding */ Bip32PrivateKey),\n/* harmony export */   \"Bip32PublicKey\": () => (/* binding */ Bip32PublicKey),\n/* harmony export */   \"Block\": () => (/* binding */ Block),\n/* harmony export */   \"BlockHash\": () => (/* binding */ BlockHash),\n/* harmony export */   \"Blockfrost\": () => (/* binding */ Blockfrost),\n/* harmony export */   \"BootstrapWitness\": () => (/* binding */ BootstrapWitness),\n/* harmony export */   \"BootstrapWitnesses\": () => (/* binding */ BootstrapWitnesses),\n/* harmony export */   \"ByronAddress\": () => (/* binding */ ByronAddress),\n/* harmony export */   \"Certificate\": () => (/* binding */ Certificate),\n/* harmony export */   \"CertificateKind\": () => (/* binding */ CertificateKind),\n/* harmony export */   \"Certificates\": () => (/* binding */ Certificates),\n/* harmony export */   \"ConstrPlutusData\": () => (/* binding */ ConstrPlutusData),\n/* harmony export */   \"CostModel\": () => (/* binding */ CostModel),\n/* harmony export */   \"Costmdls\": () => (/* binding */ Costmdls),\n/* harmony export */   \"DNSRecordAorAAAA\": () => (/* binding */ DNSRecordAorAAAA),\n/* harmony export */   \"DNSRecordSRV\": () => (/* binding */ DNSRecordSRV),\n/* harmony export */   \"Data\": () => (/* binding */ Data),\n/* harmony export */   \"DataHash\": () => (/* binding */ DataHash),\n/* harmony export */   \"Datum\": () => (/* binding */ Datum),\n/* harmony export */   \"DatumKind\": () => (/* binding */ DatumKind),\n/* harmony export */   \"Ed25519KeyHash\": () => (/* binding */ Ed25519KeyHash),\n/* harmony export */   \"Ed25519KeyHashes\": () => (/* binding */ Ed25519KeyHashes),\n/* harmony export */   \"Ed25519Signature\": () => (/* binding */ Ed25519Signature),\n/* harmony export */   \"EnterpriseAddress\": () => (/* binding */ EnterpriseAddress),\n/* harmony export */   \"ExUnitPrices\": () => (/* binding */ ExUnitPrices),\n/* harmony export */   \"ExUnits\": () => (/* binding */ ExUnits),\n/* harmony export */   \"GeneralTransactionMetadata\": () => (/* binding */ GeneralTransactionMetadata),\n/* harmony export */   \"GenesisDelegateHash\": () => (/* binding */ GenesisDelegateHash),\n/* harmony export */   \"GenesisHash\": () => (/* binding */ GenesisHash),\n/* harmony export */   \"GenesisHashes\": () => (/* binding */ GenesisHashes),\n/* harmony export */   \"GenesisKeyDelegation\": () => (/* binding */ GenesisKeyDelegation),\n/* harmony export */   \"Header\": () => (/* binding */ Header),\n/* harmony export */   \"HeaderBody\": () => (/* binding */ HeaderBody),\n/* harmony export */   \"Int\": () => (/* binding */ Int),\n/* harmony export */   \"Ipv4\": () => (/* binding */ Ipv4),\n/* harmony export */   \"Ipv6\": () => (/* binding */ Ipv6),\n/* harmony export */   \"KESSignature\": () => (/* binding */ KESSignature),\n/* harmony export */   \"KESVKey\": () => (/* binding */ KESVKey),\n/* harmony export */   \"Language\": () => (/* binding */ Language),\n/* harmony export */   \"LanguageKind\": () => (/* binding */ LanguageKind),\n/* harmony export */   \"Languages\": () => (/* binding */ Languages),\n/* harmony export */   \"LegacyDaedalusPrivateKey\": () => (/* binding */ LegacyDaedalusPrivateKey),\n/* harmony export */   \"LinearFee\": () => (/* binding */ LinearFee),\n/* harmony export */   \"MIRKind\": () => (/* binding */ MIRKind),\n/* harmony export */   \"MIRPot\": () => (/* binding */ MIRPot),\n/* harmony export */   \"MIRToStakeCredentials\": () => (/* binding */ MIRToStakeCredentials),\n/* harmony export */   \"MetadataJsonSchema\": () => (/* binding */ MetadataJsonSchema),\n/* harmony export */   \"MetadataList\": () => (/* binding */ MetadataList),\n/* harmony export */   \"MetadataMap\": () => (/* binding */ MetadataMap),\n/* harmony export */   \"Mint\": () => (/* binding */ Mint),\n/* harmony export */   \"MintAssets\": () => (/* binding */ MintAssets),\n/* harmony export */   \"MoveInstantaneousReward\": () => (/* binding */ MoveInstantaneousReward),\n/* harmony export */   \"MoveInstantaneousRewardsCert\": () => (/* binding */ MoveInstantaneousRewardsCert),\n/* harmony export */   \"MultiAsset\": () => (/* binding */ MultiAsset),\n/* harmony export */   \"MultiHostName\": () => (/* binding */ MultiHostName),\n/* harmony export */   \"NativeScript\": () => (/* binding */ NativeScript),\n/* harmony export */   \"NativeScriptKind\": () => (/* binding */ NativeScriptKind),\n/* harmony export */   \"NativeScripts\": () => (/* binding */ NativeScripts),\n/* harmony export */   \"NetworkId\": () => (/* binding */ NetworkId),\n/* harmony export */   \"NetworkIdKind\": () => (/* binding */ NetworkIdKind),\n/* harmony export */   \"NetworkInfo\": () => (/* binding */ NetworkInfo),\n/* harmony export */   \"Nonce\": () => (/* binding */ Nonce),\n/* harmony export */   \"OperationalCert\": () => (/* binding */ OperationalCert),\n/* harmony export */   \"PlutusData\": () => (/* binding */ PlutusData),\n/* harmony export */   \"PlutusDataKind\": () => (/* binding */ PlutusDataKind),\n/* harmony export */   \"PlutusDatumSchema\": () => (/* binding */ PlutusDatumSchema),\n/* harmony export */   \"PlutusList\": () => (/* binding */ PlutusList),\n/* harmony export */   \"PlutusMap\": () => (/* binding */ PlutusMap),\n/* harmony export */   \"PlutusScript\": () => (/* binding */ PlutusScript),\n/* harmony export */   \"PlutusScripts\": () => (/* binding */ PlutusScripts),\n/* harmony export */   \"PlutusWitness\": () => (/* binding */ PlutusWitness),\n/* harmony export */   \"Pointer\": () => (/* binding */ Pointer),\n/* harmony export */   \"PointerAddress\": () => (/* binding */ PointerAddress),\n/* harmony export */   \"PoolMetadata\": () => (/* binding */ PoolMetadata),\n/* harmony export */   \"PoolMetadataHash\": () => (/* binding */ PoolMetadataHash),\n/* harmony export */   \"PoolParams\": () => (/* binding */ PoolParams),\n/* harmony export */   \"PoolRegistration\": () => (/* binding */ PoolRegistration),\n/* harmony export */   \"PoolRetirement\": () => (/* binding */ PoolRetirement),\n/* harmony export */   \"PrivateKey\": () => (/* binding */ PrivateKey),\n/* harmony export */   \"ProposedProtocolParameterUpdates\": () => (/* binding */ ProposedProtocolParameterUpdates),\n/* harmony export */   \"ProtocolParamUpdate\": () => (/* binding */ ProtocolParamUpdate),\n/* harmony export */   \"ProtocolVersion\": () => (/* binding */ ProtocolVersion),\n/* harmony export */   \"PublicKey\": () => (/* binding */ PublicKey),\n/* harmony export */   \"PublicKeys\": () => (/* binding */ PublicKeys),\n/* harmony export */   \"Redeemer\": () => (/* binding */ Redeemer),\n/* harmony export */   \"RedeemerTag\": () => (/* binding */ RedeemerTag),\n/* harmony export */   \"RedeemerTagKind\": () => (/* binding */ RedeemerTagKind),\n/* harmony export */   \"RedeemerWitnessKey\": () => (/* binding */ RedeemerWitnessKey),\n/* harmony export */   \"Redeemers\": () => (/* binding */ Redeemers),\n/* harmony export */   \"Relay\": () => (/* binding */ Relay),\n/* harmony export */   \"RelayKind\": () => (/* binding */ RelayKind),\n/* harmony export */   \"Relays\": () => (/* binding */ Relays),\n/* harmony export */   \"RequiredWitnessSet\": () => (/* binding */ RequiredWitnessSet),\n/* harmony export */   \"RewardAddress\": () => (/* binding */ RewardAddress),\n/* harmony export */   \"RewardAddresses\": () => (/* binding */ RewardAddresses),\n/* harmony export */   \"Script\": () => (/* binding */ Script),\n/* harmony export */   \"ScriptAll\": () => (/* binding */ ScriptAll),\n/* harmony export */   \"ScriptAny\": () => (/* binding */ ScriptAny),\n/* harmony export */   \"ScriptDataHash\": () => (/* binding */ ScriptDataHash),\n/* harmony export */   \"ScriptHash\": () => (/* binding */ ScriptHash),\n/* harmony export */   \"ScriptHashNamespace\": () => (/* binding */ ScriptHashNamespace),\n/* harmony export */   \"ScriptHashes\": () => (/* binding */ ScriptHashes),\n/* harmony export */   \"ScriptKind\": () => (/* binding */ ScriptKind),\n/* harmony export */   \"ScriptNOfK\": () => (/* binding */ ScriptNOfK),\n/* harmony export */   \"ScriptPubkey\": () => (/* binding */ ScriptPubkey),\n/* harmony export */   \"ScriptRef\": () => (/* binding */ ScriptRef),\n/* harmony export */   \"ScriptSchema\": () => (/* binding */ ScriptSchema),\n/* harmony export */   \"ScriptWitness\": () => (/* binding */ ScriptWitness),\n/* harmony export */   \"ScriptWitnessKind\": () => (/* binding */ ScriptWitnessKind),\n/* harmony export */   \"SingleHostAddr\": () => (/* binding */ SingleHostAddr),\n/* harmony export */   \"SingleHostName\": () => (/* binding */ SingleHostName),\n/* harmony export */   \"StakeCredKind\": () => (/* binding */ StakeCredKind),\n/* harmony export */   \"StakeCredential\": () => (/* binding */ StakeCredential),\n/* harmony export */   \"StakeCredentials\": () => (/* binding */ StakeCredentials),\n/* harmony export */   \"StakeDelegation\": () => (/* binding */ StakeDelegation),\n/* harmony export */   \"StakeDeregistration\": () => (/* binding */ StakeDeregistration),\n/* harmony export */   \"StakeRegistration\": () => (/* binding */ StakeRegistration),\n/* harmony export */   \"Strings\": () => (/* binding */ Strings),\n/* harmony export */   \"TimelockExpiry\": () => (/* binding */ TimelockExpiry),\n/* harmony export */   \"TimelockStart\": () => (/* binding */ TimelockStart),\n/* harmony export */   \"Transaction\": () => (/* binding */ Transaction),\n/* harmony export */   \"TransactionBodies\": () => (/* binding */ TransactionBodies),\n/* harmony export */   \"TransactionBody\": () => (/* binding */ TransactionBody),\n/* harmony export */   \"TransactionBuilder\": () => (/* binding */ TransactionBuilder),\n/* harmony export */   \"TransactionBuilderConfig\": () => (/* binding */ TransactionBuilderConfig),\n/* harmony export */   \"TransactionBuilderConfigBuilder\": () => (/* binding */ TransactionBuilderConfigBuilder),\n/* harmony export */   \"TransactionHash\": () => (/* binding */ TransactionHash),\n/* harmony export */   \"TransactionIndexes\": () => (/* binding */ TransactionIndexes),\n/* harmony export */   \"TransactionInput\": () => (/* binding */ TransactionInput),\n/* harmony export */   \"TransactionInputs\": () => (/* binding */ TransactionInputs),\n/* harmony export */   \"TransactionMetadatum\": () => (/* binding */ TransactionMetadatum),\n/* harmony export */   \"TransactionMetadatumKind\": () => (/* binding */ TransactionMetadatumKind),\n/* harmony export */   \"TransactionMetadatumLabels\": () => (/* binding */ TransactionMetadatumLabels),\n/* harmony export */   \"TransactionOutput\": () => (/* binding */ TransactionOutput),\n/* harmony export */   \"TransactionOutputAmountBuilder\": () => (/* binding */ TransactionOutputAmountBuilder),\n/* harmony export */   \"TransactionOutputBuilder\": () => (/* binding */ TransactionOutputBuilder),\n/* harmony export */   \"TransactionOutputs\": () => (/* binding */ TransactionOutputs),\n/* harmony export */   \"TransactionUnspentOutput\": () => (/* binding */ TransactionUnspentOutput),\n/* harmony export */   \"TransactionUnspentOutputs\": () => (/* binding */ TransactionUnspentOutputs),\n/* harmony export */   \"TransactionWitnessSet\": () => (/* binding */ TransactionWitnessSet),\n/* harmony export */   \"TransactionWitnessSetBuilder\": () => (/* binding */ TransactionWitnessSetBuilder),\n/* harmony export */   \"TransactionWitnessSets\": () => (/* binding */ TransactionWitnessSets),\n/* harmony export */   \"UnitInterval\": () => (/* binding */ UnitInterval),\n/* harmony export */   \"Update\": () => (/* binding */ Update),\n/* harmony export */   \"Url\": () => (/* binding */ Url),\n/* harmony export */   \"VRFCert\": () => (/* binding */ VRFCert),\n/* harmony export */   \"VRFKeyHash\": () => (/* binding */ VRFKeyHash),\n/* harmony export */   \"VRFVKey\": () => (/* binding */ VRFVKey),\n/* harmony export */   \"Value\": () => (/* binding */ Value),\n/* harmony export */   \"Vkey\": () => (/* binding */ Vkey),\n/* harmony export */   \"Vkeys\": () => (/* binding */ Vkeys),\n/* harmony export */   \"Vkeywitness\": () => (/* binding */ Vkeywitness),\n/* harmony export */   \"Vkeywitnesses\": () => (/* binding */ Vkeywitnesses),\n/* harmony export */   \"Withdrawals\": () => (/* binding */ Withdrawals),\n/* harmony export */   \"apply_params_to_plutus_script\": () => (/* binding */ apply_params_to_plutus_script),\n/* harmony export */   \"decode_arbitrary_bytes_from_metadatum\": () => (/* binding */ decode_arbitrary_bytes_from_metadatum),\n/* harmony export */   \"decode_metadatum_to_json_str\": () => (/* binding */ decode_metadatum_to_json_str),\n/* harmony export */   \"decode_plutus_datum_to_json_str\": () => (/* binding */ decode_plutus_datum_to_json_str),\n/* harmony export */   \"decrypt_with_password\": () => (/* binding */ decrypt_with_password),\n/* harmony export */   \"encode_arbitrary_bytes_as_metadatum\": () => (/* binding */ encode_arbitrary_bytes_as_metadatum),\n/* harmony export */   \"encode_json_str_to_metadatum\": () => (/* binding */ encode_json_str_to_metadatum),\n/* harmony export */   \"encode_json_str_to_native_script\": () => (/* binding */ encode_json_str_to_native_script),\n/* harmony export */   \"encode_json_str_to_plutus_datum\": () => (/* binding */ encode_json_str_to_plutus_datum),\n/* harmony export */   \"encrypt_with_password\": () => (/* binding */ encrypt_with_password),\n/* harmony export */   \"get_deposit\": () => (/* binding */ get_deposit),\n/* harmony export */   \"get_implicit_input\": () => (/* binding */ get_implicit_input),\n/* harmony export */   \"hash_auxiliary_data\": () => (/* binding */ hash_auxiliary_data),\n/* harmony export */   \"hash_blake2b224\": () => (/* binding */ hash_blake2b224),\n/* harmony export */   \"hash_blake2b256\": () => (/* binding */ hash_blake2b256),\n/* harmony export */   \"hash_plutus_data\": () => (/* binding */ hash_plutus_data),\n/* harmony export */   \"hash_script_data\": () => (/* binding */ hash_script_data),\n/* harmony export */   \"hash_transaction\": () => (/* binding */ hash_transaction),\n/* harmony export */   \"instantiate\": () => (/* binding */ instantiate),\n/* harmony export */   \"instantiateWithInstance\": () => (/* binding */ instantiateWithInstance),\n/* harmony export */   \"isInstantiated\": () => (/* binding */ isInstantiated),\n/* harmony export */   \"make_daedalus_bootstrap_witness\": () => (/* binding */ make_daedalus_bootstrap_witness),\n/* harmony export */   \"make_icarus_bootstrap_witness\": () => (/* binding */ make_icarus_bootstrap_witness),\n/* harmony export */   \"make_vkey_witness\": () => (/* binding */ make_vkey_witness),\n/* harmony export */   \"min_ada_required\": () => (/* binding */ min_ada_required),\n/* harmony export */   \"min_fee\": () => (/* binding */ min_fee)\n/* harmony export */ });\n// @generated file from wasmbuild -- do not edit\n// deno-lint-ignore-file\n// deno-fmt-ignore-file\n// source-hash: c7b921328acd83e1ca0f5c2cea438815d12716d7\nconst require = /* #__PURE__ */ globalThis?.process?.versions?.node\n    ? await (async () => {\n        const { createRequire } = await import(\n        /* webpackIgnore: true */ \"module\");\n        return createRequire(\"file:///home/alphonzoescolar/Documents/SAIB-PROJECTS/teddyswap/TeddySwap.Offchain/src/TeddySwap.UI/node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js\");\n    })()\n    : null;\nif (globalThis?.process?.versions?.node && typeof btoa === \"undefined\") {\n    globalThis.btoa = function (str) {\n        return Buffer.from(str, \"binary\").toString(\"base64\");\n    };\n    globalThis.atob = function (b64Encoded) {\n        return Buffer.from(b64Encoded, \"base64\").toString(\"binary\");\n    };\n}\nlet wasm;\nconst cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nlet heap_next = heap.length;\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction getObject(idx) {\n    return heap[idx];\n}\nfunction dropObject(idx) {\n    if (idx < 132)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet WASM_VECTOR_LEN = 0;\nconst cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nconst CLOSURE_DTORS = new FinalizationRegistry((state) => {\n    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n});\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        }\n        finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            }\n            else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_30(arg0, arg1, arg2) {\n    wasm\n        ._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__had8868bf22870955(arg0, arg1, addHeapObject(arg2));\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n * @param {string} password\n * @param {string} salt\n * @param {string} nonce\n * @param {string} data\n * @returns {string}\n */\nfunction encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0;\n            len4 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr4, len4);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr4, len4);\n    }\n}\n/**\n * @param {string} password\n * @param {string} data\n * @returns {string}\n */\nfunction decrypt_with_password(password, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0;\n            len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n/**\n * @param {Transaction} tx\n * @param {LinearFee} linear_fee\n * @param {ExUnitPrices} ex_unit_prices\n * @returns {BigNum}\n */\nfunction min_fee(tx, linear_fee, ex_unit_prices) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(tx, Transaction);\n        _assertClass(linear_fee, LinearFee);\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        wasm.min_fee(retptr, tx.ptr, linear_fee.ptr, ex_unit_prices.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {TransactionMetadatum}\n */\nfunction encode_arbitrary_bytes_as_metadatum(bytes) {\n    const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n/**\n * @param {TransactionMetadatum} metadata\n * @returns {Uint8Array}\n */\nfunction decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {TransactionMetadatum}\n */\nfunction encode_json_str_to_metadatum(json, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encode_json_str_to_metadatum(retptr, ptr0, len0, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return TransactionMetadatum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionMetadatum} metadatum\n * @param {number} schema\n * @returns {string}\n */\nfunction decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr0 = r0;\n        var len0 = r1;\n        if (r3) {\n            ptr0 = 0;\n            len0 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr0, len0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr0, len0);\n    }\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {PlutusData}\n */\nfunction encode_json_str_to_plutus_datum(json, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encode_json_str_to_plutus_datum(retptr, ptr0, len0, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return PlutusData.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {PlutusData} datum\n * @param {number} schema\n * @returns {string}\n */\nfunction decode_plutus_datum_to_json_str(datum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(datum, PlutusData);\n        wasm.decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr0 = r0;\n        var len0 = r1;\n        if (r3) {\n            ptr0 = 0;\n            len0 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr0, len0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr0, len0);\n    }\n}\nlet cachedUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {LegacyDaedalusPrivateKey} key\n * @returns {BootstrapWitness}\n */\nfunction make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    const ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {Bip32PrivateKey} key\n * @returns {BootstrapWitness}\n */\nfunction make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    const ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {PrivateKey} sk\n * @returns {Vkeywitness}\n */\nfunction make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    const ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n/**\n * @param {AuxiliaryData} auxiliary_data\n * @returns {AuxiliaryDataHash}\n */\nfunction hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    const ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} tx_body\n * @returns {TransactionHash}\n */\nfunction hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    const ret = wasm.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n/**\n * @param {PlutusData} plutus_data\n * @returns {DataHash}\n */\nfunction hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    const ret = wasm.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction hash_blake2b256(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b256(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction hash_blake2b224(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b224(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Redeemers} redeemers\n * @param {Costmdls} cost_models\n * @param {PlutusList | undefined} datums\n * @returns {ScriptDataHash}\n */\nfunction hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.__destroy_into_raw();\n    }\n    const ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {Value}\n */\nfunction get_implicit_input(txbody, pool_deposit, key_deposit) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(txbody, TransactionBody);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        wasm.get_implicit_input(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Value.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {BigNum}\n */\nfunction get_deposit(txbody, pool_deposit, key_deposit) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(txbody, TransactionBody);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        wasm.get_deposit(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionOutput} output\n * @param {BigNum} coins_per_utxo_byte\n * @returns {BigNum}\n */\nfunction min_ada_required(output, coins_per_utxo_byte) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(output, TransactionOutput);\n        _assertClass(coins_per_utxo_byte, BigNum);\n        wasm.min_ada_required(retptr, output.ptr, coins_per_utxo_byte.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * Receives a script JSON string\n * and returns a NativeScript.\n * Cardano Wallet and Node styles are supported.\n *\n * * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml\n * * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n *\n * self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes\n * @param {string} json\n * @param {string} self_xpub\n * @param {number} schema\n * @returns {NativeScript}\n */\nfunction encode_json_str_to_native_script(json, self_xpub, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(self_xpub, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.encode_json_str_to_native_script(retptr, ptr0, len0, ptr1, len1, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NativeScript.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {PlutusList} params\n * @param {PlutusScript} plutus_script\n * @returns {PlutusScript}\n */\nfunction apply_params_to_plutus_script(params, plutus_script) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(params, PlutusList);\n        _assertClass(plutus_script, PlutusScript);\n        var ptr0 = plutus_script.__destroy_into_raw();\n        wasm.apply_params_to_plutus_script(retptr, params.ptr, ptr0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return PlutusScript.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    }\n    catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_1371(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hce44a91c7a197280(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n/** */\nconst StakeCredKind = Object.freeze({\n    Key: 0,\n    \"0\": \"Key\",\n    Script: 1,\n    \"1\": \"Script\",\n});\n/** */\nconst TransactionMetadatumKind = Object.freeze({\n    MetadataMap: 0,\n    \"0\": \"MetadataMap\",\n    MetadataList: 1,\n    \"1\": \"MetadataList\",\n    Int: 2,\n    \"2\": \"Int\",\n    Bytes: 3,\n    \"3\": \"Bytes\",\n    Text: 4,\n    \"4\": \"Text\",\n});\n/** */\nconst MetadataJsonSchema = Object.freeze({\n    NoConversions: 0,\n    \"0\": \"NoConversions\",\n    BasicConversions: 1,\n    \"1\": \"BasicConversions\",\n    DetailedSchema: 2,\n    \"2\": \"DetailedSchema\",\n});\n/** */\nconst LanguageKind = Object.freeze({\n    PlutusV1: 0,\n    \"0\": \"PlutusV1\",\n    PlutusV2: 1,\n    \"1\": \"PlutusV2\",\n});\n/** */\nconst PlutusDataKind = Object.freeze({\n    ConstrPlutusData: 0,\n    \"0\": \"ConstrPlutusData\",\n    Map: 1,\n    \"1\": \"Map\",\n    List: 2,\n    \"2\": \"List\",\n    Integer: 3,\n    \"3\": \"Integer\",\n    Bytes: 4,\n    \"4\": \"Bytes\",\n});\n/** */\nconst RedeemerTagKind = Object.freeze({\n    Spend: 0,\n    \"0\": \"Spend\",\n    Mint: 1,\n    \"1\": \"Mint\",\n    Cert: 2,\n    \"2\": \"Cert\",\n    Reward: 3,\n    \"3\": \"Reward\",\n});\n/**\n * JSON <-> PlutusData conversion schemas.\n * Follows ScriptDataJsonSchema in cardano-cli defined at:\n * https://github.com/input-output-hk/cardano-node/blob/master/cardano-api/src/Cardano/Api/ScriptData.hs#L254\n *\n * All methods here have the following restrictions due to limitations on dependencies:\n * * JSON numbers above u64::MAX (positive) or below i64::MIN (negative) will throw errors\n * * Hex strings for bytes don't accept odd-length (half-byte) strings.\n *      cardano-cli seems to support these however but it seems to be different than just 0-padding\n *      on either side when tested so proceed with caution\n */\nconst PlutusDatumSchema = Object.freeze({\n    /**\n     * ScriptDataJsonNoSchema in cardano-node.\n     *\n     * This is the format used by --script-data-value in cardano-cli\n     * This tries to accept most JSON but does not support the full spectrum of Plutus datums.\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.\n     * To JSON:\n     * * ConstrPlutusData not supported in ANY FORM (neither keys nor values)\n     * * Lists not supported in keys\n     * * Maps not supported in keys\n     */\n    BasicConversions: 0,\n    \"0\": \"BasicConversions\",\n    /**\n     * ScriptDataJsonDetailedSchema in cardano-node.\n     *\n     * This is the format used by --script-data-file in cardano-cli\n     * This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.\n     * The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:\n     * 1. For ConstrPlutusData there must be two fields \"constructor\" contianing a number and \"fields\" containing its fields\n     *    e.g. { \"constructor\": 2, \"fields\": [{\"int\": 2}, {\"list\": [{\"bytes\": \"CAFEF00D\"}]}]}\n     * 2. For all other cases there must be only one field named \"int\", \"bytes\", \"list\" or \"map\"\n     *    Integer's value is a JSON number e.g. {\"int\": 100}\n     *    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {\"bytes\": \"CAFEF00D\"}\n     *    Lists' value is a JSON list of its elements encoded via the same schema e.g. {\"list\": [{\"bytes\": \"CAFEF00D\"}]}\n     *    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys \"k\" and \"v\"\n     *          respectively with their values being the plutus datum encoded via this same schema\n     *          e.g. {\"map\": [\n     *              {\"k\": {\"int\": 2}, \"v\": {\"int\": 5}},\n     *              {\"k\": {\"map\": [{\"k\": {\"list\": [{\"int\": 1}]}, \"v\": {\"bytes\": \"FF03\"}}]}, \"v\": {\"list\": []}}\n     *          ]}\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * the JSON must conform to a very specific schema\n     * To JSON:\n     * * all Plutus datums should be fully supported outside of the integer range limitations outlined above.\n     */\n    DetailedSchema: 1,\n    \"1\": \"DetailedSchema\",\n});\n/** */\nconst ScriptKind = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusScriptV1: 1,\n    \"1\": \"PlutusScriptV1\",\n    PlutusScriptV2: 2,\n    \"2\": \"PlutusScriptV2\",\n});\n/** */\nconst DatumKind = Object.freeze({\n    Hash: 0,\n    \"0\": \"Hash\",\n    Data: 1,\n    \"1\": \"Data\",\n});\n/**\n * Each new language uses a different namespace for hashing its script\n * This is because you could have a language where the same bytes have different semantics\n * So this avoids scripts in different languages mapping to the same hash\n * Note that the enum value here is different than the enum value for deciding the cost model of a script\n * https://github.com/input-output-hk/cardano-ledger/blob/9c3b4737b13b30f71529e76c5330f403165e28a6/eras/alonzo/impl/src/Cardano/Ledger/Alonzo.hs#L127\n */\nconst ScriptHashNamespace = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusV1: 1,\n    \"1\": \"PlutusV1\",\n    PlutusV2: 2,\n    \"2\": \"PlutusV2\",\n});\n/**\n * Used to choose the schema for a script JSON string\n */\nconst ScriptSchema = Object.freeze({\n    Wallet: 0,\n    \"0\": \"Wallet\",\n    Node: 1,\n    \"1\": \"Node\",\n});\n/** */\nconst ScriptWitnessKind = Object.freeze({\n    NativeWitness: 0,\n    \"0\": \"NativeWitness\",\n    PlutusWitness: 1,\n    \"1\": \"PlutusWitness\",\n});\n/** */\nconst CertificateKind = Object.freeze({\n    StakeRegistration: 0,\n    \"0\": \"StakeRegistration\",\n    StakeDeregistration: 1,\n    \"1\": \"StakeDeregistration\",\n    StakeDelegation: 2,\n    \"2\": \"StakeDelegation\",\n    PoolRegistration: 3,\n    \"3\": \"PoolRegistration\",\n    PoolRetirement: 4,\n    \"4\": \"PoolRetirement\",\n    GenesisKeyDelegation: 5,\n    \"5\": \"GenesisKeyDelegation\",\n    MoveInstantaneousRewardsCert: 6,\n    \"6\": \"MoveInstantaneousRewardsCert\",\n});\n/** */\nconst MIRPot = Object.freeze({\n    Reserves: 0,\n    \"0\": \"Reserves\",\n    Treasury: 1,\n    \"1\": \"Treasury\",\n});\n/** */\nconst MIRKind = Object.freeze({\n    ToOtherPot: 0,\n    \"0\": \"ToOtherPot\",\n    ToStakeCredentials: 1,\n    \"1\": \"ToStakeCredentials\",\n});\n/** */\nconst RelayKind = Object.freeze({\n    SingleHostAddr: 0,\n    \"0\": \"SingleHostAddr\",\n    SingleHostName: 1,\n    \"1\": \"SingleHostName\",\n    MultiHostName: 2,\n    \"2\": \"MultiHostName\",\n});\n/** */\nconst NativeScriptKind = Object.freeze({\n    ScriptPubkey: 0,\n    \"0\": \"ScriptPubkey\",\n    ScriptAll: 1,\n    \"1\": \"ScriptAll\",\n    ScriptAny: 2,\n    \"2\": \"ScriptAny\",\n    ScriptNOfK: 3,\n    \"3\": \"ScriptNOfK\",\n    TimelockStart: 4,\n    \"4\": \"TimelockStart\",\n    TimelockExpiry: 5,\n    \"5\": \"TimelockExpiry\",\n});\n/** */\nconst NetworkIdKind = Object.freeze({\n    Testnet: 0,\n    \"0\": \"Testnet\",\n    Mainnet: 1,\n    \"1\": \"Mainnet\",\n});\nconst AddressFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_address_free(ptr));\n/** */\nclass Address {\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n        AddressFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Address}\n     */\n    static from_bytes(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Address}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | undefined} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix)\n                ? 0\n                : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Address}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_network_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ByronAddress | undefined}\n     */\n    as_byron() {\n        const ret = wasm.address_as_byron(this.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress | undefined}\n     */\n    as_reward() {\n        const ret = wasm.address_as_reward(this.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {PointerAddress | undefined}\n     */\n    as_pointer() {\n        const ret = wasm.address_as_pointer(this.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {EnterpriseAddress | undefined}\n     */\n    as_enterprise() {\n        const ret = wasm.address_as_enterprise(this.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {BaseAddress | undefined}\n     */\n    as_base() {\n        const ret = wasm.address_as_base(this.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\nconst AssetNameFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_assetname_free(ptr));\n/** */\nclass AssetName {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n        AssetNameFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AssetNameFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetName}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetName}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} name\n     * @returns {AssetName}\n     */\n    static new(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetname_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst AssetNamesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_assetnames_free(ptr));\n/** */\nclass AssetNames {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n        AssetNamesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AssetNamesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetNames}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetnames_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetNames}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetnames_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {AssetName}\n     */\n    get(index) {\n        const ret = wasm.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} elem\n     */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\nconst AssetsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_assets_free(ptr));\n/** */\nclass Assets {\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n        AssetsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AssetsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Assets}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assets_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Assets}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assets_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Assets}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        const ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        const ret = wasm.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        const ret = wasm.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\nconst AuxiliaryDataFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_auxiliarydata_free(ptr));\n/** */\nclass AuxiliaryData {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n        AuxiliaryDataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AuxiliaryDataFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryData}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {AuxiliaryData}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AuxiliaryData}\n     */\n    static new() {\n        const ret = wasm.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {GeneralTransactionMetadata | undefined}\n     */\n    metadata() {\n        const ret = wasm.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        const ret = wasm.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        const ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n}\nconst AuxiliaryDataHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_auxiliarydatahash_free(ptr));\n/** */\nclass AuxiliaryDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n        AuxiliaryDataHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AuxiliaryDataHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst AuxiliaryDataSetFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_auxiliarydataset_free(ptr));\n/** */\nclass AuxiliaryDataSet {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n        AuxiliaryDataSetFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AuxiliaryDataSetFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @param {AuxiliaryData} data\n     * @returns {AuxiliaryData | undefined}\n     */\n    insert(tx_index, data) {\n        _assertClass(tx_index, BigNum);\n        _assertClass(data, AuxiliaryData);\n        const ret = wasm.auxiliarydataset_insert(this.ptr, tx_index.ptr, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @returns {AuxiliaryData | undefined}\n     */\n    get(tx_index) {\n        _assertClass(tx_index, BigNum);\n        const ret = wasm.auxiliarydataset_get(this.ptr, tx_index.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    indices() {\n        const ret = wasm.auxiliarydataset_indices(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n}\nconst BaseAddressFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_baseaddress_free(ptr));\n/** */\nclass BaseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n        BaseAddressFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BaseAddressFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {StakeCredential} stake\n     * @returns {BaseAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        const ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_cred() {\n        const ret = wasm.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {BaseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_base(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\nconst BigIntFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bigint_free(ptr));\n/** */\nclass BigInt {\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n        BigIntFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BigIntFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bigint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigInt}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bigint_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_u64() {\n        const ret = wasm.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        const ret = wasm.bigint_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {BigInt}\n     */\n    static from_str(text) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bigint_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nconst BigNumFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bignum_free(ptr));\n/** */\nclass BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        BigNumFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BigNumFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bignum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bignum_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    static zero() {\n        const ret = wasm.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        const ret = wasm.bignum_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_mul(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_add(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_sub(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_div(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div_ceil(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_div_ceil(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * returns 0 if it would otherwise underflow\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        const ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} rhs_value\n     * @returns {number}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        const ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\nconst Bip32PrivateKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bip32privatekey_free(ptr));\n/** */\nclass Bip32PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n        Bip32PrivateKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Bip32PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n     * derive this private key with the given index.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PrivateKey}\n     */\n    derive(index) {\n        const ret = wasm.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * 128-byte xprv a key format in Cardano that some software still uses or requires\n     * the traditional 96-byte xprv is simply encoded as\n     * prv | chaincode\n     * however, because some software may not know how to compute a public key from a private key,\n     * the 128-byte inlines the public key in the following format\n     * prv | pub | chaincode\n     * so be careful if you see the term \"xprv\" as it could refer to either one\n     * our library does not require the pub (instead we compute the pub key when needed)\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_128_xprv(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32privatekey_from_128_xprv(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * see from_128_xprv\n     * @returns {Uint8Array}\n     */\n    to_128_xprv() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Bip32PrivateKey}\n     */\n    static generate_ed25519_bip32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_generate_ed25519_bip32(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    to_raw_key() {\n        const ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Bip32PublicKey}\n     */\n    to_public() {\n        const ret = wasm.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32privatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32privatekey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {Uint8Array} entropy\n     * @param {Uint8Array} password\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bip39_entropy(entropy, password) {\n        const ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst Bip32PublicKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bip32publickey_free(ptr));\n/** */\nclass Bip32PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n        Bip32PublicKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Bip32PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n     * derive this public key with the given index.\n     *\n     * # Errors\n     *\n     * If the index is not a soft derivation index (< 0x80000000) then\n     * calling this method will fail.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PublicKey}\n     */\n    derive(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_derive(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_raw_key() {\n        const ret = wasm.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PublicKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32publickey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32publickey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst BlockFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_block_free(ptr));\n/** */\nclass Block {\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n        BlockFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BlockFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_block_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Block}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.block_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Block}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.block_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Header}\n     */\n    header() {\n        const ret = wasm.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    transaction_bodies() {\n        const ret = wasm.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    transaction_witness_sets() {\n        const ret = wasm.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    auxiliary_data_set() {\n        const ret = wasm.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    invalid_transactions() {\n        const ret = wasm.block_invalid_transactions(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @param {Header} header\n     * @param {TransactionBodies} transaction_bodies\n     * @param {TransactionWitnessSets} transaction_witness_sets\n     * @param {AuxiliaryDataSet} auxiliary_data_set\n     * @param {TransactionIndexes} invalid_transactions\n     * @returns {Block}\n     */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        _assertClass(invalid_transactions, TransactionIndexes);\n        const ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, invalid_transactions.ptr);\n        return Block.__wrap(ret);\n    }\n}\nconst BlockHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_blockhash_free(ptr));\n/** */\nclass BlockHash {\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n        BlockHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BlockHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BlockHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {BlockHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {BlockHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst BlockfrostFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_blockfrost_free(ptr));\n/** */\nclass Blockfrost {\n    static __wrap(ptr) {\n        const obj = Object.create(Blockfrost.prototype);\n        obj.ptr = ptr;\n        BlockfrostFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BlockfrostFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockfrost_free(ptr);\n    }\n    /**\n     * @param {string} url\n     * @param {string} project_id\n     * @returns {Blockfrost}\n     */\n    static new(url, project_id) {\n        const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(project_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.blockfrost_new(ptr0, len0, ptr1, len1);\n        return Blockfrost.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    project_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_project_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nconst BootstrapWitnessFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bootstrapwitness_free(ptr));\n/** */\nclass BootstrapWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n        BootstrapWitnessFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BootstrapWitnessFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BootstrapWitness}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bootstrapwitness_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {BootstrapWitness}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bootstrapwitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        const ret = wasm.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        const ret = wasm.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chain_code() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @param {Uint8Array} chain_code\n     * @param {Uint8Array} attributes\n     * @returns {BootstrapWitness}\n     */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        const ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\nconst BootstrapWitnessesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_bootstrapwitnesses_free(ptr));\n/** */\nclass BootstrapWitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n        BootstrapWitnessesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        BootstrapWitnessesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BootstrapWitness}\n     */\n    get(index) {\n        const ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\nconst ByronAddressFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_byronaddress_free(ptr));\n/** */\nclass ByronAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n        ByronAddressFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ByronAddressFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_base58() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ByronAddress}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.byronaddress_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ByronAddress.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n     * note: for bech32 addresses, you need to use network_id instead\n     * @returns {number}\n     */\n    byron_protocol_magic() {\n        const ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_network_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} s\n     * @returns {ByronAddress}\n     */\n    static from_base58(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.byronaddress_from_base58(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ByronAddress.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Bip32PublicKey} key\n     * @param {number} protocol_magic\n     * @returns {ByronAddress}\n     */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        const ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {boolean}\n     */\n    static is_valid(s) {\n        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {ByronAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_byron(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\nconst CertificateFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_certificate_free(ptr));\n/** */\nclass Certificate {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n        CertificateFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CertificateFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificate}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificate_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificate}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificate_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {StakeRegistration} stake_registration\n     * @returns {Certificate}\n     */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        const ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDeregistration} stake_deregistration\n     * @returns {Certificate}\n     */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        const ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDelegation} stake_delegation\n     * @returns {Certificate}\n     */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        const ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRegistration} pool_registration\n     * @returns {Certificate}\n     */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        const ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRetirement} pool_retirement\n     * @returns {Certificate}\n     */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        const ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisKeyDelegation} genesis_key_delegation\n     * @returns {Certificate}\n     */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        const ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n     * @returns {Certificate}\n     */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        const ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {StakeRegistration | undefined}\n     */\n    as_stake_registration() {\n        const ret = wasm.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDeregistration | undefined}\n     */\n    as_stake_deregistration() {\n        const ret = wasm.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDelegation | undefined}\n     */\n    as_stake_delegation() {\n        const ret = wasm.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRegistration | undefined}\n     */\n    as_pool_registration() {\n        const ret = wasm.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRetirement | undefined}\n     */\n    as_pool_retirement() {\n        const ret = wasm.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisKeyDelegation | undefined}\n     */\n    as_genesis_key_delegation() {\n        const ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {MoveInstantaneousRewardsCert | undefined}\n     */\n    as_move_instantaneous_rewards_cert() {\n        const ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\nconst CertificatesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_certificates_free(ptr));\n/** */\nclass Certificates {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n        CertificatesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CertificatesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificates}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificates_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificates}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificates_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Certificates}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Certificate}\n     */\n    get(index) {\n        const ret = wasm.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {Certificate} elem\n     */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        wasm.certificates_add(this.ptr, elem.ptr);\n    }\n}\nconst ConstrPlutusDataFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_constrplutusdata_free(ptr));\n/** */\nclass ConstrPlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n        ConstrPlutusDataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ConstrPlutusDataFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ConstrPlutusData}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.constrplutusdata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ConstrPlutusData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    alternative() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    data() {\n        const ret = wasm.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} alternative\n     * @param {PlutusList} data\n     * @returns {ConstrPlutusData}\n     */\n    static new(alternative, data) {\n        _assertClass(alternative, BigNum);\n        _assertClass(data, PlutusList);\n        const ret = wasm.constrplutusdata_new(alternative.ptr, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\nconst CostModelFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_costmodel_free(ptr));\n/** */\nclass CostModel {\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n        CostModelFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CostModelFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmodel_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CostModel}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.costmodel_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CostModel.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new() {\n        const ret = wasm.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new_plutus_v2() {\n        const ret = wasm.costmodel_new_plutus_v2();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @param {number} operation\n     * @param {Int} cost\n     * @returns {Int}\n     */\n    set(operation, cost) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(cost, Int);\n            wasm.costmodel_set(retptr, this.ptr, operation, cost.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} operation\n     * @returns {Int}\n     */\n    get(operation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_get(retptr, this.ptr, operation);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n}\nconst CostmdlsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_costmdls_free(ptr));\n/** */\nclass Costmdls {\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n        CostmdlsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CostmdlsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmdls_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Costmdls}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.costmdls_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Costmdls.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Costmdls}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Language} key\n     * @param {CostModel} value\n     * @returns {CostModel | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        const ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @param {Language} key\n     * @returns {CostModel | undefined}\n     */\n    get(key) {\n        _assertClass(key, Language);\n        const ret = wasm.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {Languages}\n     */\n    keys() {\n        const ret = wasm.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n}\nconst DNSRecordAorAAAAFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_dnsrecordaoraaaa_free(ptr));\n/** */\nclass DNSRecordAorAAAA {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n        DNSRecordAorAAAAFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DNSRecordAorAAAAFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordAorAAAA}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordaoraaaa_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordAorAAAA}\n     */\n    static new(dns_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordaoraaaa_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nconst DNSRecordSRVFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_dnsrecordsrv_free(ptr));\n/** */\nclass DNSRecordSRV {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n        DNSRecordSRVFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DNSRecordSRVFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordSRV}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordsrv_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordSRV}\n     */\n    static new(dns_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordsrv_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nconst DataFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_data_free(ptr));\n/** */\nclass Data {\n    static __wrap(ptr) {\n        const obj = Object.create(Data.prototype);\n        obj.ptr = ptr;\n        DataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DataFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_data_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Data}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.data_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Data.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Data}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.data_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Data.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PlutusData} plutus_data\n     * @returns {Data}\n     */\n    static new(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        const ret = wasm.data_new(plutus_data.ptr);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    get() {\n        const ret = wasm.data_get(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n}\nconst DataHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_datahash_free(ptr));\n/** */\nclass DataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n        DataHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DataHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {DataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {DataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst DatumFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_datum_free(ptr));\n/** */\nclass Datum {\n    static __wrap(ptr) {\n        const obj = Object.create(Datum.prototype);\n        obj.ptr = ptr;\n        DatumFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DatumFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Datum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Datum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Datum}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datum_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Datum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {DataHash} data_hash\n     * @returns {Datum}\n     */\n    static new_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        const ret = wasm.datum_new_data_hash(data_hash.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @param {Data} data\n     * @returns {Datum}\n     */\n    static new_data(data) {\n        _assertClass(data, Data);\n        const ret = wasm.datum_new_data(data.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.datum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {DataHash | undefined}\n     */\n    as_data_hash() {\n        const ret = wasm.datum_as_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Data | undefined}\n     */\n    as_data() {\n        const ret = wasm.datum_as_data(this.ptr);\n        return ret === 0 ? undefined : Data.__wrap(ret);\n    }\n}\nconst Ed25519KeyHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_ed25519keyhash_free(ptr));\n/** */\nclass Ed25519KeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n        Ed25519KeyHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Ed25519KeyHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {Ed25519KeyHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst Ed25519KeyHashesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_ed25519keyhashes_free(ptr));\n/** */\nclass Ed25519KeyHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n        Ed25519KeyHashesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Ed25519KeyHashesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Ed25519KeyHash}\n     */\n    get(index) {\n        const ret = wasm.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\nconst Ed25519SignatureFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_ed25519signature_free(ptr));\n/** */\nclass Ed25519Signature {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Ed25519Signature}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} input\n     * @returns {Ed25519Signature}\n     */\n    static from_hex(input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519Signature}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst EnterpriseAddressFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_enterpriseaddress_free(ptr));\n/** */\nclass EnterpriseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n        EnterpriseAddressFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        EnterpriseAddressFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {EnterpriseAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        const ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {EnterpriseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_enterprise(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\nconst ExUnitPricesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_exunitprices_free(ptr));\n/** */\nclass ExUnitPrices {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n        ExUnitPricesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ExUnitPricesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunitprices_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnitPrices}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.exunitprices_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnitPrices.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    mem_price() {\n        const ret = wasm.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    step_price() {\n        const ret = wasm.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} mem_price\n     * @param {UnitInterval} step_price\n     * @returns {ExUnitPrices}\n     */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        const ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {number} mem_price\n     * @param {number} step_price\n     * @returns {ExUnitPrices}\n     */\n    static from_float(mem_price, step_price) {\n        const ret = wasm.exunitprices_from_float(mem_price, step_price);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\nconst ExUnitsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_exunits_free(ptr));\n/** */\nclass ExUnits {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n        ExUnitsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ExUnitsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunits_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnits}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.exunits_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnits.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    mem() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    steps() {\n        const ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} mem\n     * @param {BigNum} steps\n     * @returns {ExUnits}\n     */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        const ret = wasm.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\nconst GeneralTransactionMetadataFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_generaltransactionmetadata_free(ptr));\n/** */\nclass GeneralTransactionMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n        GeneralTransactionMetadataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        GeneralTransactionMetadataFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.generaltransactionmetadata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.generaltransactionmetadata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {GeneralTransactionMetadata}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        const ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key\n     * @returns {TransactionMetadatum | undefined}\n     */\n    get(key) {\n        _assertClass(key, BigNum);\n        const ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    keys() {\n        const ret = wasm.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\nconst GenesisDelegateHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_genesisdelegatehash_free(ptr));\n/** */\nclass GenesisDelegateHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n        GenesisDelegateHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        GenesisDelegateHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisDelegateHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst GenesisHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_genesishash_free(ptr));\n/** */\nclass GenesisHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n        GenesisHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        GenesisHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst GenesisHashesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_genesishashes_free(ptr));\n/** */\nclass GenesisHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n        GenesisHashesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        GenesisHashesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHashes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisHashes}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {GenesisHash}\n     */\n    get(index) {\n        const ret = wasm.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\nconst GenesisKeyDelegationFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_genesiskeydelegation_free(ptr));\n/** */\nclass GenesisKeyDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n        GenesisKeyDelegationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        GenesisKeyDelegationFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesiskeydelegation_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesiskeydelegation_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {GenesisHash}\n     */\n    genesishash() {\n        const ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisDelegateHash}\n     */\n    genesis_delegate_hash() {\n        const ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        const ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} genesishash\n     * @param {GenesisDelegateHash} genesis_delegate_hash\n     * @param {VRFKeyHash} vrf_keyhash\n     * @returns {GenesisKeyDelegation}\n     */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        const ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\nconst HeaderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_header_free(ptr));\n/** */\nclass Header {\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n        HeaderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        HeaderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_header_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Header}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.header_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Header}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.header_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {HeaderBody}\n     */\n    header_body() {\n        const ret = wasm.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {KESSignature}\n     */\n    body_signature() {\n        const ret = wasm.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n     * @param {HeaderBody} header_body\n     * @param {KESSignature} body_signature\n     * @returns {Header}\n     */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        const ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\nconst HeaderBodyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_headerbody_free(ptr));\n/** */\nclass HeaderBody {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n        HeaderBodyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        HeaderBodyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderBody}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.headerbody_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {HeaderBody}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.headerbody_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    block_number() {\n        const ret = wasm.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BlockHash | undefined}\n     */\n    prev_hash() {\n        const ret = wasm.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    issuer_vkey() {\n        const ret = wasm.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFVKey}\n     */\n    vrf_vkey() {\n        const ret = wasm.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    nonce_vrf() {\n        const ret = wasm.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    leader_vrf() {\n        const ret = wasm.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    block_body_size() {\n        const ret = wasm.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BlockHash}\n     */\n    block_body_hash() {\n        const ret = wasm.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {OperationalCert}\n     */\n    operational_cert() {\n        const ret = wasm.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {ProtocolVersion}\n     */\n    protocol_version() {\n        const ret = wasm.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {number} block_number\n     * @param {BigNum} slot\n     * @param {BlockHash | undefined} prev_hash\n     * @param {Vkey} issuer_vkey\n     * @param {VRFVKey} vrf_vkey\n     * @param {VRFCert} nonce_vrf\n     * @param {VRFCert} leader_vrf\n     * @param {number} block_body_size\n     * @param {BlockHash} block_body_hash\n     * @param {OperationalCert} operational_cert\n     * @param {ProtocolVersion} protocol_version\n     * @returns {HeaderBody}\n     */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        _assertClass(slot, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.__destroy_into_raw();\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        const ret = wasm.headerbody_new(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\nconst IntFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_int_free(ptr));\n/** */\nclass Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        IntFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        IntFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Int}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.int_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        const ret = wasm.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        const ret = wasm.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        const ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        const ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the BigNum representation\n     * only in case the underlying i128 value is positive.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        const ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the *absolute* BigNum representation\n     * only in case the underlying i128 value is negative.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        const ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * !!! DEPRECATED !!!\n     * Returns an i32 value in case the underlying original i128 value is within the limits.\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32_or_nothing() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * JsError in case of out of boundary overflow\n     * @returns {number}\n     */\n    as_i32_or_fail() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32_or_fail(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns string representation of the underlying i128 value directly.\n     * Might contain the minus sign (-) in case of negative value.\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {Int}\n     */\n    static from_str(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.int_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst Ipv4Finalization = new FinalizationRegistry((ptr) => wasm.__wbg_ipv4_free(ptr));\n/** */\nclass Ipv4 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n        Ipv4Finalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Ipv4Finalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv4}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv4_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv4}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv4_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv4}\n     */\n    static new(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv4_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst Ipv6Finalization = new FinalizationRegistry((ptr) => wasm.__wbg_ipv6_free(ptr));\n/** */\nclass Ipv6 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n        Ipv6Finalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Ipv6Finalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv6}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv6_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv6}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv6_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv6}\n     */\n    static new(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv6_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst KESSignatureFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_kessignature_free(ptr));\n/** */\nclass KESSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n        KESSignatureFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        KESSignatureFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESSignature}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kessignature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESSignature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst KESVKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_kesvkey_free(ptr));\n/** */\nclass KESVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n        KESVKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        KESVKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESVKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {KESVKey}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {KESVKey}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst LanguageFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_language_free(ptr));\n/** */\nclass Language {\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n        LanguageFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        LanguageFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_language_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Language}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.language_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Language.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v1() {\n        const ret = wasm.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v2() {\n        const ret = wasm.language_new_plutus_v2();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\nconst LanguagesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_languages_free(ptr));\n/** */\nclass Languages {\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n        LanguagesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        LanguagesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languages_free(ptr);\n    }\n    /**\n     * @returns {Languages}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Language}\n     */\n    get(index) {\n        const ret = wasm.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n     * @param {Language} elem\n     */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.__destroy_into_raw();\n        wasm.languages_add(this.ptr, ptr0);\n    }\n}\nconst LegacyDaedalusPrivateKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_legacydaedalusprivatekey_free(ptr));\n/** */\nclass LegacyDaedalusPrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n        LegacyDaedalusPrivateKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        LegacyDaedalusPrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {LegacyDaedalusPrivateKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.legacydaedalusprivatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LegacyDaedalusPrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst LinearFeeFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_linearfee_free(ptr));\n/** */\nclass LinearFee {\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n        LinearFeeFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        LinearFeeFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    constant() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coefficient() {\n        const ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coefficient\n     * @param {BigNum} constant\n     * @returns {LinearFee}\n     */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        const ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\nconst MIRToStakeCredentialsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_mirtostakecredentials_free(ptr));\n/** */\nclass MIRToStakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n        MIRToStakeCredentialsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MIRToStakeCredentialsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mirtostakecredentials_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mirtostakecredentials_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MIRToStakeCredentials}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @param {Int} delta\n     * @returns {Int | undefined}\n     */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        const ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @returns {Int | undefined}\n     */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        const ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    keys() {\n        const ret = wasm.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\nconst MetadataListFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_metadatalist_free(ptr));\n/** */\nclass MetadataList {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n        MetadataListFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MetadataListFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataList}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.metadatalist_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionMetadatum}\n     */\n    get(index) {\n        const ret = wasm.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\nconst MetadataMapFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_metadatamap_free(ptr));\n/** */\nclass MetadataMap {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n        MetadataMapFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MetadataMapFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataMap}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.metadatamap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        const ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_str(key, value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(value, TransactionMetadatum);\n            wasm.metadatamap_insert_str(retptr, this.ptr, ptr0, len0, value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        const ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {TransactionMetadatum}\n     */\n    get(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, TransactionMetadatum);\n            wasm.metadatamap_get(retptr, this.ptr, key.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} key\n     * @returns {TransactionMetadatum}\n     */\n    get_str(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.metadatamap_get_str(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} key\n     * @returns {TransactionMetadatum}\n     */\n    get_i32(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_get_i32(retptr, this.ptr, key);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {boolean}\n     */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        const ret = wasm.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    keys() {\n        const ret = wasm.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\nconst MintFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_mint_free(ptr));\n/** */\nclass Mint {\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n        MintFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MintFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Mint}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mint_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Mint}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mint_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Mint}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {Mint}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        const ret = wasm.mint_new_from_entry(key.ptr, value.ptr);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {MintAssets | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        const ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @returns {MintAssets | undefined}\n     */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        const ret = wasm.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        const ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only positive (minting) entries are present\n     * @returns {MultiAsset}\n     */\n    as_positive_multiasset() {\n        const ret = wasm.mint_as_positive_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only negative (burning) entries are present\n     * @returns {MultiAsset}\n     */\n    as_negative_multiasset() {\n        const ret = wasm.mint_as_negative_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\nconst MintAssetsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_mintassets_free(ptr));\n/** */\nclass MintAssets {\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n        MintAssetsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MintAssetsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n     * @returns {MintAssets}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {MintAssets}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm.mintassets_new_from_entry(key.ptr, ptr0);\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {Int | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {Int | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        const ret = wasm.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        const ret = wasm.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\nconst MoveInstantaneousRewardFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_moveinstantaneousreward_free(ptr));\n/** */\nclass MoveInstantaneousReward {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n        MoveInstantaneousRewardFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MoveInstantaneousRewardFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousreward_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousreward_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} pot\n     * @param {BigNum} amount\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        const ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {number} pot\n     * @param {MIRToStakeCredentials} amounts\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        const ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    pot() {\n        const ret = wasm.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_to_other_pot() {\n        const ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {MIRToStakeCredentials | undefined}\n     */\n    as_to_stake_creds() {\n        const ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\nconst MoveInstantaneousRewardsCertFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_moveinstantaneousrewardscert_free(ptr));\n/** */\nclass MoveInstantaneousRewardsCert {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n        MoveInstantaneousRewardsCertFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MoveInstantaneousRewardsCertFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousrewardscert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousrewardscert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MoveInstantaneousReward}\n     */\n    move_instantaneous_reward() {\n        const ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousReward} move_instantaneous_reward\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        const ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\nconst MultiAssetFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_multiasset_free(ptr));\n/** */\nclass MultiAsset {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n        MultiAssetFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MultiAssetFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiAsset}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multiasset_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiAsset}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multiasset_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MultiAsset}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * the number of unique policy IDs in the multiasset\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}\n     * @param {ScriptHash} policy_id\n     * @param {Assets} assets\n     * @returns {Assets | undefined}\n     */\n    insert(policy_id, assets) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(assets, Assets);\n        const ret = wasm.multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * all assets under {policy_id}, if any exist, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @returns {Assets | undefined}\n     */\n    get(policy_id) {\n        _assertClass(policy_id, ScriptHash);\n        const ret = wasm.multiasset_get(this.ptr, policy_id.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * sets the asset {asset_name} to {value} under policy {policy_id}\n     * returns the previous amount if it was set, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    set_asset(policy_id, asset_name, value) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        _assertClass(value, BigNum);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm.multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * returns the amount of asset {asset_name} under policy {policy_id}\n     * If such an asset does not exist, 0 is returned.\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @returns {BigNum}\n     */\n    get_asset(policy_id, asset_name) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        const ret = wasm.multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * returns all policy IDs used by assets in this multiasset\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        const ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * removes an asset from the list if the result is 0 or less\n     * does not modify this object, instead the result is returned\n     * @param {MultiAsset} rhs_ma\n     * @returns {MultiAsset}\n     */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        const ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\nconst MultiHostNameFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_multihostname_free(ptr));\n/** */\nclass MultiHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n        MultiHostNameFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MultiHostNameFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiHostName}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multihostname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiHostName}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multihostname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {DNSRecordSRV}\n     */\n    dns_name() {\n        const ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @param {DNSRecordSRV} dns_name\n     * @returns {MultiHostName}\n     */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        const ret = wasm.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\nconst NativeScriptFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_nativescript_free(ptr));\n/** */\nclass NativeScript {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n        NativeScriptFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        NativeScriptFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NativeScript}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nativescript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {NativeScript}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nativescript_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        const ret = wasm.nativescript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptPubkey} script_pubkey\n     * @returns {NativeScript}\n     */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        const ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAll} script_all\n     * @returns {NativeScript}\n     */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        const ret = wasm.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAny} script_any\n     * @returns {NativeScript}\n     */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        const ret = wasm.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptNOfK} script_n_of_k\n     * @returns {NativeScript}\n     */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        const ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockStart} timelock_start\n     * @returns {NativeScript}\n     */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        const ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockExpiry} timelock_expiry\n     * @returns {NativeScript}\n     */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        const ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ScriptPubkey | undefined}\n     */\n    as_script_pubkey() {\n        const ret = wasm.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAll | undefined}\n     */\n    as_script_all() {\n        const ret = wasm.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAny | undefined}\n     */\n    as_script_any() {\n        const ret = wasm.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptNOfK | undefined}\n     */\n    as_script_n_of_k() {\n        const ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockStart | undefined}\n     */\n    as_timelock_start() {\n        const ret = wasm.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockExpiry | undefined}\n     */\n    as_timelock_expiry() {\n        const ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * Returns an array of unique Ed25519KeyHashes\n     * contained within this script recursively on any depth level.\n     * The order of the keys in the result is not determined in any way.\n     * @returns {Ed25519KeyHashes}\n     */\n    get_required_signers() {\n        const ret = wasm.nativescript_get_required_signers(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {BigNum | undefined} lower_bound\n     * @param {BigNum | undefined} upper_bound\n     * @param {Ed25519KeyHashes} key_hashes\n     * @returns {boolean}\n     */\n    verify(lower_bound, upper_bound, key_hashes) {\n        let ptr0 = 0;\n        if (!isLikeNone(lower_bound)) {\n            _assertClass(lower_bound, BigNum);\n            ptr0 = lower_bound.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(upper_bound)) {\n            _assertClass(upper_bound, BigNum);\n            ptr1 = upper_bound.__destroy_into_raw();\n        }\n        _assertClass(key_hashes, Ed25519KeyHashes);\n        const ret = wasm.nativescript_verify(this.ptr, ptr0, ptr1, key_hashes.ptr);\n        return ret !== 0;\n    }\n}\nconst NativeScriptsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_nativescripts_free(ptr));\n/** */\nclass NativeScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n        NativeScriptsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        NativeScriptsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {NativeScript}\n     */\n    get(index) {\n        const ret = wasm.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\nconst NetworkIdFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_networkid_free(ptr));\n/** */\nclass NetworkId {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n        NetworkIdFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        NetworkIdFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkid_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NetworkId}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.networkid_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {NetworkId}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.networkid_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static testnet() {\n        const ret = wasm.language_new_plutus_v1();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static mainnet() {\n        const ret = wasm.language_new_plutus_v2();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\nconst NetworkInfoFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_networkinfo_free(ptr));\n/** */\nclass NetworkInfo {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n        NetworkInfoFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        NetworkInfoFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n     * @param {number} network_id\n     * @param {number} protocol_magic\n     * @returns {NetworkInfo}\n     */\n    static new(network_id, protocol_magic) {\n        const ret = wasm.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        const ret = wasm.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    protocol_magic() {\n        const ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static testnet() {\n        const ret = wasm.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static mainnet() {\n        const ret = wasm.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\nconst NonceFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_nonce_free(ptr));\n/** */\nclass Nonce {\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n        NonceFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        NonceFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Nonce}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nonce_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Nonce}\n     */\n    static new_identity() {\n        const ret = wasm.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} hash\n     * @returns {Nonce}\n     */\n    static new_from_hash(hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nonce_new_from_hash(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get_hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst OperationalCertFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_operationalcert_free(ptr));\n/** */\nclass OperationalCert {\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n        OperationalCertFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        OperationalCertFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {OperationalCert}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.operationalcert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {OperationalCert}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.operationalcert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {KESVKey}\n     */\n    hot_vkey() {\n        const ret = wasm.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    sequence_number() {\n        const ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kes_period() {\n        const ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    sigma() {\n        const ret = wasm.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {KESVKey} hot_vkey\n     * @param {number} sequence_number\n     * @param {number} kes_period\n     * @param {Ed25519Signature} sigma\n     * @returns {OperationalCert}\n     */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        const ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\nconst PlutusDataFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_plutusdata_free(ptr));\n/** */\nclass PlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n        PlutusDataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PlutusDataFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusdata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ConstrPlutusData} constr_plutus_data\n     * @returns {PlutusData}\n     */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        const ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusMap} map\n     * @returns {PlutusData}\n     */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        const ret = wasm.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} list\n     * @returns {PlutusData}\n     */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        const ret = wasm.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {BigInt} integer\n     * @returns {PlutusData}\n     */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        const ret = wasm.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static new_bytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ConstrPlutusData | undefined}\n     */\n    as_constr_plutus_data() {\n        const ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusMap | undefined}\n     */\n    as_map() {\n        const ret = wasm.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    as_list() {\n        const ret = wasm.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {BigInt | undefined}\n     */\n    as_integer() {\n        const ret = wasm.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst PlutusListFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_plutuslist_free(ptr));\n/** */\nclass PlutusList {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n        PlutusListFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PlutusListFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuslist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusList}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutuslist_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusList.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    static new() {\n        const ret = wasm.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusData}\n     */\n    get(index) {\n        const ret = wasm.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        wasm.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\nconst PlutusMapFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_plutusmap_free(ptr));\n/** */\nclass PlutusMap {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n        PlutusMapFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PlutusMapFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusmap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusMap}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusmap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PlutusMap}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {PlutusData} key\n     * @param {PlutusData} value\n     * @returns {PlutusData | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        const ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} key\n     * @returns {PlutusData | undefined}\n     */\n    get(key) {\n        _assertClass(key, PlutusData);\n        const ret = wasm.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    keys() {\n        const ret = wasm.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\nconst PlutusScriptFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_plutusscript_free(ptr));\n/** */\nclass PlutusScript {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n        PlutusScriptFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PlutusScriptFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusscript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        const ret = wasm.plutusscript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n     *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n     *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static new(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     *     * The raw bytes of this compiled Plutus script.\n     *     * If you need \"cborBytes\" for cardano-cli use PlutusScript::to_bytes() instead.\n     *\n     * @returns {Uint8Array}\n     */\n    bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst PlutusScriptsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_plutusscripts_free(ptr));\n/** */\nclass PlutusScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n        PlutusScriptsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PlutusScriptsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScripts}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusscripts_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScripts.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PlutusScripts}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusScript}\n     */\n    get(index) {\n        const ret = wasm.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\nconst PlutusWitnessFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_plutuswitness_free(ptr));\n/** */\nclass PlutusWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusWitness.prototype);\n        obj.ptr = ptr;\n        PlutusWitnessFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PlutusWitnessFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuswitness_free(ptr);\n    }\n    /**\n     * Plutus V1 witness or witness where no script is attached and so version doesn't matter\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.__destroy_into_raw();\n        }\n        const ret = wasm.plutuswitness_new(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new_plutus_v2(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.__destroy_into_raw();\n        }\n        const ret = wasm.plutuswitness_new_plutus_v2(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData | undefined}\n     */\n    plutus_data() {\n        const ret = wasm.plutuswitness_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    redeemer() {\n        const ret = wasm.data_get(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    script() {\n        const ret = wasm.plutuswitness_script(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    version() {\n        const ret = wasm.plutuswitness_version(this.ptr);\n        return ret >>> 0;\n    }\n}\nconst PointerFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_pointer_free(ptr));\n/** */\nclass Pointer {\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n        PointerFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PointerFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n     * @param {BigNum} slot\n     * @param {BigNum} tx_index\n     * @param {BigNum} cert_index\n     * @returns {Pointer}\n     */\n    static new(slot, tx_index, cert_index) {\n        _assertClass(slot, BigNum);\n        _assertClass(tx_index, BigNum);\n        _assertClass(cert_index, BigNum);\n        const ret = wasm.pointer_new(slot.ptr, tx_index.ptr, cert_index.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tx_index() {\n        const ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cert_index() {\n        const ret = wasm.pointer_cert_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\nconst PointerAddressFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_pointeraddress_free(ptr));\n/** */\nclass PointerAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n        PointerAddressFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PointerAddressFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {Pointer} stake\n     * @returns {PointerAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        const ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Pointer}\n     */\n    stake_pointer() {\n        const ret = wasm.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {PointerAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_pointer(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\nconst PoolMetadataFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_poolmetadata_free(ptr));\n/** */\nclass PoolMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n        PoolMetadataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PoolMetadataFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadata}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolMetadata}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Url}\n     */\n    url() {\n        const ret = wasm.multihostname_dns_name(this.ptr);\n        return Url.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadataHash}\n     */\n    pool_metadata_hash() {\n        const ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @param {Url} url\n     * @param {PoolMetadataHash} pool_metadata_hash\n     * @returns {PoolMetadata}\n     */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, Url);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        const ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\nconst PoolMetadataHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_poolmetadatahash_free(ptr));\n/** */\nclass PoolMetadataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n        PoolMetadataHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PoolMetadataHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {PoolMetadataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {PoolMetadataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst PoolParamsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_poolparams_free(ptr));\n/** */\nclass PoolParams {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n        PoolParamsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PoolParamsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolParams}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolparams_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolParams}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolparams_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    operator() {\n        const ret = wasm.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        const ret = wasm.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    pledge() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cost() {\n        const ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    margin() {\n        const ret = wasm.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress}\n     */\n    reward_account() {\n        const ret = wasm.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    pool_owners() {\n        const ret = wasm.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {Relays}\n     */\n    relays() {\n        const ret = wasm.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadata | undefined}\n     */\n    pool_metadata() {\n        const ret = wasm.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} operator\n     * @param {VRFKeyHash} vrf_keyhash\n     * @param {BigNum} pledge\n     * @param {BigNum} cost\n     * @param {UnitInterval} margin\n     * @param {RewardAddress} reward_account\n     * @param {Ed25519KeyHashes} pool_owners\n     * @param {Relays} relays\n     * @param {PoolMetadata | undefined} pool_metadata\n     * @returns {PoolParams}\n     */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.__destroy_into_raw();\n        }\n        const ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\nconst PoolRegistrationFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_poolregistration_free(ptr));\n/** */\nclass PoolRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n        PoolRegistrationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PoolRegistrationFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRegistration}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolregistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRegistration}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolregistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PoolParams}\n     */\n    pool_params() {\n        const ret = wasm.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @param {PoolParams} pool_params\n     * @returns {PoolRegistration}\n     */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        const ret = wasm.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @param {boolean} update\n     */\n    set_is_update(update) {\n        wasm.poolregistration_set_is_update(this.ptr, update);\n    }\n}\nconst PoolRetirementFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_poolretirement_free(ptr));\n/** */\nclass PoolRetirement {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n        PoolRetirementFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PoolRetirementFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRetirement}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolretirement_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRetirement}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolretirement_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        const ret = wasm.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        const ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @param {number} epoch\n     * @returns {PoolRetirement}\n     */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        const ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\nconst PrivateKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_privatekey_free(ptr));\n/** */\nclass PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_public() {\n        const ret = wasm.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_generate_ed25519(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519extended() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_generate_ed25519extended(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Get private key from its bech32 representation\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);\n     * ```\n     * For an extended 25519 key\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_extended_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_extended_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_normal_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_normal_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Ed25519Signature}\n     */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst ProposedProtocolParameterUpdatesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_proposedprotocolparameterupdates_free(ptr));\n/** */\nclass ProposedProtocolParameterUpdates {\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n        ProposedProtocolParameterUpdatesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProposedProtocolParameterUpdatesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proposedprotocolparameterupdates_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proposedprotocolparameterupdates_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {GenesisHash} key\n     * @param {ProtocolParamUpdate} value\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        const ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} key\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        const ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    keys() {\n        const ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\nconst ProtocolParamUpdateFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_protocolparamupdate_free(ptr));\n/** */\nclass ProtocolParamUpdate {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n        ProtocolParamUpdateFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProtocolParamUpdateFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolparamupdate_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolparamupdate_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} minfee_a\n     */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_a() {\n        const ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} minfee_b\n     */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_b() {\n        const ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_block_body_size\n     */\n    set_max_block_body_size(max_block_body_size) {\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_body_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_tx_size\n     */\n    set_max_tx_size(max_tx_size) {\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_tx_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_block_header_size\n     */\n    set_max_block_header_size(max_block_header_size) {\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_header_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} key_deposit\n     */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    key_deposit() {\n        const ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    pool_deposit() {\n        const ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_epoch\n     */\n    set_max_epoch(max_epoch) {\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_epoch() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} n_opt\n     */\n    set_n_opt(n_opt) {\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    n_opt() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {UnitInterval} pool_pledge_influence\n     */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    pool_pledge_influence() {\n        const ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} expansion_rate\n     */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    expansion_rate() {\n        const ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} treasury_growth_rate\n     */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    treasury_growth_rate() {\n        const ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} d\n     */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    d() {\n        const ret = wasm.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {Nonce} extra_entropy\n     */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n     * @returns {Nonce | undefined}\n     */\n    extra_entropy() {\n        const ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n     * @param {ProtocolVersion} protocol_version\n     */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersion);\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n     * @returns {ProtocolVersion | undefined}\n     */\n    protocol_version() {\n        const ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} min_pool_cost\n     */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    min_pool_cost() {\n        const ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} ada_per_utxo_byte\n     */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ada_per_utxo_byte() {\n        const ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} cost_models\n     */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n     * @returns {Costmdls | undefined}\n     */\n    cost_models() {\n        const ret = wasm.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} execution_costs\n     */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n     * @returns {ExUnitPrices | undefined}\n     */\n    execution_costs() {\n        const ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_tx_ex_units() {\n        const ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_block_ex_units\n     */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_block_ex_units() {\n        const ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     */\n    set_max_value_size(max_value_size) {\n        wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_value_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} collateral_percentage\n     */\n    set_collateral_percentage(collateral_percentage) {\n        wasm.protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    collateral_percentage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_collateral_percentage(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     */\n    set_max_collateral_inputs(max_collateral_inputs) {\n        wasm.protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_collateral_inputs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_collateral_inputs(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProtocolParamUpdate}\n     */\n    static new() {\n        const ret = wasm.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\nconst ProtocolVersionFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_protocolversion_free(ptr));\n/** */\nclass ProtocolVersion {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n        ProtocolVersionFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProtocolVersionFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolVersion}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolversion_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolVersion}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolversion_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    major() {\n        const ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    minor() {\n        const ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} major\n     * @param {number} minor\n     * @returns {ProtocolVersion}\n     */\n    static new(major, minor) {\n        const ret = wasm.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\nconst PublicKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_publickey_free(ptr));\n/**\n * ED25519 key used as public key\n */\nclass PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n        PublicKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n     * Get public key from its bech32 representation\n     * Example:\n     * ```javascript\n     * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PublicKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} data\n     * @param {Ed25519Signature} signature\n     * @returns {boolean}\n     */\n    verify(data, signature) {\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    hash() {\n        const ret = wasm.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\nconst PublicKeysFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_publickeys_free(ptr));\n/** */\nclass PublicKeys {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n        PublicKeysFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PublicKeysFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickeys_free(ptr);\n    }\n    /** */\n    constructor() {\n        const ret = wasm.ed25519keyhashes_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    size() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PublicKey}\n     */\n    get(index) {\n        const ret = wasm.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} key\n     */\n    add(key) {\n        _assertClass(key, PublicKey);\n        wasm.publickeys_add(this.ptr, key.ptr);\n    }\n}\nconst RedeemerFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_redeemer_free(ptr));\n/** */\nclass Redeemer {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n        RedeemerFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RedeemerFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemer_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemer}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.redeemer_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemer.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        const ret = wasm.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    data() {\n        const ret = wasm.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {ExUnits}\n     */\n    ex_units() {\n        const ret = wasm.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @param {PlutusData} data\n     * @param {ExUnits} ex_units\n     * @returns {Redeemer}\n     */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        const ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\nconst RedeemerTagFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_redeemertag_free(ptr));\n/** */\nclass RedeemerTag {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n        RedeemerTagFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RedeemerTagFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemertag_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RedeemerTag}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.redeemertag_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RedeemerTag.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_spend() {\n        const ret = wasm.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_mint() {\n        const ret = wasm.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_cert() {\n        const ret = wasm.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_reward() {\n        const ret = wasm.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\nconst RedeemerWitnessKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_redeemerwitnesskey_free(ptr));\n/** */\nclass RedeemerWitnessKey {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerWitnessKey.prototype);\n        obj.ptr = ptr;\n        RedeemerWitnessKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RedeemerWitnessKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemerwitnesskey_free(ptr);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        const ret = wasm.redeemerwitnesskey_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @returns {RedeemerWitnessKey}\n     */\n    static new(tag, index) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        const ret = wasm.redeemerwitnesskey_new(tag.ptr, index.ptr);\n        return RedeemerWitnessKey.__wrap(ret);\n    }\n}\nconst RedeemersFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_redeemers_free(ptr));\n/** */\nclass Redeemers {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n        RedeemersFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RedeemersFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemers}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.redeemers_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemers.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Redeemers}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Redeemer}\n     */\n    get(index) {\n        const ret = wasm.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n     * @param {Redeemer} elem\n     */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        wasm.redeemers_add(this.ptr, elem.ptr);\n    }\n}\nconst RelayFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_relay_free(ptr));\n/** */\nclass Relay {\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n        RelayFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RelayFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relay_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relay}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relay_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Relay}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relay_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SingleHostAddr} single_host_addr\n     * @returns {Relay}\n     */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        const ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {SingleHostName} single_host_name\n     * @returns {Relay}\n     */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        const ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {MultiHostName} multi_host_name\n     * @returns {Relay}\n     */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        const ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {SingleHostAddr | undefined}\n     */\n    as_single_host_addr() {\n        const ret = wasm.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {SingleHostName | undefined}\n     */\n    as_single_host_name() {\n        const ret = wasm.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {MultiHostName | undefined}\n     */\n    as_multi_host_name() {\n        const ret = wasm.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\nconst RelaysFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_relays_free(ptr));\n/** */\nclass Relays {\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n        RelaysFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RelaysFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relays_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relays}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relays_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Relays}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relays_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Relays}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Relay}\n     */\n    get(index) {\n        const ret = wasm.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {Relay} elem\n     */\n    add(elem) {\n        _assertClass(elem, Relay);\n        wasm.relays_add(this.ptr, elem.ptr);\n    }\n}\nconst RequiredWitnessSetFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_requiredwitnessset_free(ptr));\n/** */\nclass RequiredWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(RequiredWitnessSet.prototype);\n        obj.ptr = ptr;\n        RequiredWitnessSetFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RequiredWitnessSetFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_requiredwitnessset_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.requiredwitnessset_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Vkey} vkey\n     */\n    add_vkey_key(vkey) {\n        _assertClass(vkey, Vkey);\n        wasm.requiredwitnessset_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_vkey_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_vkey_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.requiredwitnessset_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Vkey} bootstrap\n     */\n    add_bootstrap_key(bootstrap) {\n        _assertClass(bootstrap, Vkey);\n        wasm.requiredwitnessset_add_bootstrap_key(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_bootstrap_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_bootstrap_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.requiredwitnessset_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} native_script\n     */\n    add_native_script_hash(native_script) {\n        _assertClass(native_script, ScriptHash);\n        wasm.requiredwitnessset_add_native_script_hash(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} plutus_script\n     */\n    add_plutus_hash(plutus_script) {\n        _assertClass(plutus_script, ScriptHash);\n        wasm.requiredwitnessset_add_plutus_hash(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.requiredwitnessset_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {DataHash} plutus_datum\n     */\n    add_plutus_datum_hash(plutus_datum) {\n        _assertClass(plutus_datum, DataHash);\n        wasm.requiredwitnessset_add_plutus_datum_hash(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.requiredwitnessset_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RedeemerWitnessKey} redeemer\n     */\n    add_redeemer_tag(redeemer) {\n        _assertClass(redeemer, RedeemerWitnessKey);\n        wasm.requiredwitnessset_add_redeemer_tag(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} requirements\n     */\n    add_all(requirements) {\n        _assertClass(requirements, RequiredWitnessSet);\n        wasm.requiredwitnessset_add_all(this.ptr, requirements.ptr);\n    }\n    /**\n     * @returns {RequiredWitnessSet}\n     */\n    static new() {\n        const ret = wasm.requiredwitnessset_new();\n        return RequiredWitnessSet.__wrap(ret);\n    }\n}\nconst RewardAddressFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_rewardaddress_free(ptr));\n/** */\nclass RewardAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n        RewardAddressFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RewardAddressFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {RewardAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        const ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {RewardAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_reward(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\nconst RewardAddressesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_rewardaddresses_free(ptr));\n/** */\nclass RewardAddresses {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n        RewardAddressesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RewardAddressesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RewardAddresses}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardaddresses_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {RewardAddresses}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardaddresses_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {RewardAddress}\n     */\n    get(index) {\n        const ret = wasm.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} elem\n     */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\nconst ScriptFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_script_free(ptr));\n/** */\nclass Script {\n    static __wrap(ptr) {\n        const obj = Object.create(Script.prototype);\n        obj.ptr = ptr;\n        ScriptFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_script_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Script}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.script_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Script.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Script}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.script_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Script.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {Script}\n     */\n    static new_native(native_script) {\n        _assertClass(native_script, NativeScript);\n        const ret = wasm.script_new_native(native_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v1(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        const ret = wasm.script_new_plutus_v1(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v2(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        const ret = wasm.script_new_plutus_v2(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.script_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native() {\n        const ret = wasm.script_as_native(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v1() {\n        const ret = wasm.script_as_plutus_v1(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v2() {\n        const ret = wasm.script_as_plutus_v2(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n}\nconst ScriptAllFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptall_free(ptr));\n/** */\nclass ScriptAll {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n        ScriptAllFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptAllFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAll}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptall_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAll}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptall_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        const ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAll}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\nconst ScriptAnyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptany_free(ptr));\n/** */\nclass ScriptAny {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n        ScriptAnyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptAnyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAny}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptany_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAny}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptany_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        const ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAny}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\nconst ScriptDataHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptdatahash_free(ptr));\n/** */\nclass ScriptDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n        ScriptDataHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptDataHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptDataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptDataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptDataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst ScriptHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scripthash_free(ptr));\n/** */\nclass ScriptHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n        ScriptHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst ScriptHashesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scripthashes_free(ptr));\n/** */\nclass ScriptHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n        ScriptHashesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptHashesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHashes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptHashes}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {ScriptHash}\n     */\n    get(index) {\n        const ret = wasm.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\nconst ScriptNOfKFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptnofk_free(ptr));\n/** */\nclass ScriptNOfK {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n        ScriptNOfKFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptNOfKFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptNOfK}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptnofk_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptNOfK}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptnofk_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    n() {\n        const ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        const ret = wasm.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {number} n\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptNOfK}\n     */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\nconst ScriptPubkeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptpubkey_free(ptr));\n/** */\nclass ScriptPubkey {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n        ScriptPubkeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptPubkeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptPubkey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptpubkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptPubkey}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptpubkey_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    addr_keyhash() {\n        const ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} addr_keyhash\n     * @returns {ScriptPubkey}\n     */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        const ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\nconst ScriptRefFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptref_free(ptr));\n/** */\nclass ScriptRef {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptRef.prototype);\n        obj.ptr = ptr;\n        ScriptRefFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptRefFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptref_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptref_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptRef}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptref_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptRef}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptref_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Script} script\n     * @returns {ScriptRef}\n     */\n    static new(script) {\n        _assertClass(script, Script);\n        const ret = wasm.scriptref_new(script.ptr);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @returns {Script}\n     */\n    get() {\n        const ret = wasm.scriptref_get(this.ptr);\n        return Script.__wrap(ret);\n    }\n}\nconst ScriptWitnessFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_scriptwitness_free(ptr));\n/** */\nclass ScriptWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptWitness.prototype);\n        obj.ptr = ptr;\n        ScriptWitnessFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ScriptWitnessFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptwitness_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptwitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptWitness}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptwitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptWitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {ScriptWitness}\n     */\n    static new_native_witness(native_script) {\n        _assertClass(native_script, NativeScript);\n        const ret = wasm.scriptwitness_new_native_witness(native_script.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusWitness} plutus_witness\n     * @returns {ScriptWitness}\n     */\n    static new_plutus_witness(plutus_witness) {\n        _assertClass(plutus_witness, PlutusWitness);\n        const ret = wasm.scriptwitness_new_plutus_witness(plutus_witness.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.scriptwitness_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native_witness() {\n        const ret = wasm.scriptwitness_as_native_witness(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusWitness | undefined}\n     */\n    as_plutus_witness() {\n        const ret = wasm.scriptwitness_as_plutus_witness(this.ptr);\n        return ret === 0 ? undefined : PlutusWitness.__wrap(ret);\n    }\n}\nconst SingleHostAddrFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_singlehostaddr_free(ptr));\n/** */\nclass SingleHostAddr {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n        SingleHostAddrFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        SingleHostAddrFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostAddr}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostaddr_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostAddr}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostaddr_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        const ret = wasm.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {Ipv4 | undefined}\n     */\n    ipv4() {\n        const ret = wasm.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {Ipv6 | undefined}\n     */\n    ipv6() {\n        const ret = wasm.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {Ipv4 | undefined} ipv4\n     * @param {Ipv6 | undefined} ipv6\n     * @returns {SingleHostAddr}\n     */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.__destroy_into_raw();\n        }\n        const ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\nconst SingleHostNameFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_singlehostname_free(ptr));\n/** */\nclass SingleHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n        SingleHostNameFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        SingleHostNameFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostName}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostName}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        const ret = wasm.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {DNSRecordAorAAAA}\n     */\n    dns_name() {\n        const ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {DNSRecordAorAAAA} dns_name\n     * @returns {SingleHostName}\n     */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        const ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\nconst StakeCredentialFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_stakecredential_free(ptr));\n/** */\nclass StakeCredential {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n        StakeCredentialFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StakeCredentialFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        const ret = wasm.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        const ret = wasm.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash | undefined}\n     */\n    to_keyhash() {\n        const ret = wasm.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHash | undefined}\n     */\n    to_scripthash() {\n        const ret = wasm.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredential}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredential_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredential}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredential_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst StakeCredentialsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_stakecredentials_free(ptr));\n/** */\nclass StakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n        StakeCredentialsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StakeCredentialsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredentials}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredentials_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredentials}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredentials_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {StakeCredential}\n     */\n    get(index) {\n        const ret = wasm.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} elem\n     */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\nconst StakeDelegationFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_stakedelegation_free(ptr));\n/** */\nclass StakeDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n        StakeDelegationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StakeDelegationFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDelegation}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakedelegation_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDelegation}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakedelegation_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        const ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        const ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @returns {StakeDelegation}\n     */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        const ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\nconst StakeDeregistrationFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_stakederegistration_free(ptr));\n/** */\nclass StakeDeregistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n        StakeDeregistrationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StakeDeregistrationFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDeregistration}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakederegistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDeregistration}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakederegistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        const ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeDeregistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        const ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\nconst StakeRegistrationFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_stakeregistration_free(ptr));\n/** */\nclass StakeRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n        StakeRegistrationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StakeRegistrationFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeRegistration}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakeregistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeRegistration}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakeregistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        const ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeRegistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        const ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\nconst StringsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_strings_free(ptr));\n/** */\nclass Strings {\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n        StringsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StringsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_strings_free(ptr);\n    }\n    /**\n     * @returns {Strings}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {string}\n     */\n    get(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} elem\n     */\n    add(elem) {\n        const ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.strings_add(this.ptr, ptr0, len0);\n    }\n}\nconst TimelockExpiryFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_timelockexpiry_free(ptr));\n/** */\nclass TimelockExpiry {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n        TimelockExpiryFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TimelockExpiryFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockExpiry}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockexpiry_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockExpiry}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockexpiry_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockExpiry}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        const ret = wasm.constrplutusdata_alternative(slot.ptr);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\nconst TimelockStartFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_timelockstart_free(ptr));\n/** */\nclass TimelockStart {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n        TimelockStartFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TimelockStartFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockStart}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockstart_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockStart}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockstart_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockStart}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        const ret = wasm.constrplutusdata_alternative(slot.ptr);\n        return TimelockStart.__wrap(ret);\n    }\n}\nconst TransactionFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transaction_free(ptr));\n/** */\nclass Transaction {\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n        TransactionFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Transaction}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Transaction}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionBody}\n     */\n    body() {\n        const ret = wasm.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    witness_set() {\n        const ret = wasm.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_valid() {\n        const ret = wasm.transaction_is_valid(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        const ret = wasm.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {boolean} valid\n     */\n    set_is_valid(valid) {\n        wasm.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n     * @param {TransactionBody} body\n     * @param {TransactionWitnessSet} witness_set\n     * @param {AuxiliaryData | undefined} auxiliary_data\n     * @returns {Transaction}\n     */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.__destroy_into_raw();\n        }\n        const ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\nconst TransactionBodiesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionbodies_free(ptr));\n/** */\nclass TransactionBodies {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n        TransactionBodiesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionBodiesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBodies}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbodies_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBodies}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbodies_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionBody}\n     */\n    get(index) {\n        const ret = wasm.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @param {TransactionBody} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\nconst TransactionBodyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionbody_free(ptr));\n/** */\nclass TransactionBody {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n        TransactionBodyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionBodyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBody}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbody_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBody}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbody_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    inputs() {\n        const ret = wasm.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        const ret = wasm.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    fee() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ttl() {\n        const ret = wasm.transactionbody_ttl(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Certificates} certs\n     */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certs() {\n        const ret = wasm.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @param {Withdrawals} withdrawals\n     */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        const ret = wasm.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * @param {Update} update\n     */\n    set_update(update) {\n        _assertClass(update, Update);\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n     * @returns {Update | undefined}\n     */\n    update() {\n        const ret = wasm.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n     * @param {AuxiliaryDataHash} auxiliary_data_hash\n     */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataHash | undefined}\n     */\n    auxiliary_data_hash() {\n        const ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    validity_start_interval() {\n        const ret = wasm.transactionbody_validity_start_interval(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Mint} mint\n     */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        const ret = wasm.transactionbody_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptDataHash} script_data_hash\n     */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        const ret = wasm.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} collateral\n     */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    collateral() {\n        const ret = wasm.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHashes} required_signers\n     */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        const ret = wasm.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        const ret = wasm.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} collateral_return\n     */\n    set_collateral_return(collateral_return) {\n        _assertClass(collateral_return, TransactionOutput);\n        wasm.transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n     * @returns {TransactionOutput | undefined}\n     */\n    collateral_return() {\n        const ret = wasm.transactionbody_collateral_return(this.ptr);\n        return ret === 0 ? undefined : TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} total_collateral\n     */\n    set_total_collateral(total_collateral) {\n        _assertClass(total_collateral, BigNum);\n        wasm.transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    total_collateral() {\n        const ret = wasm.transactionbody_total_collateral(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} reference_inputs\n     */\n    set_reference_inputs(reference_inputs) {\n        _assertClass(reference_inputs, TransactionInputs);\n        wasm.transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    reference_inputs() {\n        const ret = wasm.transactionbody_reference_inputs(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} inputs\n     * @param {TransactionOutputs} outputs\n     * @param {BigNum} fee\n     * @param {BigNum | undefined} ttl\n     * @returns {TransactionBody}\n     */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(ttl)) {\n            _assertClass(ttl, BigNum);\n            ptr0 = ttl.__destroy_into_raw();\n        }\n        const ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, ptr0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    raw() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_raw(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionBuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionbuilder_free(ptr));\n/** */\nclass TransactionBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n        TransactionBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionBuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n     * This automatically selects and adds inputs from {inputs} consisting of just enough to cover\n     * the outputs that have already been added.\n     * This should be called after adding all certs/outputs/etc and will be an error otherwise.\n     * Adding a change output must be called after via TransactionBuilder::balance()\n     * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.\n     *\n     * change_address is required here in order to determine the min ada requirement precisely\n     * @param {TransactionUnspentOutputs} inputs\n     * @param {Address} change_address\n     */\n    add_inputs_from(inputs, change_address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(inputs, TransactionUnspentOutputs);\n            _assertClass(change_address, Address);\n            wasm.transactionbuilder_add_inputs_from(retptr, this.ptr, inputs.ptr, change_address.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_input(utxo, script_witness) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_input(this.ptr, utxo.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_reference_input(utxo) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        wasm.transactionbuilder_add_reference_input(this.ptr, utxo.ptr);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {Address} address\n     * @param {TransactionInput} input\n     * @param {Value} amount\n     * @returns {BigNum}\n     */\n    fee_for_input(address, input, amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(address, Address);\n            _assertClass(input, TransactionInput);\n            _assertClass(amount, Value);\n            wasm.transactionbuilder_fee_for_input(retptr, this.ptr, address.ptr, input.ptr, amount.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Add explicit output via a TransactionOutput object\n     * @param {TransactionOutput} output\n     */\n    add_output(output) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(output, TransactionOutput);\n            wasm.transactionbuilder_add_output(retptr, this.ptr, output.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Add plutus scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus v2 scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus data via a PlutusData object\n     * @param {PlutusData} plutus_data\n     */\n    add_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        wasm.transactionbuilder_add_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * Add native scripts via a NativeScripts object\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * Add certificate via a Certificates object\n     * @param {Certificate} certificate\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_certificate(certificate, script_witness) {\n        _assertClass(certificate, Certificate);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_certificate(this.ptr, certificate.ptr, ptr0);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {TransactionOutput} output\n     * @returns {BigNum}\n     */\n    fee_for_output(output) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(output, TransactionOutput);\n            wasm.transactionbuilder_fee_for_output(retptr, this.ptr, output.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} ttl\n     */\n    set_ttl(ttl) {\n        _assertClass(ttl, BigNum);\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl.ptr);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @param {RewardAddress} reward_address\n     * @param {BigNum} coin\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_withdrawal(reward_address, coin, script_witness) {\n        _assertClass(reward_address, RewardAddress);\n        _assertClass(coin, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_withdrawal(this.ptr, reward_address.ptr, coin.ptr, ptr0);\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        const ret = wasm.transactionbuilder_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * Set explicit auxiliary data via an AuxiliaryData object\n     * It might contain some metadata plus native or Plutus scripts\n     * @param {AuxiliaryData} auxiliary_data\n     */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n     * Set metadata using a GeneralTransactionMetadata object\n     * It will be set to the existing or new auxiliary data in this builder\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} val\n     */\n    add_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        _assertClass(val, TransactionMetadatum);\n        wasm.transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel and a String\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     */\n    add_json_metadatum(key, val) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, BigNum);\n            const ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbuilder_add_json_metadatum(retptr, this.ptr, key.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     * @param {number} schema\n     */\n    add_json_metadatum_with_schema(key, val, schema) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, BigNum);\n            const ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbuilder_add_json_metadatum_with_schema(retptr, this.ptr, key.ptr, ptr0, len0, schema);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns a copy of the current mint state in the builder\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        const ret = wasm.transactionbuilder_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certificates() {\n        const ret = wasm.transactionbuilder_certificates(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        const ret = wasm.transactionbuilder_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * Returns a copy of the current witness native scripts in the builder\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        const ret = wasm.transactionbuilder_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * Add a mint entry to this builder using a PolicyID and MintAssets object\n     * It will be securely added to existing or new Mint in this builder\n     * It will securely add assets to an existing PolicyID\n     * But it will replace/overwrite any existing mint assets with the same PolicyID\n     * first redeemer applied to a PolicyID is taken for all further assets added to the same PolicyID\n     * @param {ScriptHash} policy_id\n     * @param {MintAssets} mint_assets\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_mint(policy_id, mint_assets, script_witness) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(mint_assets, MintAssets);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_mint(this.ptr, policy_id.ptr, mint_assets.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionBuilderConfig} cfg\n     * @returns {TransactionBuilder}\n     */\n    static new(cfg) {\n        _assertClass(cfg, TransactionBuilderConfig);\n        const ret = wasm.transactionbuilder_new(cfg.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        const ret = wasm.transactionbuilder_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_collateral(utxo) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(utxo, TransactionUnspentOutput);\n            wasm.transactionbuilder_add_collateral(retptr, this.ptr, utxo.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    get_collateral() {\n        const ret = wasm.transactionbuilder_get_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} required_signer\n     */\n    add_required_signer(required_signer) {\n        _assertClass(required_signer, Ed25519KeyHash);\n        wasm.transactionbuilder_add_required_signer(this.ptr, required_signer.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        const ret = wasm.transactionbuilder_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        var ptr0 = network_id.__destroy_into_raw();\n        wasm.transactionbuilder_set_network_id(this.ptr, ptr0);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        const ret = wasm.transactionbuilder_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        const ret = wasm.transactionbuilder_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * does not include refunds or withdrawals\n     * @returns {Value}\n     */\n    get_explicit_input() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_explicit_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * withdrawals and refunds\n     * @returns {Value}\n     */\n    get_implicit_input() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_implicit_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Return explicit input plus implicit input plus mint\n     * @returns {Value}\n     */\n    get_total_input() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_total_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Return explicit output plus implicit output plus burn (does not consider fee directly)\n     * @returns {Value}\n     */\n    get_total_output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_total_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * does not include fee\n     * @returns {Value}\n     */\n    get_explicit_output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_explicit_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    get_deposit() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_deposit(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    get_fee_if_set() {\n        const ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * Warning: this function will mutate the /fee/ field\n     * Make sure to call this function last after setting all other tx-body properties\n     * Editing inputs, outputs, mint, etc. after change been calculated\n     * might cause a mismatch in calculated fee versus the required fee\n     * @param {Address} change_address\n     * @param {Datum | undefined} datum\n     */\n    balance(change_address, datum) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(change_address, Address);\n            let ptr0 = 0;\n            if (!isLikeNone(datum)) {\n                _assertClass(datum, Datum);\n                ptr0 = datum.__destroy_into_raw();\n            }\n            wasm.transactionbuilder_balance(retptr, this.ptr, change_address.ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the TransactionBody.\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    full_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_full_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint32Array}\n     */\n    output_sizes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        const ret = wasm.transactionbuilder_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     *\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     *\n     * takes fetched ex units into consideration\n     *\n     * add collateral utxos and collateral change receiver in case you redeem from plutus script utxos\n     *\n     * async call\n     *\n     * NOTE: is_valid set to true\n     * @param {TransactionUnspentOutputs | undefined} collateral_utxos\n     * @param {Address | undefined} collateral_change_address\n     * @param {boolean | undefined} native_uplc\n     * @returns {Promise<Transaction>}\n     */\n    construct(collateral_utxos, collateral_change_address, native_uplc) {\n        const ptr = this.__destroy_into_raw();\n        let ptr0 = 0;\n        if (!isLikeNone(collateral_utxos)) {\n            _assertClass(collateral_utxos, TransactionUnspentOutputs);\n            ptr0 = collateral_utxos.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(collateral_change_address)) {\n            _assertClass(collateral_change_address, Address);\n            ptr1 = collateral_change_address.__destroy_into_raw();\n        }\n        const ret = wasm.transactionbuilder_construct(ptr, ptr0, ptr1, isLikeNone(native_uplc) ? 0xFFFFFF : native_uplc ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     * NOTE: is_valid set to true\n     * @returns {Transaction}\n     */\n    build_tx() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_build_tx(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n     * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n     * this is done to simplify the library code, but can be fixed later\n     * @returns {BigNum}\n     */\n    min_fee() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_min_fee(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionBuilderConfigFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionbuilderconfig_free(ptr));\n/** */\nclass TransactionBuilderConfig {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfig.prototype);\n        obj.ptr = ptr;\n        TransactionBuilderConfigFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionBuilderConfigFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfig_free(ptr);\n    }\n}\nconst TransactionBuilderConfigBuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionbuilderconfigbuilder_free(ptr));\n/** */\nclass TransactionBuilderConfigBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfigBuilder.prototype);\n        obj.ptr = ptr;\n        TransactionBuilderConfigBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionBuilderConfigBuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfigbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    static new() {\n        const ret = wasm.transactionbuilderconfigbuilder_new();\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {LinearFee} fee_algo\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    fee_algo(fee_algo) {\n        _assertClass(fee_algo, LinearFee);\n        const ret = wasm.transactionbuilderconfigbuilder_fee_algo(this.ptr, fee_algo.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coins_per_utxo_byte\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    coins_per_utxo_byte(coins_per_utxo_byte) {\n        _assertClass(coins_per_utxo_byte, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr, coins_per_utxo_byte.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_pool_deposit(this.ptr, pool_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_key_deposit(this.ptr, key_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_value_size(max_value_size) {\n        const ret = wasm.transactionbuilderconfigbuilder_max_value_size(this.ptr, max_value_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_tx_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_size(max_tx_size) {\n        const ret = wasm.transactionbuilderconfigbuilder_max_tx_size(this.ptr, max_tx_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} ex_unit_prices\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    ex_unit_prices(ex_unit_prices) {\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        const ret = wasm.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, ex_unit_prices.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        const ret = wasm.transactionbuilderconfigbuilder_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} costmdls\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    costmdls(costmdls) {\n        _assertClass(costmdls, Costmdls);\n        const ret = wasm.transactionbuilderconfigbuilder_costmdls(this.ptr, costmdls.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} collateral_percentage\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    collateral_percentage(collateral_percentage) {\n        const ret = wasm.transactionbuilderconfigbuilder_collateral_percentage(this.ptr, collateral_percentage);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_collateral_inputs(max_collateral_inputs) {\n        const ret = wasm.transactionbuilderconfigbuilder_max_collateral_inputs(this.ptr, max_collateral_inputs);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} zero_time\n     * @param {BigNum} zero_slot\n     * @param {number} slot_length\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    slot_config(zero_time, zero_slot, slot_length) {\n        _assertClass(zero_time, BigNum);\n        _assertClass(zero_slot, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_slot_config(this.ptr, zero_time.ptr, zero_slot.ptr, slot_length);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Blockfrost} blockfrost\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    blockfrost(blockfrost) {\n        _assertClass(blockfrost, Blockfrost);\n        const ret = wasm.transactionbuilderconfigbuilder_blockfrost(this.ptr, blockfrost.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBuilderConfig}\n     */\n    build() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilderconfigbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBuilderConfig.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionhash_free(ptr));\n/** */\nclass TransactionHash {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n        TransactionHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {TransactionHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {TransactionHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionIndexesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionindexes_free(ptr));\n/** */\nclass TransactionIndexes {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionIndexes.prototype);\n        obj.ptr = ptr;\n        TransactionIndexesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionIndexesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionindexes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionindexes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionIndexes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionindexes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionIndexes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        const ret = wasm.transactionindexes_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionindexes_add(this.ptr, elem.ptr);\n    }\n}\nconst TransactionInputFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactioninput_free(ptr));\n/** */\nclass TransactionInput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n        TransactionInputFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionInputFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInput}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInput}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionHash}\n     */\n    transaction_id() {\n        const ret = wasm.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionHash} transaction_id\n     * @param {BigNum} index\n     * @returns {TransactionInput}\n     */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        _assertClass(index, BigNum);\n        const ret = wasm.transactioninput_new(transaction_id.ptr, index.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n}\nconst TransactionInputsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactioninputs_free(ptr));\n/** */\nclass TransactionInputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n        TransactionInputsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionInputsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInputs}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninputs_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInputs}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionInput}\n     */\n    get(index) {\n        const ret = wasm.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n    /** */\n    sort() {\n        wasm.transactioninputs_sort(this.ptr);\n    }\n}\nconst TransactionMetadatumFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionmetadatum_free(ptr));\n/** */\nclass TransactionMetadatum {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n        TransactionMetadatumFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionMetadatumFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MetadataMap} map\n     * @returns {TransactionMetadatum}\n     */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        const ret = wasm.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {MetadataList} list\n     * @returns {TransactionMetadatum}\n     */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        const ret = wasm.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {TransactionMetadatum}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        const ret = wasm.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static new_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatum_new_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} text\n     * @returns {TransactionMetadatum}\n     */\n    static new_text(text) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatum_new_text(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    as_map() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_map(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    as_list() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_list(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Int}\n     */\n    as_int() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_int(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n}\nconst TransactionMetadatumLabelsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionmetadatumlabels_free(ptr));\n/** */\nclass TransactionMetadatumLabels {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n        TransactionMetadatumLabelsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionMetadatumLabelsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatumLabels}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatumlabels_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatumLabels.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        const ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionindexes_add(this.ptr, elem.ptr);\n    }\n}\nconst TransactionOutputFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionoutput_free(ptr));\n/** */\nclass TransactionOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n        TransactionOutputFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionOutputFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutput}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutput}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Address}\n     */\n    address() {\n        const ret = wasm.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    amount() {\n        const ret = wasm.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Datum | undefined}\n     */\n    datum() {\n        const ret = wasm.transactionoutput_datum(this.ptr);\n        return ret === 0 ? undefined : Datum.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptRef | undefined}\n     */\n    script_ref() {\n        const ret = wasm.transactionoutput_script_ref(this.ptr);\n        return ret === 0 ? undefined : ScriptRef.__wrap(ret);\n    }\n    /**\n     * @param {Datum} datum\n     */\n    set_datum(datum) {\n        _assertClass(datum, Datum);\n        wasm.transactionoutput_set_datum(this.ptr, datum.ptr);\n    }\n    /**\n     * @param {ScriptRef} script_ref\n     */\n    set_script_ref(script_ref) {\n        _assertClass(script_ref, ScriptRef);\n        wasm.transactionoutput_set_script_ref(this.ptr, script_ref.ptr);\n    }\n    /**\n     * @param {Address} address\n     * @param {Value} amount\n     * @returns {TransactionOutput}\n     */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        const ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * legacy support: serialize output as array array\n     *\n     * does not support inline datum and script_ref!\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionOutputAmountBuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionoutputamountbuilder_free(ptr));\n/** */\nclass TransactionOutputAmountBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputAmountBuilder.prototype);\n        obj.ptr = ptr;\n        TransactionOutputAmountBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionOutputAmountBuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputamountbuilder_free(ptr);\n    }\n    /**\n     * @param {Value} amount\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_value(amount) {\n        _assertClass(amount, Value);\n        const ret = wasm.transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin(coin) {\n        _assertClass(coin, BigNum);\n        const ret = wasm.transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @param {MultiAsset} multiasset\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin_and_asset(coin, multiasset) {\n        _assertClass(coin, BigNum);\n        _assertClass(multiasset, MultiAsset);\n        const ret = wasm.transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @param {BigNum} coins_per_utxo_word\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(multiasset, MultiAsset);\n            _assertClass(coins_per_utxo_word, BigNum);\n            wasm.transactionoutputamountbuilder_with_asset_and_min_required_coin(retptr, this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    build() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputamountbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionOutputBuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionoutputbuilder_free(ptr));\n/**\n * We introduce a builder-pattern format for creating transaction outputs\n * This is because:\n * 1. Some fields (i.e. data hash) are optional, and we can't easily expose Option<> in WASM\n * 2. Some fields like amounts have many ways it could be set (some depending on other field values being known)\n * 3. Easier to adapt as the output format gets more complicated in future Cardano releases\n */\nclass TransactionOutputBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputBuilder.prototype);\n        obj.ptr = ptr;\n        TransactionOutputBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionOutputBuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionOutputBuilder}\n     */\n    static new() {\n        const ret = wasm.transactionoutputbuilder_new();\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Address} address\n     * @returns {TransactionOutputBuilder}\n     */\n    with_address(address) {\n        _assertClass(address, Address);\n        const ret = wasm.transactionoutputbuilder_with_address(this.ptr, address.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Datum} data_hash\n     * @returns {TransactionOutputBuilder}\n     */\n    with_datum(data_hash) {\n        _assertClass(data_hash, Datum);\n        const ret = wasm.transactionoutputbuilder_with_datum(this.ptr, data_hash.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    next() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputbuilder_next(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionOutputsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionoutputs_free(ptr));\n/** */\nclass TransactionOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n        TransactionOutputsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionOutputsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutputs}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutputs_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutputs}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionOutput}\n     */\n    get(index) {\n        const ret = wasm.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\nconst TransactionUnspentOutputFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionunspentoutput_free(ptr));\n/** */\nclass TransactionUnspentOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n        TransactionUnspentOutputFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionUnspentOutputFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionUnspentOutput}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionunspentoutput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionUnspentOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionInput} input\n     * @param {TransactionOutput} output\n     * @returns {TransactionUnspentOutput}\n     */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        const ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInput}\n     */\n    input() {\n        const ret = wasm.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    output() {\n        const ret = wasm.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionUnspentOutputsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionunspentoutputs_free(ptr));\n/** */\nclass TransactionUnspentOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutputs.prototype);\n        obj.ptr = ptr;\n        TransactionUnspentOutputsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionUnspentOutputsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutputs_free(ptr);\n    }\n    /**\n     * @returns {TransactionUnspentOutputs}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionUnspentOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionUnspentOutput}\n     */\n    get(index) {\n        const ret = wasm.transactionunspentoutputs_get(this.ptr, index);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionUnspentOutput);\n        wasm.transactionunspentoutputs_add(this.ptr, elem.ptr);\n    }\n}\nconst TransactionWitnessSetFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionwitnessset_free(ptr));\n/** */\nclass TransactionWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n        TransactionWitnessSetFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionWitnessSetFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSet}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnessset_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSet}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnessset_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkeywitnesses} vkeys\n     */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses | undefined}\n     */\n    vkeys() {\n        const ret = wasm.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        const ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitnesses} bootstraps\n     */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses | undefined}\n     */\n    bootstraps() {\n        const ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        const ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} plutus_data\n     */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    plutus_data() {\n        const ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {Redeemers} redeemers\n     */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        const ret = wasm.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_v2_scripts() {\n        const ret = wasm.transactionwitnessset_plutus_v2_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    static new() {\n        const ret = wasm.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\nconst TransactionWitnessSetBuilderFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionwitnesssetbuilder_free(ptr));\n/**\n * Builder de-duplicates witnesses as they are added\n */\nclass TransactionWitnessSetBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSetBuilder.prototype);\n        obj.ptr = ptr;\n        TransactionWitnessSetBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionWitnessSetBuilderFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssetbuilder_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.transactionwitnesssetbuilder_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.transactionwitnesssetbuilder_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionwitnesssetbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.transactionwitnesssetbuilder_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.transactionwitnesssetbuilder_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} required_wits\n     */\n    add_required_wits(required_wits) {\n        _assertClass(required_wits, RequiredWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_required_wits(this.ptr, required_wits.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSetBuilder}\n     */\n    static new() {\n        const ret = wasm.transactionwitnesssetbuilder_new();\n        return TransactionWitnessSetBuilder.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} wit_set\n     */\n    add_existing(wit_set) {\n        _assertClass(wit_set, TransactionWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_existing(this.ptr, wit_set.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    build() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssetbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst TransactionWitnessSetsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_transactionwitnesssets_free(ptr));\n/** */\nclass TransactionWitnessSets {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n        TransactionWitnessSetsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TransactionWitnessSetsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSets}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnesssets_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSets}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnesssets_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionWitnessSet}\n     */\n    get(index) {\n        const ret = wasm.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\nconst UnitIntervalFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_unitinterval_free(ptr));\n/** */\nclass UnitInterval {\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n        UnitIntervalFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        UnitIntervalFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {UnitInterval}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.unitinterval_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {UnitInterval}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.unitinterval_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    numerator() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    denominator() {\n        const ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} numerator\n     * @param {BigNum} denominator\n     * @returns {UnitInterval}\n     */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        const ret = wasm.exunits_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {number} float_number\n     * @returns {UnitInterval}\n     */\n    static from_float(float_number) {\n        const ret = wasm.unitinterval_from_float(float_number);\n        return UnitInterval.__wrap(ret);\n    }\n}\nconst UpdateFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_update_free(ptr));\n/** */\nclass Update {\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n        UpdateFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        UpdateFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_update_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Update}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.update_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Update}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.update_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    proposed_protocol_parameter_updates() {\n        const ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        const ret = wasm.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n     * @param {number} epoch\n     * @returns {Update}\n     */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        const ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\nconst UrlFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_url_free(ptr));\n/** */\nclass Url {\n    static __wrap(ptr) {\n        const obj = Object.create(Url.prototype);\n        obj.ptr = ptr;\n        UrlFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        UrlFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_url_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Url}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.url_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Url.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} url\n     * @returns {Url}\n     */\n    static new(url) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.url_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Url.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nconst VRFCertFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vrfcert_free(ptr));\n/** */\nclass VRFCert {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n        VRFCertFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VRFCertFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFCert}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfcert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {VRFCert}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfcert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} output\n     * @param {Uint8Array} proof\n     * @returns {VRFCert}\n     */\n    static new(output, proof) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.vrfcert_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst VRFKeyHashFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vrfkeyhash_free(ptr));\n/** */\nclass VRFKeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n        VRFKeyHashFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VRFKeyHashFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFKeyHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {VRFKeyHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {VRFKeyHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst VRFVKeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vrfvkey_free(ptr));\n/** */\nclass VRFVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n        VRFVKeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VRFVKeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFVKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusscript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    hash() {\n        const ret = wasm.vrfvkey_hash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_raw_key() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nconst ValueFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_value_free(ptr));\n/** */\nclass Value {\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n        ValueFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ValueFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_value_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Value}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.value_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Value}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.value_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {Value}\n     */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        const ret = wasm.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @returns {Value}\n     */\n    static new_from_assets(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        const ret = wasm.value_new_from_assets(multiasset.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    static zero() {\n        const ret = wasm.value_zero();\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        const ret = wasm.value_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coin() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n     * @returns {MultiAsset | undefined}\n     */\n    multiasset() {\n        const ret = wasm.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n     * @param {Value} rhs\n     * @returns {Value}\n     */\n    checked_add(rhs) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rhs, Value);\n            wasm.value_checked_add(retptr, this.ptr, rhs.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    checked_sub(rhs_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rhs_value, Value);\n            wasm.value_checked_sub(retptr, this.ptr, rhs_value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        const ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * note: values are only partially comparable\n     * @param {Value} rhs_value\n     * @returns {number | undefined}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        const ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\nconst VkeyFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vkey_free(ptr));\n/** */\nclass Vkey {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n        VkeyFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VkeyFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} pk\n     * @returns {Vkey}\n     */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        const ret = wasm.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    public_key() {\n        const ret = wasm.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\nconst VkeysFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vkeys_free(ptr));\n/** */\nclass Vkeys {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n        VkeysFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VkeysFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeys_free(ptr);\n    }\n    /**\n     * @returns {Vkeys}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkey}\n     */\n    get(index) {\n        const ret = wasm.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @param {Vkey} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        wasm.vkeys_add(this.ptr, elem.ptr);\n    }\n}\nconst VkeywitnessFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vkeywitness_free(ptr));\n/** */\nclass Vkeywitness {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n        VkeywitnessFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VkeywitnessFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkeywitness}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vkeywitness_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Vkeywitness}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vkeywitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @returns {Vkeywitness}\n     */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        const ret = wasm.vkey_new(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        const ret = wasm.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\nconst VkeywitnessesFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_vkeywitnesses_free(ptr));\n/** */\nclass Vkeywitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n        VkeywitnessesFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VkeywitnessesFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkeywitness}\n     */\n    get(index) {\n        const ret = wasm.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @param {Vkeywitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\nconst WithdrawalsFinalization = new FinalizationRegistry((ptr) => wasm.__wbg_withdrawals_free(ptr));\n/** */\nclass Withdrawals {\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n        WithdrawalsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        WithdrawalsFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Withdrawals}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.withdrawals_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Withdrawals}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.withdrawals_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Withdrawals}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {RewardAddress} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        const ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        const ret = wasm.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    keys() {\n        const ret = wasm.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\nconst imports = {\n    __wbindgen_placeholder__: {\n        __wbindgen_string_new: function (arg0, arg1) {\n            const ret = getStringFromWasm0(arg0, arg1);\n            return addHeapObject(ret);\n        },\n        __wbindgen_object_drop_ref: function (arg0) {\n            takeObject(arg0);\n        },\n        __wbindgen_json_parse: function (arg0, arg1) {\n            const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n            return addHeapObject(ret);\n        },\n        __wbindgen_json_serialize: function (arg0, arg1) {\n            const obj = getObject(arg1);\n            const ret = JSON.stringify(obj === undefined ? null : obj);\n            const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            getInt32Memory0()[arg0 / 4 + 1] = len0;\n            getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n        },\n        __wbg_transaction_new: function (arg0) {\n            const ret = Transaction.__wrap(arg0);\n            return addHeapObject(ret);\n        },\n        __wbg_fetch_16f5dddfc5a913a4: function (arg0, arg1) {\n            const ret = getObject(arg0).fetch(getObject(arg1));\n            return addHeapObject(ret);\n        },\n        __wbindgen_string_get: function (arg0, arg1) {\n            const obj = getObject(arg1);\n            const ret = typeof (obj) === \"string\" ? obj : undefined;\n            var ptr0 = isLikeNone(ret)\n                ? 0\n                : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            getInt32Memory0()[arg0 / 4 + 1] = len0;\n            getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n        },\n        __wbindgen_object_clone_ref: function (arg0) {\n            const ret = getObject(arg0);\n            return addHeapObject(ret);\n        },\n        __wbg_set_a5d34c36a1a4ebd1: function () {\n            return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n                getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n            }, arguments);\n        },\n        __wbg_headers_ab5251d2727ac41e: function (arg0) {\n            const ret = getObject(arg0).headers;\n            return addHeapObject(ret);\n        },\n        __wbg_newwithstrandinit_c45f0dc6da26fd03: function () {\n            return handleError(function (arg0, arg1, arg2) {\n                const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_instanceof_Response_fb3a4df648c1859b: function (arg0) {\n            let result;\n            try {\n                result = getObject(arg0) instanceof Response;\n            }\n            catch {\n                result = false;\n            }\n            const ret = result;\n            return ret;\n        },\n        __wbg_json_b9414eb18cb751d0: function () {\n            return handleError(function (arg0) {\n                const ret = getObject(arg0).json();\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbindgen_cb_drop: function (arg0) {\n            const obj = takeObject(arg0).original;\n            if (obj.cnt-- == 1) {\n                obj.a = 0;\n                return true;\n            }\n            const ret = false;\n            return ret;\n        },\n        __wbg_randomFillSync_2f6909f8132a175d: function () {\n            return handleError(function (arg0, arg1, arg2) {\n                getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n            }, arguments);\n        },\n        __wbg_getRandomValues_11a236fbf9914290: function () {\n            return handleError(function (arg0, arg1) {\n                getObject(arg0).getRandomValues(getObject(arg1));\n            }, arguments);\n        },\n        __wbg_process_5615a087a47ba544: function (arg0) {\n            const ret = getObject(arg0).process;\n            return addHeapObject(ret);\n        },\n        __wbindgen_is_object: function (arg0) {\n            const val = getObject(arg0);\n            const ret = typeof (val) === \"object\" && val !== null;\n            return ret;\n        },\n        __wbg_versions_8404a8b21b9337ae: function (arg0) {\n            const ret = getObject(arg0).versions;\n            return addHeapObject(ret);\n        },\n        __wbg_node_8b504e170b6380b9: function (arg0) {\n            const ret = getObject(arg0).node;\n            return addHeapObject(ret);\n        },\n        __wbindgen_is_string: function (arg0) {\n            const ret = typeof (getObject(arg0)) === \"string\";\n            return ret;\n        },\n        __wbg_require_0430b68b38d1a77e: function () {\n            return handleError(function (arg0, arg1, arg2) {\n                const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_crypto_ca5197b41df5e2bd: function (arg0) {\n            const ret = getObject(arg0).crypto;\n            return addHeapObject(ret);\n        },\n        __wbg_msCrypto_1088c21440b2d7e4: function (arg0) {\n            const ret = getObject(arg0).msCrypto;\n            return addHeapObject(ret);\n        },\n        __wbg_static_accessor_NODE_MODULE_06b864c18e8ae506: function () {\n            const ret = module;\n            return addHeapObject(ret);\n        },\n        __wbg_self_e7c1f827057f6584: function () {\n            return handleError(function () {\n                const ret = self.self;\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_window_a09ec664e14b1b81: function () {\n            return handleError(function () {\n                const ret = globalThis.window;\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_globalThis_87cbb8506fecf3a9: function () {\n            return handleError(function () {\n                const ret = globalThis.globalThis;\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_global_c85a9259e621f3db: function () {\n            return handleError(function () {\n                const ret = global.global;\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbindgen_is_undefined: function (arg0) {\n            const ret = getObject(arg0) === undefined;\n            return ret;\n        },\n        __wbg_newnoargs_2b8b6bd7753c76ba: function (arg0, arg1) {\n            const ret = new Function(getStringFromWasm0(arg0, arg1));\n            return addHeapObject(ret);\n        },\n        __wbg_call_95d1ea488d03e4e8: function () {\n            return handleError(function (arg0, arg1) {\n                const ret = getObject(arg0).call(getObject(arg1));\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_new_f9876326328f45ed: function () {\n            const ret = new Object();\n            return addHeapObject(ret);\n        },\n        __wbg_call_9495de66fdbe016b: function () {\n            return handleError(function (arg0, arg1, arg2) {\n                const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n                return addHeapObject(ret);\n            }, arguments);\n        },\n        __wbg_set_6aa458a4ebdb65cb: function () {\n            return handleError(function (arg0, arg1, arg2) {\n                const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n                return ret;\n            }, arguments);\n        },\n        __wbg_buffer_cf65c07de34b9a08: function (arg0) {\n            const ret = getObject(arg0).buffer;\n            return addHeapObject(ret);\n        },\n        __wbg_new_9d3a9ce4282a18a8: function (arg0, arg1) {\n            try {\n                var state0 = { a: arg0, b: arg1 };\n                var cb0 = (arg0, arg1) => {\n                    const a = state0.a;\n                    state0.a = 0;\n                    try {\n                        return __wbg_adapter_1371(a, state0.b, arg0, arg1);\n                    }\n                    finally {\n                        state0.a = a;\n                    }\n                };\n                const ret = new Promise(cb0);\n                return addHeapObject(ret);\n            }\n            finally {\n                state0.a = state0.b = 0;\n            }\n        },\n        __wbg_resolve_fd40f858d9db1a04: function (arg0) {\n            const ret = Promise.resolve(getObject(arg0));\n            return addHeapObject(ret);\n        },\n        __wbg_then_ec5db6d509eb475f: function (arg0, arg1) {\n            const ret = getObject(arg0).then(getObject(arg1));\n            return addHeapObject(ret);\n        },\n        __wbg_then_f753623316e2873a: function (arg0, arg1, arg2) {\n            const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n            return addHeapObject(ret);\n        },\n        __wbg_new_537b7341ce90bb31: function (arg0) {\n            const ret = new Uint8Array(getObject(arg0));\n            return addHeapObject(ret);\n        },\n        __wbg_set_17499e8aa4003ebd: function (arg0, arg1, arg2) {\n            getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n        },\n        __wbg_length_27a2afe8ab42b09f: function (arg0) {\n            const ret = getObject(arg0).length;\n            return ret;\n        },\n        __wbg_newwithlength_b56c882b57805732: function (arg0) {\n            const ret = new Uint8Array(arg0 >>> 0);\n            return addHeapObject(ret);\n        },\n        __wbg_subarray_7526649b91a252a6: function (arg0, arg1, arg2) {\n            const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n            return addHeapObject(ret);\n        },\n        __wbg_new_d87f272aec784ec0: function (arg0, arg1) {\n            const ret = new Function(getStringFromWasm0(arg0, arg1));\n            return addHeapObject(ret);\n        },\n        __wbg_call_eae29933372a39be: function (arg0, arg1) {\n            const ret = getObject(arg0).call(getObject(arg1));\n            return addHeapObject(ret);\n        },\n        __wbindgen_jsval_eq: function (arg0, arg1) {\n            const ret = getObject(arg0) === getObject(arg1);\n            return ret;\n        },\n        __wbg_self_e0b3266d2d9eba1a: function (arg0) {\n            const ret = getObject(arg0).self;\n            return addHeapObject(ret);\n        },\n        __wbg_crypto_e95a6e54c5c2e37f: function (arg0) {\n            const ret = getObject(arg0).crypto;\n            return addHeapObject(ret);\n        },\n        __wbg_getRandomValues_dc67302a7bd1aec5: function (arg0) {\n            const ret = getObject(arg0).getRandomValues;\n            return addHeapObject(ret);\n        },\n        __wbg_require_0993fe224bf8e202: function (arg0, arg1) {\n            const ret = require(getStringFromWasm0(arg0, arg1));\n            return addHeapObject(ret);\n        },\n        __wbg_randomFillSync_dd2297de5917c74e: function (arg0, arg1, arg2) {\n            getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n        },\n        __wbg_getRandomValues_02639197c8166a96: function (arg0, arg1, arg2) {\n            getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n        },\n        __wbindgen_debug_string: function (arg0, arg1) {\n            const ret = debugString(getObject(arg1));\n            const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            getInt32Memory0()[arg0 / 4 + 1] = len0;\n            getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n        },\n        __wbindgen_throw: function (arg0, arg1) {\n            throw new Error(getStringFromWasm0(arg0, arg1));\n        },\n        __wbindgen_memory: function () {\n            const ret = wasm.memory;\n            return addHeapObject(ret);\n        },\n        __wbindgen_closure_wrapper5954: function (arg0, arg1, arg2) {\n            const ret = makeMutClosure(arg0, arg1, 194, __wbg_adapter_30);\n            return addHeapObject(ret);\n        },\n    },\n};\n/**\n * Decompression callback\n *\n * @callback DecompressCallback\n * @param {Uint8Array} compressed\n * @return {Uint8Array} decompressed\n */\n/**\n * Options for instantiating a Wasm instance.\n * @typedef {Object} InstantiateOptions\n * @property {URL=} url - Optional url to the Wasm file to instantiate.\n * @property {DecompressCallback=} decompress - Callback to decompress the\n * raw Wasm file bytes before instantiating.\n */\n/** Instantiates an instance of the Wasm module returning its functions.\n * @remarks It is safe to call this multiple times and once successfully\n * loaded it will always return a reference to the same object.\n * @param {InstantiateOptions=} opts\n */\nasync function instantiate(opts) {\n    return (await instantiateWithInstance(opts)).exports;\n}\nlet instanceWithExports;\nlet lastLoadPromise;\n/** Instantiates an instance of the Wasm module along with its exports.\n * @remarks It is safe to call this multiple times and once successfully\n * loaded it will always return a reference to the same object.\n * @param {InstantiateOptions=} opts\n * @returns {Promise<{\n *   instance: WebAssembly.Instance;\n *   exports: { encrypt_with_password: typeof encrypt_with_password; decrypt_with_password: typeof decrypt_with_password; min_fee: typeof min_fee; encode_arbitrary_bytes_as_metadatum: typeof encode_arbitrary_bytes_as_metadatum; decode_arbitrary_bytes_from_metadatum: typeof decode_arbitrary_bytes_from_metadatum; encode_json_str_to_metadatum: typeof encode_json_str_to_metadatum; decode_metadatum_to_json_str: typeof decode_metadatum_to_json_str; encode_json_str_to_plutus_datum: typeof encode_json_str_to_plutus_datum; decode_plutus_datum_to_json_str: typeof decode_plutus_datum_to_json_str; make_daedalus_bootstrap_witness: typeof make_daedalus_bootstrap_witness; make_icarus_bootstrap_witness: typeof make_icarus_bootstrap_witness; make_vkey_witness: typeof make_vkey_witness; hash_auxiliary_data: typeof hash_auxiliary_data; hash_transaction: typeof hash_transaction; hash_plutus_data: typeof hash_plutus_data; hash_blake2b256: typeof hash_blake2b256; hash_blake2b224: typeof hash_blake2b224; hash_script_data: typeof hash_script_data; get_implicit_input: typeof get_implicit_input; get_deposit: typeof get_deposit; min_ada_required: typeof min_ada_required; encode_json_str_to_native_script: typeof encode_json_str_to_native_script; apply_params_to_plutus_script: typeof apply_params_to_plutus_script; Address : typeof Address ; AssetName : typeof AssetName ; AssetNames : typeof AssetNames ; Assets : typeof Assets ; AuxiliaryData : typeof AuxiliaryData ; AuxiliaryDataHash : typeof AuxiliaryDataHash ; AuxiliaryDataSet : typeof AuxiliaryDataSet ; BaseAddress : typeof BaseAddress ; BigInt : typeof BigInt ; BigNum : typeof BigNum ; Bip32PrivateKey : typeof Bip32PrivateKey ; Bip32PublicKey : typeof Bip32PublicKey ; Block : typeof Block ; BlockHash : typeof BlockHash ; Blockfrost : typeof Blockfrost ; BootstrapWitness : typeof BootstrapWitness ; BootstrapWitnesses : typeof BootstrapWitnesses ; ByronAddress : typeof ByronAddress ; Certificate : typeof Certificate ; Certificates : typeof Certificates ; ConstrPlutusData : typeof ConstrPlutusData ; CostModel : typeof CostModel ; Costmdls : typeof Costmdls ; DNSRecordAorAAAA : typeof DNSRecordAorAAAA ; DNSRecordSRV : typeof DNSRecordSRV ; Data : typeof Data ; DataHash : typeof DataHash ; Datum : typeof Datum ; Ed25519KeyHash : typeof Ed25519KeyHash ; Ed25519KeyHashes : typeof Ed25519KeyHashes ; Ed25519Signature : typeof Ed25519Signature ; EnterpriseAddress : typeof EnterpriseAddress ; ExUnitPrices : typeof ExUnitPrices ; ExUnits : typeof ExUnits ; GeneralTransactionMetadata : typeof GeneralTransactionMetadata ; GenesisDelegateHash : typeof GenesisDelegateHash ; GenesisHash : typeof GenesisHash ; GenesisHashes : typeof GenesisHashes ; GenesisKeyDelegation : typeof GenesisKeyDelegation ; Header : typeof Header ; HeaderBody : typeof HeaderBody ; Int : typeof Int ; Ipv4 : typeof Ipv4 ; Ipv6 : typeof Ipv6 ; KESSignature : typeof KESSignature ; KESVKey : typeof KESVKey ; Language : typeof Language ; Languages : typeof Languages ; LegacyDaedalusPrivateKey : typeof LegacyDaedalusPrivateKey ; LinearFee : typeof LinearFee ; MIRToStakeCredentials : typeof MIRToStakeCredentials ; MetadataList : typeof MetadataList ; MetadataMap : typeof MetadataMap ; Mint : typeof Mint ; MintAssets : typeof MintAssets ; MoveInstantaneousReward : typeof MoveInstantaneousReward ; MoveInstantaneousRewardsCert : typeof MoveInstantaneousRewardsCert ; MultiAsset : typeof MultiAsset ; MultiHostName : typeof MultiHostName ; NativeScript : typeof NativeScript ; NativeScripts : typeof NativeScripts ; NetworkId : typeof NetworkId ; NetworkInfo : typeof NetworkInfo ; Nonce : typeof Nonce ; OperationalCert : typeof OperationalCert ; PlutusData : typeof PlutusData ; PlutusList : typeof PlutusList ; PlutusMap : typeof PlutusMap ; PlutusScript : typeof PlutusScript ; PlutusScripts : typeof PlutusScripts ; PlutusWitness : typeof PlutusWitness ; Pointer : typeof Pointer ; PointerAddress : typeof PointerAddress ; PoolMetadata : typeof PoolMetadata ; PoolMetadataHash : typeof PoolMetadataHash ; PoolParams : typeof PoolParams ; PoolRegistration : typeof PoolRegistration ; PoolRetirement : typeof PoolRetirement ; PrivateKey : typeof PrivateKey ; ProposedProtocolParameterUpdates : typeof ProposedProtocolParameterUpdates ; ProtocolParamUpdate : typeof ProtocolParamUpdate ; ProtocolVersion : typeof ProtocolVersion ; PublicKey : typeof PublicKey ; PublicKeys : typeof PublicKeys ; Redeemer : typeof Redeemer ; RedeemerTag : typeof RedeemerTag ; RedeemerWitnessKey : typeof RedeemerWitnessKey ; Redeemers : typeof Redeemers ; Relay : typeof Relay ; Relays : typeof Relays ; RequiredWitnessSet : typeof RequiredWitnessSet ; RewardAddress : typeof RewardAddress ; RewardAddresses : typeof RewardAddresses ; Script : typeof Script ; ScriptAll : typeof ScriptAll ; ScriptAny : typeof ScriptAny ; ScriptDataHash : typeof ScriptDataHash ; ScriptHash : typeof ScriptHash ; ScriptHashes : typeof ScriptHashes ; ScriptNOfK : typeof ScriptNOfK ; ScriptPubkey : typeof ScriptPubkey ; ScriptRef : typeof ScriptRef ; ScriptWitness : typeof ScriptWitness ; SingleHostAddr : typeof SingleHostAddr ; SingleHostName : typeof SingleHostName ; StakeCredential : typeof StakeCredential ; StakeCredentials : typeof StakeCredentials ; StakeDelegation : typeof StakeDelegation ; StakeDeregistration : typeof StakeDeregistration ; StakeRegistration : typeof StakeRegistration ; Strings : typeof Strings ; TimelockExpiry : typeof TimelockExpiry ; TimelockStart : typeof TimelockStart ; Transaction : typeof Transaction ; TransactionBodies : typeof TransactionBodies ; TransactionBody : typeof TransactionBody ; TransactionBuilder : typeof TransactionBuilder ; TransactionBuilderConfig : typeof TransactionBuilderConfig ; TransactionBuilderConfigBuilder : typeof TransactionBuilderConfigBuilder ; TransactionHash : typeof TransactionHash ; TransactionIndexes : typeof TransactionIndexes ; TransactionInput : typeof TransactionInput ; TransactionInputs : typeof TransactionInputs ; TransactionMetadatum : typeof TransactionMetadatum ; TransactionMetadatumLabels : typeof TransactionMetadatumLabels ; TransactionOutput : typeof TransactionOutput ; TransactionOutputAmountBuilder : typeof TransactionOutputAmountBuilder ; TransactionOutputBuilder : typeof TransactionOutputBuilder ; TransactionOutputs : typeof TransactionOutputs ; TransactionUnspentOutput : typeof TransactionUnspentOutput ; TransactionUnspentOutputs : typeof TransactionUnspentOutputs ; TransactionWitnessSet : typeof TransactionWitnessSet ; TransactionWitnessSetBuilder : typeof TransactionWitnessSetBuilder ; TransactionWitnessSets : typeof TransactionWitnessSets ; UnitInterval : typeof UnitInterval ; Update : typeof Update ; Url : typeof Url ; VRFCert : typeof VRFCert ; VRFKeyHash : typeof VRFKeyHash ; VRFVKey : typeof VRFVKey ; Value : typeof Value ; Vkey : typeof Vkey ; Vkeys : typeof Vkeys ; Vkeywitness : typeof Vkeywitness ; Vkeywitnesses : typeof Vkeywitnesses ; Withdrawals : typeof Withdrawals  }\n * }>}\n */\nfunction instantiateWithInstance(opts) {\n    if (instanceWithExports != null) {\n        return Promise.resolve(instanceWithExports);\n    }\n    if (lastLoadPromise == null) {\n        lastLoadPromise = (async () => {\n            try {\n                const instance = (await instantiateModule(opts ?? {})).instance;\n                wasm = instance.exports;\n                cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n                cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n                instanceWithExports = {\n                    instance,\n                    exports: getWasmInstanceExports(),\n                };\n                return instanceWithExports;\n            }\n            finally {\n                lastLoadPromise = null;\n            }\n        })();\n    }\n    return lastLoadPromise;\n}\nfunction getWasmInstanceExports() {\n    return {\n        encrypt_with_password,\n        decrypt_with_password,\n        min_fee,\n        encode_arbitrary_bytes_as_metadatum,\n        decode_arbitrary_bytes_from_metadatum,\n        encode_json_str_to_metadatum,\n        decode_metadatum_to_json_str,\n        encode_json_str_to_plutus_datum,\n        decode_plutus_datum_to_json_str,\n        make_daedalus_bootstrap_witness,\n        make_icarus_bootstrap_witness,\n        make_vkey_witness,\n        hash_auxiliary_data,\n        hash_transaction,\n        hash_plutus_data,\n        hash_blake2b256,\n        hash_blake2b224,\n        hash_script_data,\n        get_implicit_input,\n        get_deposit,\n        min_ada_required,\n        encode_json_str_to_native_script,\n        apply_params_to_plutus_script,\n        Address,\n        AssetName,\n        AssetNames,\n        Assets,\n        AuxiliaryData,\n        AuxiliaryDataHash,\n        AuxiliaryDataSet,\n        BaseAddress,\n        BigInt,\n        BigNum,\n        Bip32PrivateKey,\n        Bip32PublicKey,\n        Block,\n        BlockHash,\n        Blockfrost,\n        BootstrapWitness,\n        BootstrapWitnesses,\n        ByronAddress,\n        Certificate,\n        Certificates,\n        ConstrPlutusData,\n        CostModel,\n        Costmdls,\n        DNSRecordAorAAAA,\n        DNSRecordSRV,\n        Data,\n        DataHash,\n        Datum,\n        Ed25519KeyHash,\n        Ed25519KeyHashes,\n        Ed25519Signature,\n        EnterpriseAddress,\n        ExUnitPrices,\n        ExUnits,\n        GeneralTransactionMetadata,\n        GenesisDelegateHash,\n        GenesisHash,\n        GenesisHashes,\n        GenesisKeyDelegation,\n        Header,\n        HeaderBody,\n        Int,\n        Ipv4,\n        Ipv6,\n        KESSignature,\n        KESVKey,\n        Language,\n        Languages,\n        LegacyDaedalusPrivateKey,\n        LinearFee,\n        MIRToStakeCredentials,\n        MetadataList,\n        MetadataMap,\n        Mint,\n        MintAssets,\n        MoveInstantaneousReward,\n        MoveInstantaneousRewardsCert,\n        MultiAsset,\n        MultiHostName,\n        NativeScript,\n        NativeScripts,\n        NetworkId,\n        NetworkInfo,\n        Nonce,\n        OperationalCert,\n        PlutusData,\n        PlutusList,\n        PlutusMap,\n        PlutusScript,\n        PlutusScripts,\n        PlutusWitness,\n        Pointer,\n        PointerAddress,\n        PoolMetadata,\n        PoolMetadataHash,\n        PoolParams,\n        PoolRegistration,\n        PoolRetirement,\n        PrivateKey,\n        ProposedProtocolParameterUpdates,\n        ProtocolParamUpdate,\n        ProtocolVersion,\n        PublicKey,\n        PublicKeys,\n        Redeemer,\n        RedeemerTag,\n        RedeemerWitnessKey,\n        Redeemers,\n        Relay,\n        Relays,\n        RequiredWitnessSet,\n        RewardAddress,\n        RewardAddresses,\n        Script,\n        ScriptAll,\n        ScriptAny,\n        ScriptDataHash,\n        ScriptHash,\n        ScriptHashes,\n        ScriptNOfK,\n        ScriptPubkey,\n        ScriptRef,\n        ScriptWitness,\n        SingleHostAddr,\n        SingleHostName,\n        StakeCredential,\n        StakeCredentials,\n        StakeDelegation,\n        StakeDeregistration,\n        StakeRegistration,\n        Strings,\n        TimelockExpiry,\n        TimelockStart,\n        Transaction,\n        TransactionBodies,\n        TransactionBody,\n        TransactionBuilder,\n        TransactionBuilderConfig,\n        TransactionBuilderConfigBuilder,\n        TransactionHash,\n        TransactionIndexes,\n        TransactionInput,\n        TransactionInputs,\n        TransactionMetadatum,\n        TransactionMetadatumLabels,\n        TransactionOutput,\n        TransactionOutputAmountBuilder,\n        TransactionOutputBuilder,\n        TransactionOutputs,\n        TransactionUnspentOutput,\n        TransactionUnspentOutputs,\n        TransactionWitnessSet,\n        TransactionWitnessSetBuilder,\n        TransactionWitnessSets,\n        UnitInterval,\n        Update,\n        Url,\n        VRFCert,\n        VRFKeyHash,\n        VRFVKey,\n        Value,\n        Vkey,\n        Vkeys,\n        Vkeywitness,\n        Vkeywitnesses,\n        Withdrawals,\n    };\n}\n/** Gets if the Wasm module has been instantiated. */\nfunction isInstantiated() {\n    return instanceWithExports != null;\n}\n/**\n * @param {InstantiateOptions} opts\n */\nasync function instantiateModule(opts) {\n    // Temporary exception for fresh framework\n    const wasmUrl = \"file:///home/alphonzoescolar/Documents/SAIB-PROJECTS/teddyswap/TeddySwap.Offchain/src/TeddySwap.UI/node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js\".includes(\"_frsh\")\n        ? opts.url\n        : new URL(/* asset import */ __webpack_require__(/*! cardano_multiplatform_lib_bg.wasm */ \"./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib_bg.wasm\"), __webpack_require__.b);\n    const decompress = opts.decompress;\n    const isFile = wasmUrl.protocol === \"file:\";\n    // make file urls work in Node via dnt\n    const isNode = globalThis.process?.versions?.node != null;\n    if (isNode && isFile) {\n        // the deno global will be shimmed by dnt\n        const wasmCode = await Deno.readFile(wasmUrl);\n        return WebAssembly.instantiate(decompress ? decompress(wasmCode) : wasmCode, imports);\n    }\n    switch (wasmUrl.protocol) {\n        case \"file:\":\n        case \"https:\":\n        case \"http:\": {\n            if (isFile) {\n                if (typeof Deno !== \"object\") {\n                    throw new Error(\"file urls are not supported in this environment\");\n                }\n                if (\"permissions\" in Deno) {\n                    await Deno.permissions.request({ name: \"read\", path: wasmUrl });\n                }\n            }\n            else if (typeof Deno === \"object\" && \"permissions\" in Deno) {\n                await Deno.permissions.request({ name: \"net\", host: wasmUrl.host });\n            }\n            const wasmResponse = await fetch(wasmUrl);\n            if (decompress) {\n                const wasmCode = new Uint8Array(await wasmResponse.arrayBuffer());\n                return WebAssembly.instantiate(decompress(wasmCode), imports);\n            }\n            if (isFile ||\n                wasmResponse.headers.get(\"content-type\")?.toLowerCase()\n                    .startsWith(\"application/wasm\")) {\n                return WebAssembly.instantiateStreaming(wasmResponse, imports);\n            }\n            else {\n                return WebAssembly.instantiate(await wasmResponse.arrayBuffer(), imports);\n            }\n        }\n        default:\n            throw new Error(`Unsupported protocol: ${wasmUrl.protocol}`);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/libs/cardano_multiplatform_lib/cardano_multiplatform_lib.generated.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/core/mod.js":
/*!********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/mod.js ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"C\": () => (/* reexport safe */ _core_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   \"M\": () => (/* reexport safe */ _core_js__WEBPACK_IMPORTED_MODULE_0__.M)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"./node_modules/lucid-cardano/esm/src/core/core.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_js__WEBPACK_IMPORTED_MODULE_0__]);\n_core_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/lucid/lucid.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/lucid/lucid.js ***!
  \***********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Lucid\": () => (/* binding */ Lucid)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\n/* harmony import */ var _tx_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tx.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx.js\");\n/* harmony import */ var _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tx_complete.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx_complete.js\");\n/* harmony import */ var _misc_wallet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../misc/wallet.js */ \"./node_modules/lucid-cardano/esm/src/misc/wallet.js\");\n/* harmony import */ var _misc_sign_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/sign_data.js */ \"./node_modules/lucid-cardano/esm/src/misc/sign_data.js\");\n/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./message.js */ \"./node_modules/lucid-cardano/esm/src/lucid/message.js\");\n/* harmony import */ var _plutus_time_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../plutus/time.js */ \"./node_modules/lucid-cardano/esm/src/plutus/time.js\");\n/* harmony import */ var _plutus_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../plutus/data.js */ \"./node_modules/lucid-cardano/esm/src/plutus/data.js\");\n/* harmony import */ var _provider_emulator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../provider/emulator.js */ \"./node_modules/lucid-cardano/esm/src/provider/emulator.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__, _tx_js__WEBPACK_IMPORTED_MODULE_2__, _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__, _misc_wallet_js__WEBPACK_IMPORTED_MODULE_4__, _misc_sign_data_js__WEBPACK_IMPORTED_MODULE_5__, _message_js__WEBPACK_IMPORTED_MODULE_6__, _plutus_data_js__WEBPACK_IMPORTED_MODULE_8__, _provider_emulator_js__WEBPACK_IMPORTED_MODULE_9__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__, _tx_js__WEBPACK_IMPORTED_MODULE_2__, _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__, _misc_wallet_js__WEBPACK_IMPORTED_MODULE_4__, _misc_sign_data_js__WEBPACK_IMPORTED_MODULE_5__, _message_js__WEBPACK_IMPORTED_MODULE_6__, _plutus_data_js__WEBPACK_IMPORTED_MODULE_8__, _provider_emulator_js__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\nclass Lucid {\n    constructor() {\n        Object.defineProperty(this, \"txBuilderConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"wallet\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"provider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"network\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Mainnet\"\n        });\n        Object.defineProperty(this, \"utils\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    static async new(provider, network) {\n        const lucid = new this();\n        if (network)\n            lucid.network = network;\n        if (provider) {\n            lucid.provider = provider;\n            const protocolParameters = await provider.getProtocolParameters();\n            if (lucid.provider instanceof _provider_emulator_js__WEBPACK_IMPORTED_MODULE_9__.Emulator) {\n                lucid.network = \"Custom\";\n                _plutus_time_js__WEBPACK_IMPORTED_MODULE_7__.SLOT_CONFIG_NETWORK[lucid.network] = {\n                    zeroTime: lucid.provider.now(),\n                    zeroSlot: 0,\n                    slotLength: 1000,\n                };\n            }\n            const slotConfig = _plutus_time_js__WEBPACK_IMPORTED_MODULE_7__.SLOT_CONFIG_NETWORK[lucid.network];\n            lucid.txBuilderConfig = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionBuilderConfigBuilder[\"new\"]()\n                .coins_per_utxo_byte(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.coinsPerUtxoByte.toString()))\n                .fee_algo(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.LinearFee[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.minFeeA.toString()), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.minFeeB.toString())))\n                .key_deposit(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.keyDeposit.toString()))\n                .pool_deposit(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.poolDeposit.toString()))\n                .max_tx_size(protocolParameters.maxTxSize)\n                .max_value_size(protocolParameters.maxValSize)\n                .collateral_percentage(protocolParameters.collateralPercentage)\n                .max_collateral_inputs(protocolParameters.maxCollateralInputs)\n                .max_tx_ex_units(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ExUnits[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.maxTxExMem.toString()), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(protocolParameters.maxTxExSteps.toString())))\n                .ex_unit_prices(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ExUnitPrices.from_float(protocolParameters.priceMem, protocolParameters.priceStep))\n                .slot_config(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(slotConfig.zeroTime.toString()), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(slotConfig.zeroSlot.toString()), slotConfig.slotLength)\n                .blockfrost(\n            // We have Aiken now as native plutus core engine (primary), but we still support blockfrost (secondary) in case of bugs.\n            _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Blockfrost[\"new\"](\n            // deno-lint-ignore no-explicit-any\n            (provider?.url || \"\") + \"/utils/txs/evaluate\", \n            // deno-lint-ignore no-explicit-any\n            provider?.projectId || \"\"))\n                .costmdls((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.createCostModels)(protocolParameters.costModels))\n                .build();\n        }\n        lucid.utils = new _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.Utils(lucid);\n        return lucid;\n    }\n    /**\n     * Switch provider and/or network.\n     * If provider or network unset, no overwriting happens. Provider or network from current instance are taken then.\n     */\n    async switchProvider(provider, network) {\n        if (this.network === \"Custom\") {\n            throw new Error(\"Cannot switch when on custom network.\");\n        }\n        const lucid = await Lucid.new(provider, network);\n        this.txBuilderConfig = lucid.txBuilderConfig;\n        this.provider = provider || this.provider;\n        this.network = network || this.network;\n        this.wallet = lucid.wallet;\n        return this;\n    }\n    newTx() {\n        return new _tx_js__WEBPACK_IMPORTED_MODULE_2__.Tx(this);\n    }\n    fromTx(tx) {\n        return new _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__.TxComplete(this, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Transaction.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(tx)));\n    }\n    /** Signs a message. Expects the payload to be Hex encoded. */\n    newMessage(address, payload) {\n        return new _message_js__WEBPACK_IMPORTED_MODULE_6__.Message(this, address, payload);\n    }\n    /** Verify a message. Expects the payload to be Hex encoded. */\n    verifyMessage(address, payload, signedMessage) {\n        const { paymentCredential, stakeCredential, address: { hex: addressHex } } = this.utils.getAddressDetails(address);\n        const keyHash = paymentCredential?.hash || stakeCredential?.hash;\n        if (!keyHash)\n            throw new Error(\"Not a valid address provided.\");\n        return (0,_misc_sign_data_js__WEBPACK_IMPORTED_MODULE_5__.verifyData)(addressHex, keyHash, payload, signedMessage);\n    }\n    currentSlot() {\n        return this.utils.unixTimeToSlot(Date.now());\n    }\n    utxosAt(addressOrCredential) {\n        return this.provider.getUtxos(addressOrCredential);\n    }\n    utxosAtWithUnit(addressOrCredential, unit) {\n        return this.provider.getUtxosWithUnit(addressOrCredential, unit);\n    }\n    /** Unit needs to be an NFT (or optionally the entire supply in one UTxO). */\n    utxoByUnit(unit) {\n        return this.provider.getUtxoByUnit(unit);\n    }\n    utxosByOutRef(outRefs) {\n        return this.provider.getUtxosByOutRef(outRefs);\n    }\n    delegationAt(rewardAddress) {\n        return this.provider.getDelegation(rewardAddress);\n    }\n    awaitTx(txHash, checkInterval = 3000) {\n        return this.provider.awaitTx(txHash, checkInterval);\n    }\n    async datumOf(utxo, shape) {\n        if (!utxo.datum) {\n            if (!utxo.datumHash) {\n                throw new Error(\"This UTxO does not have a datum hash.\");\n            }\n            utxo.datum = await this.provider.getDatum(utxo.datumHash);\n        }\n        return shape ? _plutus_data_js__WEBPACK_IMPORTED_MODULE_8__.Data.from(utxo.datum, shape) : utxo.datum;\n    }\n    /**\n     * Cardano Private key in bech32; not the BIP32 private key or any key that is not fully derived.\n     * Only an Enteprise address (without stake credential) is derived.\n     */\n    selectWalletFromPrivateKey(privateKey) {\n        const priv = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(privateKey);\n        const pubKeyHash = priv.to_public().hash();\n        this.wallet = {\n            // deno-lint-ignore require-await\n            address: async () => _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.EnterpriseAddress[\"new\"](this.network === \"Mainnet\" ? 1 : 0, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(pubKeyHash))\n                .to_address()\n                .to_bech32(undefined),\n            // deno-lint-ignore require-await\n            rewardAddress: async () => null,\n            getUtxos: async () => {\n                return await this.utxosAt((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf)(await this.wallet.address()));\n            },\n            getUtxosCore: async () => {\n                const utxos = await this.utxosAt((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf)(await this.wallet.address()));\n                const coreUtxos = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutputs[\"new\"]();\n                utxos.forEach((utxo) => {\n                    coreUtxos.add((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.utxoToCore)(utxo));\n                });\n                return coreUtxos;\n            },\n            // deno-lint-ignore require-await\n            getDelegation: async () => {\n                return { poolId: null, rewards: 0n };\n            },\n            // deno-lint-ignore require-await\n            signTx: async (tx) => {\n                const witness = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.make_vkey_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(tx.body()), priv);\n                const txWitnessSetBuilder = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionWitnessSetBuilder[\"new\"]();\n                txWitnessSetBuilder.add_vkey(witness);\n                return txWitnessSetBuilder.build();\n            },\n            // deno-lint-ignore require-await\n            signMessage: async (address, payload) => {\n                const { paymentCredential, address: { hex: hexAddress } } = this.utils\n                    .getAddressDetails(address);\n                const keyHash = paymentCredential?.hash;\n                const originalKeyHash = pubKeyHash.to_hex();\n                if (!keyHash || keyHash !== originalKeyHash) {\n                    throw new Error(`Cannot sign message for address: ${address}.`);\n                }\n                return (0,_misc_sign_data_js__WEBPACK_IMPORTED_MODULE_5__.signData)(hexAddress, payload, privateKey);\n            },\n            submitTx: async (tx) => {\n                return await this.provider.submitTx(tx);\n            },\n        };\n        return this;\n    }\n    selectWallet(api) {\n        const getAddressHex = async () => {\n            const [addressHex] = await api.getUsedAddresses();\n            if (addressHex)\n                return addressHex;\n            const [unusedAddressHex] = await api.getUnusedAddresses();\n            return unusedAddressHex;\n        };\n        this.wallet = {\n            address: async () => _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Address.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(await getAddressHex())).to_bech32(undefined),\n            rewardAddress: async () => {\n                const [rewardAddressHex] = await api.getRewardAddresses();\n                const rewardAddress = rewardAddressHex\n                    ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress.from_address(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Address.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(rewardAddressHex)))\n                        .to_address()\n                        .to_bech32(undefined)\n                    : null;\n                return rewardAddress;\n            },\n            getUtxos: async () => {\n                const utxos = ((await api.getUtxos()) || []).map((utxo) => {\n                    const parsedUtxo = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutput.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(utxo));\n                    return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.coreToUtxo)(parsedUtxo);\n                });\n                return utxos;\n            },\n            getUtxosCore: async () => {\n                const utxos = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutputs[\"new\"]();\n                ((await api.getUtxos()) || []).forEach((utxo) => {\n                    utxos.add(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutput.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(utxo)));\n                });\n                return utxos;\n            },\n            getDelegation: async () => {\n                const rewardAddr = await this.wallet.rewardAddress();\n                return rewardAddr\n                    ? await this.delegationAt(rewardAddr)\n                    : { poolId: null, rewards: 0n };\n            },\n            signTx: async (tx) => {\n                const witnessSet = await api.signTx((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(tx.to_bytes()), true);\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionWitnessSet.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(witnessSet));\n            },\n            signMessage: async (address, payload) => {\n                const hexAddress = (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Address.from_bech32(address).to_bytes());\n                return await api.signData(hexAddress, payload);\n            },\n            submitTx: async (tx) => {\n                const txHash = await api.submitTx(tx);\n                return txHash;\n            },\n        };\n        return this;\n    }\n    /**\n     * Emulates a wallet by constructing it with the utxos and an address.\n     * If utxos are not set, utxos are fetched from the provided address.\n     */\n    selectWalletFrom({ address, utxos, rewardAddress, }) {\n        const addressDetails = this.utils.getAddressDetails(address);\n        this.wallet = {\n            // deno-lint-ignore require-await\n            address: async () => address,\n            // deno-lint-ignore require-await\n            rewardAddress: async () => {\n                const rewardAddr = !rewardAddress && addressDetails.stakeCredential\n                    ? (() => {\n                        if (addressDetails.stakeCredential.type === \"Key\") {\n                            return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress[\"new\"](this.network === \"Mainnet\" ? 1 : 0, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_hex(addressDetails.stakeCredential.hash)))\n                                .to_address()\n                                .to_bech32(undefined);\n                        }\n                        return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress[\"new\"](this.network === \"Mainnet\" ? 1 : 0, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_hex(addressDetails.stakeCredential.hash)))\n                            .to_address()\n                            .to_bech32(undefined);\n                    })()\n                    : rewardAddress;\n                return rewardAddr || null;\n            },\n            getUtxos: async () => {\n                return utxos ? utxos : await this.utxosAt((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf)(address));\n            },\n            getUtxosCore: async () => {\n                const coreUtxos = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutputs[\"new\"]();\n                (utxos ? utxos : await this.utxosAt((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf)(address)))\n                    .forEach((utxo) => coreUtxos.add((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.utxoToCore)(utxo)));\n                return coreUtxos;\n            },\n            getDelegation: async () => {\n                const rewardAddr = await this.wallet.rewardAddress();\n                return rewardAddr\n                    ? await this.delegationAt(rewardAddr)\n                    : { poolId: null, rewards: 0n };\n            },\n            // deno-lint-ignore require-await\n            signTx: async () => {\n                throw new Error(\"Not implemented\");\n            },\n            // deno-lint-ignore require-await\n            signMessage: async () => {\n                throw new Error(\"Not implemented\");\n            },\n            submitTx: async (tx) => {\n                return await this.provider.submitTx(tx);\n            },\n        };\n        return this;\n    }\n    /**\n     * Select wallet from a seed phrase (e.g. 15 or 24 words). You have the option to choose between a Base address (with stake credential)\n     * and Enterprise address (without stake credential). You can also decide which account index to derive. By default account 0 is derived.\n     */\n    selectWalletFromSeed(seed, options) {\n        const { address, rewardAddress, paymentKey, stakeKey } = (0,_misc_wallet_js__WEBPACK_IMPORTED_MODULE_4__.walletFromSeed)(seed, {\n            addressType: options?.addressType || \"Base\",\n            accountIndex: options?.accountIndex || 0,\n            password: options?.password,\n            network: this.network,\n        });\n        const paymentKeyHash = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(paymentKey).to_public()\n            .hash().to_hex();\n        const stakeKeyHash = stakeKey\n            ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(stakeKey).to_public().hash().to_hex()\n            : \"\";\n        const privKeyHashMap = {\n            [paymentKeyHash]: paymentKey,\n            [stakeKeyHash]: stakeKey,\n        };\n        this.wallet = {\n            // deno-lint-ignore require-await\n            address: async () => address,\n            // deno-lint-ignore require-await\n            rewardAddress: async () => rewardAddress || null,\n            // deno-lint-ignore require-await\n            getUtxos: async () => this.utxosAt((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf)(address)),\n            getUtxosCore: async () => {\n                const coreUtxos = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutputs[\"new\"]();\n                (await this.utxosAt((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf)(address))).forEach((utxo) => coreUtxos.add((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.utxoToCore)(utxo)));\n                return coreUtxos;\n            },\n            getDelegation: async () => {\n                const rewardAddr = await this.wallet.rewardAddress();\n                return rewardAddr\n                    ? await this.delegationAt(rewardAddr)\n                    : { poolId: null, rewards: 0n };\n            },\n            signTx: async (tx) => {\n                const utxos = await this.utxosAt(address);\n                const ownKeyHashes = [paymentKeyHash, stakeKeyHash];\n                const usedKeyHashes = (0,_misc_wallet_js__WEBPACK_IMPORTED_MODULE_4__.discoverOwnUsedTxKeyHashes)(tx, ownKeyHashes, utxos);\n                const txWitnessSetBuilder = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionWitnessSetBuilder[\"new\"]();\n                usedKeyHashes.forEach((keyHash) => {\n                    const witness = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.make_vkey_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(tx.body()), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(privKeyHashMap[keyHash]));\n                    txWitnessSetBuilder.add_vkey(witness);\n                });\n                return txWitnessSetBuilder.build();\n            },\n            // deno-lint-ignore require-await\n            signMessage: async (address, payload) => {\n                const { paymentCredential, stakeCredential, address: { hex: hexAddress }, } = this.utils\n                    .getAddressDetails(address);\n                const keyHash = paymentCredential?.hash || stakeCredential?.hash;\n                const privateKey = privKeyHashMap[keyHash];\n                if (!privateKey) {\n                    throw new Error(`Cannot sign message for address: ${address}.`);\n                }\n                return (0,_misc_sign_data_js__WEBPACK_IMPORTED_MODULE_5__.signData)(hexAddress, payload, privateKey);\n            },\n            submitTx: async (tx) => {\n                return await this.provider.submitTx(tx);\n            },\n        };\n        return this;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/lucid/lucid.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/lucid/message.js":
/*!*************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/lucid/message.js ***!
  \*************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Message\": () => (/* binding */ Message)\n/* harmony export */ });\n/* harmony import */ var _misc_sign_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/sign_data.js */ \"./node_modules/lucid-cardano/esm/src/misc/sign_data.js\");\n/* harmony import */ var _mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mod.js */ \"./node_modules/lucid-cardano/esm/src/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_misc_sign_data_js__WEBPACK_IMPORTED_MODULE_0__, _mod_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_misc_sign_data_js__WEBPACK_IMPORTED_MODULE_0__, _mod_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nclass Message {\n    constructor(lucid, address, payload) {\n        Object.defineProperty(this, \"lucid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"address\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"payload\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lucid = lucid;\n        this.address = address;\n        this.payload = payload;\n    }\n    /** Sign message with selected wallet. */\n    sign() {\n        return this.lucid.wallet.signMessage(this.address, this.payload);\n    }\n    /** Sign message with a separate private key. */\n    signWithPrivateKey(privateKey) {\n        const { paymentCredential, stakeCredential, address: { hex: hexAddress } } = this.lucid.utils.getAddressDetails(this.address);\n        const keyHash = paymentCredential?.hash || stakeCredential?.hash;\n        const keyHashOriginal = _mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PrivateKey.from_bech32(privateKey).to_public()\n            .hash().to_hex();\n        if (!keyHash || keyHash !== keyHashOriginal) {\n            throw new Error(`Cannot sign message for address: ${this.address}.`);\n        }\n        return (0,_misc_sign_data_js__WEBPACK_IMPORTED_MODULE_0__.signData)(hexAddress, this.payload, privateKey);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/lucid/message.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/lucid/mod.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/lucid/mod.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Lucid\": () => (/* reexport safe */ _lucid_js__WEBPACK_IMPORTED_MODULE_0__.Lucid),\n/* harmony export */   \"Tx\": () => (/* reexport safe */ _tx_js__WEBPACK_IMPORTED_MODULE_1__.Tx),\n/* harmony export */   \"TxComplete\": () => (/* reexport safe */ _tx_complete_js__WEBPACK_IMPORTED_MODULE_2__.TxComplete),\n/* harmony export */   \"TxSigned\": () => (/* reexport safe */ _tx_signed_js__WEBPACK_IMPORTED_MODULE_3__.TxSigned)\n/* harmony export */ });\n/* harmony import */ var _lucid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lucid.js */ \"./node_modules/lucid-cardano/esm/src/lucid/lucid.js\");\n/* harmony import */ var _tx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tx.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx.js\");\n/* harmony import */ var _tx_complete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tx_complete.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx_complete.js\");\n/* harmony import */ var _tx_signed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tx_signed.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx_signed.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lucid_js__WEBPACK_IMPORTED_MODULE_0__, _tx_js__WEBPACK_IMPORTED_MODULE_1__, _tx_complete_js__WEBPACK_IMPORTED_MODULE_2__, _tx_signed_js__WEBPACK_IMPORTED_MODULE_3__]);\n([_lucid_js__WEBPACK_IMPORTED_MODULE_0__, _tx_js__WEBPACK_IMPORTED_MODULE_1__, _tx_complete_js__WEBPACK_IMPORTED_MODULE_2__, _tx_signed_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/lucid/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/lucid/tx.js":
/*!********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/lucid/tx.js ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tx\": () => (/* binding */ Tx)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"./node_modules/lucid-cardano/esm/src/utils/utils.js\");\n/* harmony import */ var _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tx_complete.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx_complete.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__, _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__, _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__, _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__, _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nclass Tx {\n    constructor(lucid) {\n        Object.defineProperty(this, \"txBuilder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Stores the tx instructions, which get executed after calling .complete() */\n        Object.defineProperty(this, \"tasks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lucid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lucid = lucid;\n        this.txBuilder = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionBuilder[\"new\"](this.lucid.txBuilderConfig);\n        this.tasks = [];\n    }\n    /** Read data from utxos. These utxos are only referenced and not spent. */\n    readFrom(utxos) {\n        this.tasks.push(async (that) => {\n            for (const utxo of utxos) {\n                if (utxo.datumHash) {\n                    utxo.datum = await that.lucid.datumOf(utxo);\n                    // Add datum to witness set, so it can be read from validators\n                    const plutusData = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(utxo.datum));\n                    that.txBuilder.add_plutus_data(plutusData);\n                }\n                const coreUtxo = (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.utxoToCore)(utxo);\n                that.txBuilder.add_reference_input(coreUtxo);\n            }\n        });\n        return this;\n    }\n    /**\n     * A public key or native script input.\n     * With redeemer it's a plutus script input.\n     */\n    collectFrom(utxos, redeemer) {\n        this.tasks.push(async (that) => {\n            for (const utxo of utxos) {\n                if (utxo.datumHash && !utxo.datum) {\n                    utxo.datum = await that.lucid.datumOf(utxo);\n                }\n                const coreUtxo = (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.utxoToCore)(utxo);\n                that.txBuilder.add_input(coreUtxo, redeemer &&\n                    _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptWitness.new_plutus_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusWitness[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(redeemer)), utxo.datumHash && utxo.datum\n                        ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(utxo.datum))\n                        : undefined, undefined)));\n            }\n        });\n        return this;\n    }\n    /**\n     * All assets should be of the same policy id.\n     * You can chain mintAssets functions together if you need to mint assets with different policy ids.\n     * If the plutus script doesn't need a redeemer, you still need to specifiy the void redeemer.\n     */\n    mintAssets(assets, redeemer) {\n        this.tasks.push((that) => {\n            const units = Object.keys(assets);\n            const policyId = units[0].slice(0, 56);\n            const mintAssets = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.MintAssets[\"new\"]();\n            units.forEach((unit) => {\n                if (unit.slice(0, 56) !== policyId) {\n                    throw new Error(\"Only one policy id allowed. You can chain multiple mintAssets functions together if you need to mint assets with different policy ids.\");\n                }\n                mintAssets.insert(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.AssetName[\"new\"]((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(unit.slice(56))), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Int.from_str(assets[unit].toString()));\n            });\n            const scriptHash = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(policyId));\n            that.txBuilder.add_mint(scriptHash, mintAssets, redeemer\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptWitness.new_plutus_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusWitness[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(redeemer)), undefined, undefined))\n                : undefined);\n        });\n        return this;\n    }\n    /** Pay to a public key or native script address. */\n    payToAddress(address, assets) {\n        this.tasks.push((that) => {\n            const output = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionOutput[\"new\"](addressFromWithNetworkCheck(address, that.lucid), (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.assetsToValue)(assets));\n            that.txBuilder.add_output(output);\n        });\n        return this;\n    }\n    /** Pay to a public key or native script address with datum or scriptRef. */\n    payToAddressWithData(address, outputData, assets) {\n        this.tasks.push((that) => {\n            if (typeof outputData === \"string\") {\n                outputData = { asHash: outputData };\n            }\n            if ([outputData.hash, outputData.asHash, outputData.inline].filter((b) => b)\n                .length > 1) {\n                throw new Error(\"Not allowed to set hash, asHash and inline at the same time.\");\n            }\n            const output = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionOutput[\"new\"](addressFromWithNetworkCheck(address, that.lucid), (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.assetsToValue)(assets));\n            if (outputData.hash) {\n                output.set_datum(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Datum.new_data_hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.DataHash.from_hex(outputData.hash)));\n            }\n            else if (outputData.asHash) {\n                const plutusData = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(outputData.asHash));\n                output.set_datum(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Datum.new_data_hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_plutus_data(plutusData)));\n                that.txBuilder.add_plutus_data(plutusData);\n            }\n            else if (outputData.inline) {\n                const plutusData = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(outputData.inline));\n                output.set_datum(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Datum.new_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Data[\"new\"](plutusData)));\n            }\n            const script = outputData.scriptRef;\n            if (script) {\n                output.set_script_ref((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toScriptRef)(script));\n            }\n            that.txBuilder.add_output(output);\n        });\n        return this;\n    }\n    /** Pay to a plutus script address with datum or scriptRef. */\n    payToContract(address, outputData, assets) {\n        if (typeof outputData === \"string\") {\n            outputData = { asHash: outputData };\n        }\n        if (!(outputData.hash || outputData.asHash || outputData.inline)) {\n            throw new Error(\"No datum set. Script output becomes unspendable without datum.\");\n        }\n        return this.payToAddressWithData(address, outputData, assets);\n    }\n    /** Delegate to a stake pool. */\n    delegateTo(rewardAddress, poolId, redeemer) {\n        this.tasks.push((that) => {\n            const addressDetails = that.lucid.utils.getAddressDetails(rewardAddress);\n            if (addressDetails.type !== \"Reward\" ||\n                !addressDetails.stakeCredential) {\n                throw new Error(\"Not a reward address provided.\");\n            }\n            const credential = addressDetails.stakeCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(addressDetails.stakeCredential.hash)))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(addressDetails.stakeCredential.hash)));\n            that.txBuilder.add_certificate(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Certificate.new_stake_delegation(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeDelegation[\"new\"](credential, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bech32(poolId))), redeemer\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptWitness.new_plutus_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusWitness[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(redeemer)), undefined, undefined))\n                : undefined);\n        });\n        return this;\n    }\n    /** Register a reward address in order to delegate to a pool and receive rewards. */\n    registerStake(rewardAddress) {\n        this.tasks.push((that) => {\n            const addressDetails = that.lucid.utils.getAddressDetails(rewardAddress);\n            if (addressDetails.type !== \"Reward\" ||\n                !addressDetails.stakeCredential) {\n                throw new Error(\"Not a reward address provided.\");\n            }\n            const credential = addressDetails.stakeCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(addressDetails.stakeCredential.hash)))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(addressDetails.stakeCredential.hash)));\n            that.txBuilder.add_certificate(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Certificate.new_stake_registration(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeRegistration[\"new\"](credential)), undefined);\n        });\n        return this;\n    }\n    /** Deregister a reward address. */\n    deregisterStake(rewardAddress, redeemer) {\n        this.tasks.push((that) => {\n            const addressDetails = that.lucid.utils.getAddressDetails(rewardAddress);\n            if (addressDetails.type !== \"Reward\" ||\n                !addressDetails.stakeCredential) {\n                throw new Error(\"Not a reward address provided.\");\n            }\n            const credential = addressDetails.stakeCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(addressDetails.stakeCredential.hash)))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(addressDetails.stakeCredential.hash)));\n            that.txBuilder.add_certificate(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Certificate.new_stake_deregistration(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeDeregistration[\"new\"](credential)), redeemer\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptWitness.new_plutus_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusWitness[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(redeemer)), undefined, undefined))\n                : undefined);\n        });\n        return this;\n    }\n    /** Register a stake pool. A pool deposit is required. The metadataUrl needs to be hosted already before making the registration. */\n    registerPool(poolParams) {\n        this.tasks.push(async (that) => {\n            const poolRegistration = await createPoolRegistration(poolParams, that.lucid);\n            const certificate = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Certificate.new_pool_registration(poolRegistration);\n            that.txBuilder.add_certificate(certificate, undefined);\n        });\n        return this;\n    }\n    /** Update a stake pool. No pool deposit is required. The metadataUrl needs to be hosted already before making the update. */\n    updatePool(poolParams) {\n        this.tasks.push(async (that) => {\n            const poolRegistration = await createPoolRegistration(poolParams, that.lucid);\n            // This flag makes sure a pool deposit is not required\n            poolRegistration.set_is_update(true);\n            const certificate = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Certificate.new_pool_registration(poolRegistration);\n            that.txBuilder.add_certificate(certificate, undefined);\n        });\n        return this;\n    }\n    /**\n     * Retire a stake pool. The epoch needs to be the greater than the current epoch + 1 and less than current epoch + eMax.\n     * The pool deposit will be sent to reward address as reward after full retirement of the pool.\n     */\n    retirePool(poolId, epoch) {\n        this.tasks.push((that) => {\n            const certificate = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Certificate.new_pool_retirement(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PoolRetirement[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bech32(poolId), epoch));\n            that.txBuilder.add_certificate(certificate, undefined);\n        });\n        return this;\n    }\n    withdraw(rewardAddress, amount, redeemer) {\n        this.tasks.push((that) => {\n            that.txBuilder.add_withdrawal(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress.from_address(addressFromWithNetworkCheck(rewardAddress, that.lucid)), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(amount.toString()), redeemer\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptWitness.new_plutus_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusWitness[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(redeemer)), undefined, undefined))\n                : undefined);\n        });\n        return this;\n    }\n    /**\n     * Needs to be a public key address.\n     * The PaymentKeyHash is taken when providing a Base, Enterprise or Pointer address.\n     * The StakeKeyHash is taken when providing a Reward address.\n     */\n    addSigner(address) {\n        const addressDetails = this.lucid.utils.getAddressDetails(address);\n        if (!addressDetails.paymentCredential && !addressDetails.stakeCredential) {\n            throw new Error(\"Not a valid address.\");\n        }\n        const credential = addressDetails.type === \"Reward\"\n            ? addressDetails.stakeCredential\n            : addressDetails.paymentCredential;\n        if (credential.type === \"Script\") {\n            throw new Error(\"Only key hashes are allowed as signers.\");\n        }\n        return this.addSignerKey(credential.hash);\n    }\n    /** Add a payment or stake key hash as a required signer of the transaction. */\n    addSignerKey(keyHash) {\n        this.tasks.push((that) => {\n            that.txBuilder.add_required_signer(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(keyHash)));\n        });\n        return this;\n    }\n    validFrom(unixTime) {\n        this.tasks.push((that) => {\n            const slot = that.lucid.utils.unixTimeToSlot(unixTime);\n            that.txBuilder.set_validity_start_interval(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(slot.toString()));\n        });\n        return this;\n    }\n    validTo(unixTime) {\n        this.tasks.push((that) => {\n            const slot = that.lucid.utils.unixTimeToSlot(unixTime);\n            that.txBuilder.set_ttl(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(slot.toString()));\n        });\n        return this;\n    }\n    attachMetadata(label, metadata) {\n        this.tasks.push((that) => {\n            that.txBuilder.add_json_metadatum(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(label.toString()), JSON.stringify(metadata));\n        });\n        return this;\n    }\n    /** Converts strings to bytes if prefixed with **'0x'**. */\n    attachMetadataWithConversion(label, metadata) {\n        this.tasks.push((that) => {\n            that.txBuilder.add_json_metadatum_with_schema(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(label.toString()), JSON.stringify(metadata), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.MetadataJsonSchema.BasicConversions);\n        });\n        return this;\n    }\n    /** Explicitely set the network id in the transaction body. */\n    addNetworkId(id) {\n        this.tasks.push((that) => {\n            that.txBuilder.set_network_id(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.NetworkId.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(id.toString(16).padStart(2, \"0\"))));\n        });\n        return this;\n    }\n    attachSpendingValidator(spendingValidator) {\n        this.tasks.push((that) => {\n            attachScript(that, spendingValidator);\n        });\n        return this;\n    }\n    attachMintingPolicy(mintingPolicy) {\n        this.tasks.push((that) => {\n            attachScript(that, mintingPolicy);\n        });\n        return this;\n    }\n    attachCertificateValidator(certValidator) {\n        this.tasks.push((that) => {\n            attachScript(that, certValidator);\n        });\n        return this;\n    }\n    attachWithdrawalValidator(withdrawalValidator) {\n        this.tasks.push((that) => {\n            attachScript(that, withdrawalValidator);\n        });\n        return this;\n    }\n    /** Compose transactions. */\n    compose(tx) {\n        if (tx)\n            this.tasks = this.tasks.concat(tx.tasks);\n        return this;\n    }\n    async complete(options) {\n        if ([\n            options?.change?.outputData?.hash,\n            options?.change?.outputData?.asHash,\n            options?.change?.outputData?.inline,\n        ].filter((b) => b)\n            .length > 1) {\n            throw new Error(\"Not allowed to set hash, asHash and inline at the same time.\");\n        }\n        let task = this.tasks.shift();\n        while (task) {\n            await task(this);\n            task = this.tasks.shift();\n        }\n        const utxos = await this.lucid.wallet.getUtxosCore();\n        const changeAddress = addressFromWithNetworkCheck(options?.change?.address || (await this.lucid.wallet.address()), this.lucid);\n        if (options?.coinSelection || options?.coinSelection === undefined) {\n            this.txBuilder.add_inputs_from(utxos, changeAddress);\n        }\n        this.txBuilder.balance(changeAddress, (() => {\n            if (options?.change?.outputData?.hash) {\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Datum.new_data_hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.DataHash.from_hex(options.change.outputData.hash));\n            }\n            else if (options?.change?.outputData?.asHash) {\n                this.txBuilder.add_plutus_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(options.change.outputData.asHash)));\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Datum.new_data_hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_plutus_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(options.change.outputData.asHash))));\n            }\n            else if (options?.change?.outputData?.inline) {\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Datum.new_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Data[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(options.change.outputData.inline))));\n            }\n            else {\n                return undefined;\n            }\n        })());\n        return new _tx_complete_js__WEBPACK_IMPORTED_MODULE_3__.TxComplete(this.lucid, await this.txBuilder.construct(utxos, changeAddress, options?.nativeUplc === undefined ? true : options?.nativeUplc));\n    }\n    /** Return the current transaction body in Hex encoded Cbor. */\n    async toString() {\n        let task = this.tasks.shift();\n        while (task) {\n            await task(this);\n            task = this.tasks.shift();\n        }\n        return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(this.txBuilder.to_bytes());\n    }\n}\nfunction attachScript(tx, { type, script }) {\n    if (type === \"Native\") {\n        return tx.txBuilder.add_native_script(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.NativeScript.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(script)));\n    }\n    else if (type === \"PlutusV1\") {\n        return tx.txBuilder.add_plutus_script(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.applyDoubleCborEncoding)(script))));\n    }\n    else if (type === \"PlutusV2\") {\n        return tx.txBuilder.add_plutus_v2_script(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.applyDoubleCborEncoding)(script))));\n    }\n    throw new Error(\"No variant matched.\");\n}\nasync function createPoolRegistration(poolParams, lucid) {\n    const poolOwners = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHashes[\"new\"]();\n    poolParams.owners.forEach((owner) => {\n        const { stakeCredential } = lucid.utils.getAddressDetails(owner);\n        if (stakeCredential?.type === \"Key\") {\n            poolOwners.add(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_hex(stakeCredential.hash));\n        }\n        else\n            throw new Error(\"Only key hashes allowed for pool owners.\");\n    });\n    const metadata = poolParams.metadataUrl\n        ? await fetch(poolParams.metadataUrl)\n            .then((res) => res.arrayBuffer())\n        : null;\n    const metadataHash = metadata\n        ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PoolMetadataHash.from_bytes(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_blake2b256(new Uint8Array(metadata)))\n        : null;\n    const relays = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Relays[\"new\"]();\n    poolParams.relays.forEach((relay) => {\n        switch (relay.type) {\n            case \"SingleHostIp\": {\n                const ipV4 = relay.ipV4\n                    ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ipv4[\"new\"](new Uint8Array(relay.ipV4.split(\".\").map((b) => parseInt(b))))\n                    : undefined;\n                const ipV6 = relay.ipV6\n                    ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ipv6[\"new\"]((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(relay.ipV6.replaceAll(\":\", \"\")))\n                    : undefined;\n                relays.add(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Relay.new_single_host_addr(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.SingleHostAddr[\"new\"](relay.port, ipV4, ipV6)));\n                break;\n            }\n            case \"SingleHostDomainName\": {\n                relays.add(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Relay.new_single_host_name(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.SingleHostName[\"new\"](relay.port, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.DNSRecordAorAAAA[\"new\"](relay.domainName))));\n                break;\n            }\n            case \"MultiHost\": {\n                relays.add(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Relay.new_multi_host_name(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.MultiHostName[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.DNSRecordSRV[\"new\"](relay.domainName))));\n                break;\n            }\n        }\n    });\n    return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PoolRegistration[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PoolParams[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_bech32(poolParams.poolId), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.VRFKeyHash.from_hex(poolParams.vrfKeyHash), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(poolParams.pledge.toString()), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(poolParams.cost.toString()), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.UnitInterval.from_float(poolParams.margin), _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress.from_address(addressFromWithNetworkCheck(poolParams.rewardAddress, lucid)), poolOwners, relays, metadataHash\n        ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PoolMetadata[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Url[\"new\"](poolParams.metadataUrl), metadataHash)\n        : undefined));\n}\nfunction addressFromWithNetworkCheck(address, lucid) {\n    const addressDetails = lucid.utils.getAddressDetails(address);\n    const actualNetworkId = (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.networkToId)(lucid.network);\n    if (addressDetails.networkId !== actualNetworkId) {\n        throw new Error(`Invalid address: Expected address with network id ${actualNetworkId}, but got ${addressDetails.networkId}`);\n    }\n    return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Address.from_bech32(address);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/lucid/tx.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/lucid/tx_complete.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/lucid/tx_complete.js ***!
  \*****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TxComplete\": () => (/* binding */ TxComplete)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _tx_signed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tx_signed.js */ \"./node_modules/lucid-cardano/esm/src/lucid/tx_signed.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _tx_signed_js__WEBPACK_IMPORTED_MODULE_1__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _tx_signed_js__WEBPACK_IMPORTED_MODULE_1__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass TxComplete {\n    constructor(lucid, tx) {\n        Object.defineProperty(this, \"txComplete\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"witnessSetBuilder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tasks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lucid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lucid = lucid;\n        this.txComplete = tx;\n        this.witnessSetBuilder = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionWitnessSetBuilder[\"new\"]();\n        this.tasks = [];\n    }\n    sign() {\n        this.tasks.push(async () => {\n            const witnesses = await this.lucid.wallet.signTx(this.txComplete);\n            this.witnessSetBuilder.add_existing(witnesses);\n        });\n        return this;\n    }\n    /** Add an extra signature from a private key. */\n    signWithPrivateKey(privateKey) {\n        const priv = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(privateKey);\n        const witness = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.make_vkey_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(this.txComplete.body()), priv);\n        this.witnessSetBuilder.add_vkey(witness);\n        return this;\n    }\n    /** Sign the transaction and return the witnesses that were just made. */\n    async partialSign() {\n        const witnesses = await this.lucid.wallet.signTx(this.txComplete);\n        this.witnessSetBuilder.add_existing(witnesses);\n        return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(witnesses.to_bytes());\n    }\n    /**\n     * Sign the transaction and return the witnesses that were just made.\n     * Add an extra signature from a private key.\n     */\n    partialSignWithPrivateKey(privateKey) {\n        const priv = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(privateKey);\n        const witness = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.make_vkey_witness(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(this.txComplete.body()), priv);\n        this.witnessSetBuilder.add_vkey(witness);\n        const witnesses = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionWitnessSetBuilder[\"new\"]();\n        witnesses.add_vkey(witness);\n        return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(witnesses.build().to_bytes());\n    }\n    /** Sign the transaction with the given witnesses. */\n    assemble(witnesses) {\n        witnesses.forEach((witness) => {\n            const witnessParsed = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionWitnessSet.from_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(witness));\n            this.witnessSetBuilder.add_existing(witnessParsed);\n        });\n        return this;\n    }\n    async complete() {\n        for (const task of this.tasks) {\n            await task();\n        }\n        this.witnessSetBuilder.add_existing(this.txComplete.witness_set());\n        const signedTx = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Transaction[\"new\"](this.txComplete.body(), this.witnessSetBuilder.build(), this.txComplete.auxiliary_data());\n        return new _tx_signed_js__WEBPACK_IMPORTED_MODULE_1__.TxSigned(this.lucid, signedTx);\n    }\n    /** Return the transaction in Hex encoded Cbor. */\n    toString() {\n        return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(this.txComplete.to_bytes());\n    }\n    /** Return the transaction hash. */\n    toHash() {\n        return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(this.txComplete.body()).to_hex();\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/lucid/tx_complete.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/lucid/tx_signed.js":
/*!***************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/lucid/tx_signed.js ***!
  \***************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TxSigned\": () => (/* binding */ TxSigned)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nclass TxSigned {\n    constructor(lucid, tx) {\n        Object.defineProperty(this, \"txSigned\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lucid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lucid = lucid;\n        this.txSigned = tx;\n    }\n    async submit() {\n        return await (this.lucid.wallet || this.lucid.provider).submitTx((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(this.txSigned.to_bytes()));\n    }\n    /** Returns the transaction in Hex encoded Cbor. */\n    toString() {\n        return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(this.txSigned.to_bytes());\n    }\n    /** Return the transaction hash. */\n    toHash() {\n        return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(this.txSigned.body()).to_hex();\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/lucid/tx_signed.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/misc/bip39.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/misc/bip39.js ***!
  \**********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"generateMnemonic\": () => (/* binding */ generateMnemonic),\n/* harmony export */   \"mnemonicToEntropy\": () => (/* binding */ mnemonicToEntropy)\n/* harmony export */ });\n/* harmony import */ var _deps_deno_land_std_0_153_0_hash_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/deno.land/std@0.153.0/hash/sha256.js */ \"./node_modules/lucid-cardano/esm/deps/deno.land/std@0.153.0/hash/sha256.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__]);\n_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// This is a partial reimplementation of BIP39 in Deno: https://github.com/bitcoinjs/bip39\n// We only use the default Wordlist (english)\n\n\nconst INVALID_MNEMONIC = \"Invalid mnemonic\";\nconst INVALID_ENTROPY = \"Invalid entropy\";\nconst INVALID_CHECKSUM = \"Invalid mnemonic checksum\";\nconst WORDLIST_REQUIRED = \"A wordlist is required but a default could not be found.\\n\" +\n    \"Please pass a 2048 word array explicitly.\";\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = normalize(mnemonic).split(\" \");\n    if (words.length % 3 !== 0) {\n        throw new Error(INVALID_MNEMONIC);\n    }\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map((word) => {\n        const index = wordlist.indexOf(word);\n        if (index === -1) {\n            throw new Error(INVALID_MNEMONIC);\n        }\n        return lpad(index.toString(2), \"0\", 11);\n    })\n        .join(\"\");\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length > 32) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length % 4 !== 0) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    const entropy = new Uint8Array(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) {\n        throw new Error(INVALID_CHECKSUM);\n    }\n    return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(entropy);\n}\nfunction randomBytes(size) {\n    // reimplementation of: https://github.com/crypto-browserify/randombytes/blob/master/browser.js\n    const MAX_UINT32 = 4294967295;\n    const MAX_BYTES = 65536;\n    const bytes = new Uint8Array(size);\n    if (size > MAX_UINT32) {\n        throw new RangeError(\"requested too many random bytes\");\n    }\n    if (size > 0) { // getRandomValues fails on IE if size == 0\n        if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n            // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n            for (let generated = 0; generated < size; generated += MAX_BYTES) {\n                // buffer.slice automatically checks if the end is past the end of\n                // the buffer so we don't have to here\n                crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));\n            }\n        }\n        else {\n            crypto.getRandomValues(bytes);\n        }\n    }\n    return bytes;\n}\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length > 32) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length % 4 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    const entropyBits = bytesToBinary(Array.from(entropy));\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map((binary) => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === \"\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093\" // Japanese wordlist\n        ? words.join(\"\\u3000\")\n        : words.join(\" \");\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = new _deps_deno_land_std_0_153_0_hash_sha256_js__WEBPACK_IMPORTED_MODULE_0__.Sha256()\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => lpad(x.toString(2), \"0\", 8)).join(\"\");\n}\nfunction normalize(str) {\n    return (str || \"\").normalize(\"NFKD\");\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nconst DEFAULT_WORDLIST = [\n    \"abandon\",\n    \"ability\",\n    \"able\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"absorb\",\n    \"abstract\",\n    \"absurd\",\n    \"abuse\",\n    \"access\",\n    \"accident\",\n    \"account\",\n    \"accuse\",\n    \"achieve\",\n    \"acid\",\n    \"acoustic\",\n    \"acquire\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"actor\",\n    \"actress\",\n    \"actual\",\n    \"adapt\",\n    \"add\",\n    \"addict\",\n    \"address\",\n    \"adjust\",\n    \"admit\",\n    \"adult\",\n    \"advance\",\n    \"advice\",\n    \"aerobic\",\n    \"affair\",\n    \"afford\",\n    \"afraid\",\n    \"again\",\n    \"age\",\n    \"agent\",\n    \"agree\",\n    \"ahead\",\n    \"aim\",\n    \"air\",\n    \"airport\",\n    \"aisle\",\n    \"alarm\",\n    \"album\",\n    \"alcohol\",\n    \"alert\",\n    \"alien\",\n    \"all\",\n    \"alley\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"alpha\",\n    \"already\",\n    \"also\",\n    \"alter\",\n    \"always\",\n    \"amateur\",\n    \"amazing\",\n    \"among\",\n    \"amount\",\n    \"amused\",\n    \"analyst\",\n    \"anchor\",\n    \"ancient\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"announce\",\n    \"annual\",\n    \"another\",\n    \"answer\",\n    \"antenna\",\n    \"antique\",\n    \"anxiety\",\n    \"any\",\n    \"apart\",\n    \"apology\",\n    \"appear\",\n    \"apple\",\n    \"approve\",\n    \"april\",\n    \"arch\",\n    \"arctic\",\n    \"area\",\n    \"arena\",\n    \"argue\",\n    \"arm\",\n    \"armed\",\n    \"armor\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"artefact\",\n    \"artist\",\n    \"artwork\",\n    \"ask\",\n    \"aspect\",\n    \"assault\",\n    \"asset\",\n    \"assist\",\n    \"assume\",\n    \"asthma\",\n    \"athlete\",\n    \"atom\",\n    \"attack\",\n    \"attend\",\n    \"attitude\",\n    \"attract\",\n    \"auction\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"average\",\n    \"avocado\",\n    \"avoid\",\n    \"awake\",\n    \"aware\",\n    \"away\",\n    \"awesome\",\n    \"awful\",\n    \"awkward\",\n    \"axis\",\n    \"baby\",\n    \"bachelor\",\n    \"bacon\",\n    \"badge\",\n    \"bag\",\n    \"balance\",\n    \"balcony\",\n    \"ball\",\n    \"bamboo\",\n    \"banana\",\n    \"banner\",\n    \"bar\",\n    \"barely\",\n    \"bargain\",\n    \"barrel\",\n    \"base\",\n    \"basic\",\n    \"basket\",\n    \"battle\",\n    \"beach\",\n    \"bean\",\n    \"beauty\",\n    \"because\",\n    \"become\",\n    \"beef\",\n    \"before\",\n    \"begin\",\n    \"behave\",\n    \"behind\",\n    \"believe\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"benefit\",\n    \"best\",\n    \"betray\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bid\",\n    \"bike\",\n    \"bind\",\n    \"biology\",\n    \"bird\",\n    \"birth\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"blanket\",\n    \"blast\",\n    \"bleak\",\n    \"bless\",\n    \"blind\",\n    \"blood\",\n    \"blossom\",\n    \"blouse\",\n    \"blue\",\n    \"blur\",\n    \"blush\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"boil\",\n    \"bomb\",\n    \"bone\",\n    \"bonus\",\n    \"book\",\n    \"boost\",\n    \"border\",\n    \"boring\",\n    \"borrow\",\n    \"boss\",\n    \"bottom\",\n    \"bounce\",\n    \"box\",\n    \"boy\",\n    \"bracket\",\n    \"brain\",\n    \"brand\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"brisk\",\n    \"broccoli\",\n    \"broken\",\n    \"bronze\",\n    \"broom\",\n    \"brother\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"build\",\n    \"bulb\",\n    \"bulk\",\n    \"bullet\",\n    \"bundle\",\n    \"bunker\",\n    \"burden\",\n    \"burger\",\n    \"burst\",\n    \"bus\",\n    \"business\",\n    \"busy\",\n    \"butter\",\n    \"buyer\",\n    \"buzz\",\n    \"cabbage\",\n    \"cabin\",\n    \"cable\",\n    \"cactus\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cancel\",\n    \"candy\",\n    \"cannon\",\n    \"canoe\",\n    \"canvas\",\n    \"canyon\",\n    \"capable\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"cargo\",\n    \"carpet\",\n    \"carry\",\n    \"cart\",\n    \"case\",\n    \"cash\",\n    \"casino\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catalog\",\n    \"catch\",\n    \"category\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"caution\",\n    \"cave\",\n    \"ceiling\",\n    \"celery\",\n    \"cement\",\n    \"census\",\n    \"century\",\n    \"cereal\",\n    \"certain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"change\",\n    \"chaos\",\n    \"chapter\",\n    \"charge\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"check\",\n    \"cheese\",\n    \"chef\",\n    \"cherry\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"chimney\",\n    \"choice\",\n    \"choose\",\n    \"chronic\",\n    \"chuckle\",\n    \"chunk\",\n    \"churn\",\n    \"cigar\",\n    \"cinnamon\",\n    \"circle\",\n    \"citizen\",\n    \"city\",\n    \"civil\",\n    \"claim\",\n    \"clap\",\n    \"clarify\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climb\",\n    \"clinic\",\n    \"clip\",\n    \"clock\",\n    \"clog\",\n    \"close\",\n    \"cloth\",\n    \"cloud\",\n    \"clown\",\n    \"club\",\n    \"clump\",\n    \"cluster\",\n    \"clutch\",\n    \"coach\",\n    \"coast\",\n    \"coconut\",\n    \"code\",\n    \"coffee\",\n    \"coil\",\n    \"coin\",\n    \"collect\",\n    \"color\",\n    \"column\",\n    \"combine\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"common\",\n    \"company\",\n    \"concert\",\n    \"conduct\",\n    \"confirm\",\n    \"congress\",\n    \"connect\",\n    \"consider\",\n    \"control\",\n    \"convince\",\n    \"cook\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"core\",\n    \"corn\",\n    \"correct\",\n    \"cost\",\n    \"cotton\",\n    \"couch\",\n    \"country\",\n    \"couple\",\n    \"course\",\n    \"cousin\",\n    \"cover\",\n    \"coyote\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"cram\",\n    \"crane\",\n    \"crash\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"credit\",\n    \"creek\",\n    \"crew\",\n    \"cricket\",\n    \"crime\",\n    \"crisp\",\n    \"critic\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crowd\",\n    \"crucial\",\n    \"cruel\",\n    \"cruise\",\n    \"crumble\",\n    \"crunch\",\n    \"crush\",\n    \"cry\",\n    \"crystal\",\n    \"cube\",\n    \"culture\",\n    \"cup\",\n    \"cupboard\",\n    \"curious\",\n    \"current\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custom\",\n    \"cute\",\n    \"cycle\",\n    \"dad\",\n    \"damage\",\n    \"damp\",\n    \"dance\",\n    \"danger\",\n    \"daring\",\n    \"dash\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"deal\",\n    \"debate\",\n    \"debris\",\n    \"decade\",\n    \"december\",\n    \"decide\",\n    \"decline\",\n    \"decorate\",\n    \"decrease\",\n    \"deer\",\n    \"defense\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"delay\",\n    \"deliver\",\n    \"demand\",\n    \"demise\",\n    \"denial\",\n    \"dentist\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"deposit\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"despair\",\n    \"destroy\",\n    \"detail\",\n    \"detect\",\n    \"develop\",\n    \"device\",\n    \"devote\",\n    \"diagram\",\n    \"dial\",\n    \"diamond\",\n    \"diary\",\n    \"dice\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"digital\",\n    \"dignity\",\n    \"dilemma\",\n    \"dinner\",\n    \"dinosaur\",\n    \"direct\",\n    \"dirt\",\n    \"disagree\",\n    \"discover\",\n    \"disease\",\n    \"dish\",\n    \"dismiss\",\n    \"disorder\",\n    \"display\",\n    \"distance\",\n    \"divert\",\n    \"divide\",\n    \"divorce\",\n    \"dizzy\",\n    \"doctor\",\n    \"document\",\n    \"dog\",\n    \"doll\",\n    \"dolphin\",\n    \"domain\",\n    \"donate\",\n    \"donkey\",\n    \"donor\",\n    \"door\",\n    \"dose\",\n    \"double\",\n    \"dove\",\n    \"draft\",\n    \"dragon\",\n    \"drama\",\n    \"drastic\",\n    \"draw\",\n    \"dream\",\n    \"dress\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"drop\",\n    \"drum\",\n    \"dry\",\n    \"duck\",\n    \"dumb\",\n    \"dune\",\n    \"during\",\n    \"dust\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dynamic\",\n    \"eager\",\n    \"eagle\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"echo\",\n    \"ecology\",\n    \"economy\",\n    \"edge\",\n    \"edit\",\n    \"educate\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"electric\",\n    \"elegant\",\n    \"element\",\n    \"elephant\",\n    \"elevator\",\n    \"elite\",\n    \"else\",\n    \"embark\",\n    \"embody\",\n    \"embrace\",\n    \"emerge\",\n    \"emotion\",\n    \"employ\",\n    \"empower\",\n    \"empty\",\n    \"enable\",\n    \"enact\",\n    \"end\",\n    \"endless\",\n    \"endorse\",\n    \"enemy\",\n    \"energy\",\n    \"enforce\",\n    \"engage\",\n    \"engine\",\n    \"enhance\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"enrich\",\n    \"enroll\",\n    \"ensure\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envelope\",\n    \"episode\",\n    \"equal\",\n    \"equip\",\n    \"era\",\n    \"erase\",\n    \"erode\",\n    \"erosion\",\n    \"error\",\n    \"erupt\",\n    \"escape\",\n    \"essay\",\n    \"essence\",\n    \"estate\",\n    \"eternal\",\n    \"ethics\",\n    \"evidence\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"example\",\n    \"excess\",\n    \"exchange\",\n    \"excite\",\n    \"exclude\",\n    \"excuse\",\n    \"execute\",\n    \"exercise\",\n    \"exhaust\",\n    \"exhibit\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expire\",\n    \"explain\",\n    \"expose\",\n    \"express\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fabric\",\n    \"face\",\n    \"faculty\",\n    \"fade\",\n    \"faint\",\n    \"faith\",\n    \"fall\",\n    \"false\",\n    \"fame\",\n    \"family\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"fantasy\",\n    \"farm\",\n    \"fashion\",\n    \"fat\",\n    \"fatal\",\n    \"father\",\n    \"fatigue\",\n    \"fault\",\n    \"favorite\",\n    \"feature\",\n    \"february\",\n    \"federal\",\n    \"fee\",\n    \"feed\",\n    \"feel\",\n    \"female\",\n    \"fence\",\n    \"festival\",\n    \"fetch\",\n    \"fever\",\n    \"few\",\n    \"fiber\",\n    \"fiction\",\n    \"field\",\n    \"figure\",\n    \"file\",\n    \"film\",\n    \"filter\",\n    \"final\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firm\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fit\",\n    \"fitness\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flash\",\n    \"flat\",\n    \"flavor\",\n    \"flee\",\n    \"flight\",\n    \"flip\",\n    \"float\",\n    \"flock\",\n    \"floor\",\n    \"flower\",\n    \"fluid\",\n    \"flush\",\n    \"fly\",\n    \"foam\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"force\",\n    \"forest\",\n    \"forget\",\n    \"fork\",\n    \"fortune\",\n    \"forum\",\n    \"forward\",\n    \"fossil\",\n    \"foster\",\n    \"found\",\n    \"fox\",\n    \"fragile\",\n    \"frame\",\n    \"frequent\",\n    \"fresh\",\n    \"friend\",\n    \"fringe\",\n    \"frog\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"fun\",\n    \"funny\",\n    \"furnace\",\n    \"fury\",\n    \"future\",\n    \"gadget\",\n    \"gain\",\n    \"galaxy\",\n    \"gallery\",\n    \"game\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"garlic\",\n    \"garment\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaze\",\n    \"general\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"genuine\",\n    \"gesture\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"ginger\",\n    \"giraffe\",\n    \"girl\",\n    \"give\",\n    \"glad\",\n    \"glance\",\n    \"glare\",\n    \"glass\",\n    \"glide\",\n    \"glimpse\",\n    \"globe\",\n    \"gloom\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"goat\",\n    \"goddess\",\n    \"gold\",\n    \"good\",\n    \"goose\",\n    \"gorilla\",\n    \"gospel\",\n    \"gossip\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grain\",\n    \"grant\",\n    \"grape\",\n    \"grass\",\n    \"gravity\",\n    \"great\",\n    \"green\",\n    \"grid\",\n    \"grief\",\n    \"grit\",\n    \"grocery\",\n    \"group\",\n    \"grow\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"guilt\",\n    \"guitar\",\n    \"gun\",\n    \"gym\",\n    \"habit\",\n    \"hair\",\n    \"half\",\n    \"hammer\",\n    \"hamster\",\n    \"hand\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harsh\",\n    \"harvest\",\n    \"hat\",\n    \"have\",\n    \"hawk\",\n    \"hazard\",\n    \"head\",\n    \"health\",\n    \"heart\",\n    \"heavy\",\n    \"hedgehog\",\n    \"height\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"hen\",\n    \"hero\",\n    \"hidden\",\n    \"high\",\n    \"hill\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"history\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"home\",\n    \"honey\",\n    \"hood\",\n    \"hope\",\n    \"horn\",\n    \"horror\",\n    \"horse\",\n    \"hospital\",\n    \"host\",\n    \"hotel\",\n    \"hour\",\n    \"hover\",\n    \"hub\",\n    \"huge\",\n    \"human\",\n    \"humble\",\n    \"humor\",\n    \"hundred\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hybrid\",\n    \"ice\",\n    \"icon\",\n    \"idea\",\n    \"identify\",\n    \"idle\",\n    \"ignore\",\n    \"ill\",\n    \"illegal\",\n    \"illness\",\n    \"image\",\n    \"imitate\",\n    \"immense\",\n    \"immune\",\n    \"impact\",\n    \"impose\",\n    \"improve\",\n    \"impulse\",\n    \"inch\",\n    \"include\",\n    \"income\",\n    \"increase\",\n    \"index\",\n    \"indicate\",\n    \"indoor\",\n    \"industry\",\n    \"infant\",\n    \"inflict\",\n    \"inform\",\n    \"inhale\",\n    \"inherit\",\n    \"initial\",\n    \"inject\",\n    \"injury\",\n    \"inmate\",\n    \"inner\",\n    \"innocent\",\n    \"input\",\n    \"inquiry\",\n    \"insane\",\n    \"insect\",\n    \"inside\",\n    \"inspire\",\n    \"install\",\n    \"intact\",\n    \"interest\",\n    \"into\",\n    \"invest\",\n    \"invite\",\n    \"involve\",\n    \"iron\",\n    \"island\",\n    \"isolate\",\n    \"issue\",\n    \"item\",\n    \"ivory\",\n    \"jacket\",\n    \"jaguar\",\n    \"jar\",\n    \"jazz\",\n    \"jealous\",\n    \"jeans\",\n    \"jelly\",\n    \"jewel\",\n    \"job\",\n    \"join\",\n    \"joke\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"juice\",\n    \"jump\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"kangaroo\",\n    \"keen\",\n    \"keep\",\n    \"ketchup\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kidney\",\n    \"kind\",\n    \"kingdom\",\n    \"kiss\",\n    \"kit\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kiwi\",\n    \"knee\",\n    \"knife\",\n    \"knock\",\n    \"know\",\n    \"lab\",\n    \"label\",\n    \"labor\",\n    \"ladder\",\n    \"lady\",\n    \"lake\",\n    \"lamp\",\n    \"language\",\n    \"laptop\",\n    \"large\",\n    \"later\",\n    \"latin\",\n    \"laugh\",\n    \"laundry\",\n    \"lava\",\n    \"law\",\n    \"lawn\",\n    \"lawsuit\",\n    \"layer\",\n    \"lazy\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"leave\",\n    \"lecture\",\n    \"left\",\n    \"leg\",\n    \"legal\",\n    \"legend\",\n    \"leisure\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"leopard\",\n    \"lesson\",\n    \"letter\",\n    \"level\",\n    \"liar\",\n    \"liberty\",\n    \"library\",\n    \"license\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"limb\",\n    \"limit\",\n    \"link\",\n    \"lion\",\n    \"liquid\",\n    \"list\",\n    \"little\",\n    \"live\",\n    \"lizard\",\n    \"load\",\n    \"loan\",\n    \"lobster\",\n    \"local\",\n    \"lock\",\n    \"logic\",\n    \"lonely\",\n    \"long\",\n    \"loop\",\n    \"lottery\",\n    \"loud\",\n    \"lounge\",\n    \"love\",\n    \"loyal\",\n    \"lucky\",\n    \"luggage\",\n    \"lumber\",\n    \"lunar\",\n    \"lunch\",\n    \"luxury\",\n    \"lyrics\",\n    \"machine\",\n    \"mad\",\n    \"magic\",\n    \"magnet\",\n    \"maid\",\n    \"mail\",\n    \"main\",\n    \"major\",\n    \"make\",\n    \"mammal\",\n    \"man\",\n    \"manage\",\n    \"mandate\",\n    \"mango\",\n    \"mansion\",\n    \"manual\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"margin\",\n    \"marine\",\n    \"market\",\n    \"marriage\",\n    \"mask\",\n    \"mass\",\n    \"master\",\n    \"match\",\n    \"material\",\n    \"math\",\n    \"matrix\",\n    \"matter\",\n    \"maximum\",\n    \"maze\",\n    \"meadow\",\n    \"mean\",\n    \"measure\",\n    \"meat\",\n    \"mechanic\",\n    \"medal\",\n    \"media\",\n    \"melody\",\n    \"melt\",\n    \"member\",\n    \"memory\",\n    \"mention\",\n    \"menu\",\n    \"mercy\",\n    \"merge\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"message\",\n    \"metal\",\n    \"method\",\n    \"middle\",\n    \"midnight\",\n    \"milk\",\n    \"million\",\n    \"mimic\",\n    \"mind\",\n    \"minimum\",\n    \"minor\",\n    \"minute\",\n    \"miracle\",\n    \"mirror\",\n    \"misery\",\n    \"miss\",\n    \"mistake\",\n    \"mix\",\n    \"mixed\",\n    \"mixture\",\n    \"mobile\",\n    \"model\",\n    \"modify\",\n    \"mom\",\n    \"moment\",\n    \"monitor\",\n    \"monkey\",\n    \"monster\",\n    \"month\",\n    \"moon\",\n    \"moral\",\n    \"more\",\n    \"morning\",\n    \"mosquito\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"move\",\n    \"movie\",\n    \"much\",\n    \"muffin\",\n    \"mule\",\n    \"multiply\",\n    \"muscle\",\n    \"museum\",\n    \"mushroom\",\n    \"music\",\n    \"must\",\n    \"mutual\",\n    \"myself\",\n    \"mystery\",\n    \"myth\",\n    \"naive\",\n    \"name\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"nation\",\n    \"nature\",\n    \"near\",\n    \"neck\",\n    \"need\",\n    \"negative\",\n    \"neglect\",\n    \"neither\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"network\",\n    \"neutral\",\n    \"never\",\n    \"news\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"noble\",\n    \"noise\",\n    \"nominee\",\n    \"noodle\",\n    \"normal\",\n    \"north\",\n    \"nose\",\n    \"notable\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"novel\",\n    \"now\",\n    \"nuclear\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"obscure\",\n    \"observe\",\n    \"obtain\",\n    \"obvious\",\n    \"occur\",\n    \"ocean\",\n    \"october\",\n    \"odor\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"often\",\n    \"oil\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympic\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"online\",\n    \"only\",\n    \"open\",\n    \"opera\",\n    \"opinion\",\n    \"oppose\",\n    \"option\",\n    \"orange\",\n    \"orbit\",\n    \"orchard\",\n    \"order\",\n    \"ordinary\",\n    \"organ\",\n    \"orient\",\n    \"original\",\n    \"orphan\",\n    \"ostrich\",\n    \"other\",\n    \"outdoor\",\n    \"outer\",\n    \"output\",\n    \"outside\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pact\",\n    \"paddle\",\n    \"page\",\n    \"pair\",\n    \"palace\",\n    \"palm\",\n    \"panda\",\n    \"panel\",\n    \"panic\",\n    \"panther\",\n    \"paper\",\n    \"parade\",\n    \"parent\",\n    \"park\",\n    \"parrot\",\n    \"party\",\n    \"pass\",\n    \"patch\",\n    \"path\",\n    \"patient\",\n    \"patrol\",\n    \"pattern\",\n    \"pause\",\n    \"pave\",\n    \"payment\",\n    \"peace\",\n    \"peanut\",\n    \"pear\",\n    \"peasant\",\n    \"pelican\",\n    \"pen\",\n    \"penalty\",\n    \"pencil\",\n    \"people\",\n    \"pepper\",\n    \"perfect\",\n    \"permit\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"picnic\",\n    \"picture\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"pill\",\n    \"pilot\",\n    \"pink\",\n    \"pioneer\",\n    \"pipe\",\n    \"pistol\",\n    \"pitch\",\n    \"pizza\",\n    \"place\",\n    \"planet\",\n    \"plastic\",\n    \"plate\",\n    \"play\",\n    \"please\",\n    \"pledge\",\n    \"pluck\",\n    \"plug\",\n    \"plunge\",\n    \"poem\",\n    \"poet\",\n    \"point\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"popular\",\n    \"portion\",\n    \"position\",\n    \"possible\",\n    \"post\",\n    \"potato\",\n    \"pottery\",\n    \"poverty\",\n    \"powder\",\n    \"power\",\n    \"practice\",\n    \"praise\",\n    \"predict\",\n    \"prefer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"prevent\",\n    \"price\",\n    \"pride\",\n    \"primary\",\n    \"print\",\n    \"priority\",\n    \"prison\",\n    \"private\",\n    \"prize\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"profit\",\n    \"program\",\n    \"project\",\n    \"promote\",\n    \"proof\",\n    \"property\",\n    \"prosper\",\n    \"protect\",\n    \"proud\",\n    \"provide\",\n    \"public\",\n    \"pudding\",\n    \"pull\",\n    \"pulp\",\n    \"pulse\",\n    \"pumpkin\",\n    \"punch\",\n    \"pupil\",\n    \"puppy\",\n    \"purchase\",\n    \"purity\",\n    \"purpose\",\n    \"purse\",\n    \"push\",\n    \"put\",\n    \"puzzle\",\n    \"pyramid\",\n    \"quality\",\n    \"quantum\",\n    \"quarter\",\n    \"question\",\n    \"quick\",\n    \"quit\",\n    \"quiz\",\n    \"quote\",\n    \"rabbit\",\n    \"raccoon\",\n    \"race\",\n    \"rack\",\n    \"radar\",\n    \"radio\",\n    \"rail\",\n    \"rain\",\n    \"raise\",\n    \"rally\",\n    \"ramp\",\n    \"ranch\",\n    \"random\",\n    \"range\",\n    \"rapid\",\n    \"rare\",\n    \"rate\",\n    \"rather\",\n    \"raven\",\n    \"raw\",\n    \"razor\",\n    \"ready\",\n    \"real\",\n    \"reason\",\n    \"rebel\",\n    \"rebuild\",\n    \"recall\",\n    \"receive\",\n    \"recipe\",\n    \"record\",\n    \"recycle\",\n    \"reduce\",\n    \"reflect\",\n    \"reform\",\n    \"refuse\",\n    \"region\",\n    \"regret\",\n    \"regular\",\n    \"reject\",\n    \"relax\",\n    \"release\",\n    \"relief\",\n    \"rely\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"render\",\n    \"renew\",\n    \"rent\",\n    \"reopen\",\n    \"repair\",\n    \"repeat\",\n    \"replace\",\n    \"report\",\n    \"require\",\n    \"rescue\",\n    \"resemble\",\n    \"resist\",\n    \"resource\",\n    \"response\",\n    \"result\",\n    \"retire\",\n    \"retreat\",\n    \"return\",\n    \"reunion\",\n    \"reveal\",\n    \"review\",\n    \"reward\",\n    \"rhythm\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"ridge\",\n    \"rifle\",\n    \"right\",\n    \"rigid\",\n    \"ring\",\n    \"riot\",\n    \"ripple\",\n    \"risk\",\n    \"ritual\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roast\",\n    \"robot\",\n    \"robust\",\n    \"rocket\",\n    \"romance\",\n    \"roof\",\n    \"rookie\",\n    \"room\",\n    \"rose\",\n    \"rotate\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"royal\",\n    \"rubber\",\n    \"rude\",\n    \"rug\",\n    \"rule\",\n    \"run\",\n    \"runway\",\n    \"rural\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"sail\",\n    \"salad\",\n    \"salmon\",\n    \"salon\",\n    \"salt\",\n    \"salute\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"satisfy\",\n    \"satoshi\",\n    \"sauce\",\n    \"sausage\",\n    \"save\",\n    \"say\",\n    \"scale\",\n    \"scan\",\n    \"scare\",\n    \"scatter\",\n    \"scene\",\n    \"scheme\",\n    \"school\",\n    \"science\",\n    \"scissors\",\n    \"scorpion\",\n    \"scout\",\n    \"scrap\",\n    \"screen\",\n    \"script\",\n    \"scrub\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"security\",\n    \"seed\",\n    \"seek\",\n    \"segment\",\n    \"select\",\n    \"sell\",\n    \"seminar\",\n    \"senior\",\n    \"sense\",\n    \"sentence\",\n    \"series\",\n    \"service\",\n    \"session\",\n    \"settle\",\n    \"setup\",\n    \"seven\",\n    \"shadow\",\n    \"shaft\",\n    \"shallow\",\n    \"share\",\n    \"shed\",\n    \"shell\",\n    \"sheriff\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"ship\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"short\",\n    \"shoulder\",\n    \"shove\",\n    \"shrimp\",\n    \"shrug\",\n    \"shuffle\",\n    \"shy\",\n    \"sibling\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sight\",\n    \"sign\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"since\",\n    \"sing\",\n    \"siren\",\n    \"sister\",\n    \"situate\",\n    \"six\",\n    \"size\",\n    \"skate\",\n    \"sketch\",\n    \"ski\",\n    \"skill\",\n    \"skin\",\n    \"skirt\",\n    \"skull\",\n    \"slab\",\n    \"slam\",\n    \"sleep\",\n    \"slender\",\n    \"slice\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slogan\",\n    \"slot\",\n    \"slow\",\n    \"slush\",\n    \"small\",\n    \"smart\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snack\",\n    \"snake\",\n    \"snap\",\n    \"sniff\",\n    \"snow\",\n    \"soap\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"soda\",\n    \"soft\",\n    \"solar\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"someone\",\n    \"song\",\n    \"soon\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"source\",\n    \"south\",\n    \"space\",\n    \"spare\",\n    \"spatial\",\n    \"spawn\",\n    \"speak\",\n    \"special\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spider\",\n    \"spike\",\n    \"spin\",\n    \"spirit\",\n    \"split\",\n    \"spoil\",\n    \"sponsor\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spray\",\n    \"spread\",\n    \"spring\",\n    \"spy\",\n    \"square\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"stairs\",\n    \"stamp\",\n    \"stand\",\n    \"start\",\n    \"state\",\n    \"stay\",\n    \"steak\",\n    \"steel\",\n    \"stem\",\n    \"step\",\n    \"stereo\",\n    \"stick\",\n    \"still\",\n    \"sting\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stool\",\n    \"story\",\n    \"stove\",\n    \"strategy\",\n    \"street\",\n    \"strike\",\n    \"strong\",\n    \"struggle\",\n    \"student\",\n    \"stuff\",\n    \"stumble\",\n    \"style\",\n    \"subject\",\n    \"submit\",\n    \"subway\",\n    \"success\",\n    \"such\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"summer\",\n    \"sun\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"supply\",\n    \"supreme\",\n    \"sure\",\n    \"surface\",\n    \"surge\",\n    \"surprise\",\n    \"surround\",\n    \"survey\",\n    \"suspect\",\n    \"sustain\",\n    \"swallow\",\n    \"swamp\",\n    \"swap\",\n    \"swarm\",\n    \"swear\",\n    \"sweet\",\n    \"swift\",\n    \"swim\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"symbol\",\n    \"symptom\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tackle\",\n    \"tag\",\n    \"tail\",\n    \"talent\",\n    \"talk\",\n    \"tank\",\n    \"tape\",\n    \"target\",\n    \"task\",\n    \"taste\",\n    \"tattoo\",\n    \"taxi\",\n    \"teach\",\n    \"team\",\n    \"tell\",\n    \"ten\",\n    \"tenant\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"test\",\n    \"text\",\n    \"thank\",\n    \"that\",\n    \"theme\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"they\",\n    \"thing\",\n    \"this\",\n    \"thought\",\n    \"three\",\n    \"thrive\",\n    \"throw\",\n    \"thumb\",\n    \"thunder\",\n    \"ticket\",\n    \"tide\",\n    \"tiger\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"tissue\",\n    \"title\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toddler\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"token\",\n    \"tomato\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topic\",\n    \"topple\",\n    \"torch\",\n    \"tornado\",\n    \"tortoise\",\n    \"toss\",\n    \"total\",\n    \"tourist\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"tragic\",\n    \"train\",\n    \"transfer\",\n    \"trap\",\n    \"trash\",\n    \"travel\",\n    \"tray\",\n    \"treat\",\n    \"tree\",\n    \"trend\",\n    \"trial\",\n    \"tribe\",\n    \"trick\",\n    \"trigger\",\n    \"trim\",\n    \"trip\",\n    \"trophy\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trumpet\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tuition\",\n    \"tumble\",\n    \"tuna\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"ugly\",\n    \"umbrella\",\n    \"unable\",\n    \"unaware\",\n    \"uncle\",\n    \"uncover\",\n    \"under\",\n    \"undo\",\n    \"unfair\",\n    \"unfold\",\n    \"unhappy\",\n    \"uniform\",\n    \"unique\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unlock\",\n    \"until\",\n    \"unusual\",\n    \"unveil\",\n    \"update\",\n    \"upgrade\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"urban\",\n    \"urge\",\n    \"usage\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"useless\",\n    \"usual\",\n    \"utility\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"valid\",\n    \"valley\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vapor\",\n    \"various\",\n    \"vast\",\n    \"vault\",\n    \"vehicle\",\n    \"velvet\",\n    \"vendor\",\n    \"venture\",\n    \"venue\",\n    \"verb\",\n    \"verify\",\n    \"version\",\n    \"very\",\n    \"vessel\",\n    \"veteran\",\n    \"viable\",\n    \"vibrant\",\n    \"vicious\",\n    \"victory\",\n    \"video\",\n    \"view\",\n    \"village\",\n    \"vintage\",\n    \"violin\",\n    \"virtual\",\n    \"virus\",\n    \"visa\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"voice\",\n    \"void\",\n    \"volcano\",\n    \"volume\",\n    \"vote\",\n    \"voyage\",\n    \"wage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"warfare\",\n    \"warm\",\n    \"warrior\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weasel\",\n    \"weather\",\n    \"web\",\n    \"wedding\",\n    \"weekend\",\n    \"weird\",\n    \"welcome\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"where\",\n    \"whip\",\n    \"whisper\",\n    \"wide\",\n    \"width\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"win\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"witness\",\n    \"wolf\",\n    \"woman\",\n    \"wonder\",\n    \"wood\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"world\",\n    \"worry\",\n    \"worth\",\n    \"wrap\",\n    \"wreck\",\n    \"wrestle\",\n    \"wrist\",\n    \"write\",\n    \"wrong\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"you\",\n    \"young\",\n    \"youth\",\n    \"zebra\",\n    \"zero\",\n    \"zone\",\n    \"zoo\",\n];\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/misc/bip39.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/misc/crc8.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/misc/crc8.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"crc8\": () => (/* binding */ crc8)\n/* harmony export */ });\n// This is a partial reimplementation of CRC-8 (node-crc) in Deno: https://github.com/alexgorbatchev/node-crc\nlet TABLE = [\n    0x00,\n    0x07,\n    0x0e,\n    0x09,\n    0x1c,\n    0x1b,\n    0x12,\n    0x15,\n    0x38,\n    0x3f,\n    0x36,\n    0x31,\n    0x24,\n    0x23,\n    0x2a,\n    0x2d,\n    0x70,\n    0x77,\n    0x7e,\n    0x79,\n    0x6c,\n    0x6b,\n    0x62,\n    0x65,\n    0x48,\n    0x4f,\n    0x46,\n    0x41,\n    0x54,\n    0x53,\n    0x5a,\n    0x5d,\n    0xe0,\n    0xe7,\n    0xee,\n    0xe9,\n    0xfc,\n    0xfb,\n    0xf2,\n    0xf5,\n    0xd8,\n    0xdf,\n    0xd6,\n    0xd1,\n    0xc4,\n    0xc3,\n    0xca,\n    0xcd,\n    0x90,\n    0x97,\n    0x9e,\n    0x99,\n    0x8c,\n    0x8b,\n    0x82,\n    0x85,\n    0xa8,\n    0xaf,\n    0xa6,\n    0xa1,\n    0xb4,\n    0xb3,\n    0xba,\n    0xbd,\n    0xc7,\n    0xc0,\n    0xc9,\n    0xce,\n    0xdb,\n    0xdc,\n    0xd5,\n    0xd2,\n    0xff,\n    0xf8,\n    0xf1,\n    0xf6,\n    0xe3,\n    0xe4,\n    0xed,\n    0xea,\n    0xb7,\n    0xb0,\n    0xb9,\n    0xbe,\n    0xab,\n    0xac,\n    0xa5,\n    0xa2,\n    0x8f,\n    0x88,\n    0x81,\n    0x86,\n    0x93,\n    0x94,\n    0x9d,\n    0x9a,\n    0x27,\n    0x20,\n    0x29,\n    0x2e,\n    0x3b,\n    0x3c,\n    0x35,\n    0x32,\n    0x1f,\n    0x18,\n    0x11,\n    0x16,\n    0x03,\n    0x04,\n    0x0d,\n    0x0a,\n    0x57,\n    0x50,\n    0x59,\n    0x5e,\n    0x4b,\n    0x4c,\n    0x45,\n    0x42,\n    0x6f,\n    0x68,\n    0x61,\n    0x66,\n    0x73,\n    0x74,\n    0x7d,\n    0x7a,\n    0x89,\n    0x8e,\n    0x87,\n    0x80,\n    0x95,\n    0x92,\n    0x9b,\n    0x9c,\n    0xb1,\n    0xb6,\n    0xbf,\n    0xb8,\n    0xad,\n    0xaa,\n    0xa3,\n    0xa4,\n    0xf9,\n    0xfe,\n    0xf7,\n    0xf0,\n    0xe5,\n    0xe2,\n    0xeb,\n    0xec,\n    0xc1,\n    0xc6,\n    0xcf,\n    0xc8,\n    0xdd,\n    0xda,\n    0xd3,\n    0xd4,\n    0x69,\n    0x6e,\n    0x67,\n    0x60,\n    0x75,\n    0x72,\n    0x7b,\n    0x7c,\n    0x51,\n    0x56,\n    0x5f,\n    0x58,\n    0x4d,\n    0x4a,\n    0x43,\n    0x44,\n    0x19,\n    0x1e,\n    0x17,\n    0x10,\n    0x05,\n    0x02,\n    0x0b,\n    0x0c,\n    0x21,\n    0x26,\n    0x2f,\n    0x28,\n    0x3d,\n    0x3a,\n    0x33,\n    0x34,\n    0x4e,\n    0x49,\n    0x40,\n    0x47,\n    0x52,\n    0x55,\n    0x5c,\n    0x5b,\n    0x76,\n    0x71,\n    0x78,\n    0x7f,\n    0x6a,\n    0x6d,\n    0x64,\n    0x63,\n    0x3e,\n    0x39,\n    0x30,\n    0x37,\n    0x22,\n    0x25,\n    0x2c,\n    0x2b,\n    0x06,\n    0x01,\n    0x08,\n    0x0f,\n    0x1a,\n    0x1d,\n    0x14,\n    0x13,\n    0xae,\n    0xa9,\n    0xa0,\n    0xa7,\n    0xb2,\n    0xb5,\n    0xbc,\n    0xbb,\n    0x96,\n    0x91,\n    0x98,\n    0x9f,\n    0x8a,\n    0x8d,\n    0x84,\n    0x83,\n    0xde,\n    0xd9,\n    0xd0,\n    0xd7,\n    0xc2,\n    0xc5,\n    0xcc,\n    0xcb,\n    0xe6,\n    0xe1,\n    0xe8,\n    0xef,\n    0xfa,\n    0xfd,\n    0xf4,\n    0xf3,\n];\nif (typeof Int32Array !== \"undefined\") {\n    TABLE = new Int32Array(TABLE);\n}\nfunction crc8(current, previous = 0) {\n    let crc = ~~previous;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;\n    }\n    return crc;\n}\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/misc/crc8.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/misc/sign_data.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/misc/sign_data.js ***!
  \**************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"signData\": () => (/* binding */ signData),\n/* harmony export */   \"verifyData\": () => (/* binding */ verifyData)\n/* harmony export */ });\n/* harmony import */ var _mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mod.js */ \"./node_modules/lucid-cardano/esm/src/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_mod_js__WEBPACK_IMPORTED_MODULE_0__]);\n_mod_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nfunction signData(addressHex, payload, privateKey) {\n    const protectedHeaders = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.HeaderMap[\"new\"]();\n    protectedHeaders.set_algorithm_id(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.from_algorithm_id(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.AlgorithmId.EdDSA));\n    protectedHeaders.set_header(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.new_text(\"address\"), _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.CBORValue.new_bytes((0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromHex)(addressHex)));\n    const protectedSerialized = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.ProtectedHeaderMap[\"new\"](protectedHeaders);\n    const unprotectedHeaders = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.HeaderMap[\"new\"]();\n    const headers = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Headers[\"new\"](protectedSerialized, unprotectedHeaders);\n    const builder = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.COSESign1Builder[\"new\"](headers, (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromHex)(payload), false);\n    const toSign = builder.make_data_to_sign().to_bytes();\n    const priv = _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PrivateKey.from_bech32(privateKey);\n    const signedSigStruc = priv.sign(toSign).to_bytes();\n    const coseSign1 = builder.build(signedSigStruc);\n    const key = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.COSEKey[\"new\"](_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.from_key_type(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.KeyType.OKP));\n    key.set_algorithm_id(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.from_algorithm_id(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.AlgorithmId.EdDSA));\n    key.set_header(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.new_int(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Int.new_negative(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.BigNum.from_str(\"1\"))), _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.CBORValue.new_int(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Int.new_i32(6))); // crv (-1) set to Ed25519 (6)\n    key.set_header(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.new_int(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Int.new_negative(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.BigNum.from_str(\"2\"))), _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.CBORValue.new_bytes(priv.to_public().as_bytes())); // x (-2) set to public key\n    return {\n        signature: (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(coseSign1.to_bytes()),\n        key: (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(key.to_bytes()),\n    };\n}\nfunction verifyData(addressHex, keyHash, payload, signedMessage) {\n    const cose1 = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.COSESign1.from_bytes((0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromHex)(signedMessage.signature));\n    const key = _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.COSEKey.from_bytes((0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromHex)(signedMessage.key));\n    const protectedHeaders = cose1.headers().protected()\n        .deserialized_headers();\n    const cose1Address = (() => {\n        try {\n            return (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(protectedHeaders.header(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.new_text(\"address\"))?.as_bytes());\n        }\n        catch (_e) {\n            throw new Error(\"No address found in signature.\");\n        }\n    })();\n    const cose1AlgorithmId = (() => {\n        try {\n            const int = protectedHeaders.algorithm_id()?.as_int();\n            if (int?.is_positive())\n                return parseInt(int.as_positive()?.to_str());\n            return parseInt(int?.as_negative()?.to_str());\n        }\n        catch (_e) {\n            throw new Error(\"Failed to retrieve Algorithm Id.\");\n        }\n    })();\n    const keyAlgorithmId = (() => {\n        try {\n            const int = key.algorithm_id()?.as_int();\n            if (int?.is_positive())\n                return parseInt(int.as_positive()?.to_str());\n            return parseInt(int?.as_negative()?.to_str());\n        }\n        catch (_e) {\n            throw new Error(\"Failed to retrieve Algorithm Id.\");\n        }\n    })();\n    const keyCurve = (() => {\n        try {\n            const int = key.header(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.new_int(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Int.new_negative(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.BigNum.from_str(\"1\"))))?.as_int();\n            if (int?.is_positive())\n                return parseInt(int.as_positive()?.to_str());\n            return parseInt(int?.as_negative()?.to_str());\n        }\n        catch (_e) {\n            throw new Error(\"Failed to retrieve Curve.\");\n        }\n    })();\n    const keyType = (() => {\n        try {\n            const int = key.key_type().as_int();\n            if (int?.is_positive())\n                return parseInt(int.as_positive()?.to_str());\n            return parseInt(int?.as_negative()?.to_str());\n        }\n        catch (_e) {\n            throw new Error(\"Failed to retrieve Key Type.\");\n        }\n    })();\n    const publicKey = (() => {\n        try {\n            return _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PublicKey.from_bytes(key.header(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Label.new_int(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.Int.new_negative(_mod_js__WEBPACK_IMPORTED_MODULE_0__.M.BigNum.from_str(\"2\"))))?.as_bytes());\n        }\n        catch (_e) {\n            throw new Error(\"No public key found.\");\n        }\n    })();\n    const cose1Payload = (() => {\n        try {\n            return (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(cose1.payload());\n        }\n        catch (_e) {\n            throw new Error(\"No payload found.\");\n        }\n    })();\n    const signature = _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519Signature.from_bytes(cose1.signature());\n    const data = cose1.signed_data(undefined, undefined).to_bytes();\n    if (cose1Address !== addressHex)\n        return false;\n    if (keyHash !== publicKey.hash().to_hex())\n        return false;\n    if (cose1AlgorithmId !== keyAlgorithmId &&\n        cose1AlgorithmId !== _mod_js__WEBPACK_IMPORTED_MODULE_0__.M.AlgorithmId.EdDSA) {\n        return false;\n    }\n    if (keyCurve !== 6)\n        return false;\n    if (keyType !== 1)\n        return false;\n    if (cose1Payload !== payload)\n        return false;\n    return publicKey.verify(data, signature);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/misc/sign_data.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/misc/wallet.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/misc/wallet.js ***!
  \***********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"discoverOwnUsedTxKeyHashes\": () => (/* binding */ discoverOwnUsedTxKeyHashes),\n/* harmony export */   \"walletFromSeed\": () => (/* binding */ walletFromSeed)\n/* harmony export */ });\n/* harmony import */ var _mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mod.js */ \"./node_modules/lucid-cardano/esm/src/mod.js\");\n/* harmony import */ var _bip39_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bip39.js */ \"./node_modules/lucid-cardano/esm/src/misc/bip39.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_mod_js__WEBPACK_IMPORTED_MODULE_0__, _bip39_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_mod_js__WEBPACK_IMPORTED_MODULE_0__, _bip39_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nfunction walletFromSeed(seed, options = { addressType: \"Base\", accountIndex: 0, network: \"Mainnet\" }) {\n    function harden(num) {\n        if (typeof num !== \"number\")\n            throw new Error(\"Type number required here!\");\n        return 0x80000000 + num;\n    }\n    const entropy = (0,_bip39_js__WEBPACK_IMPORTED_MODULE_1__.mnemonicToEntropy)(seed);\n    const rootKey = _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Bip32PrivateKey.from_bip39_entropy((0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromHex)(entropy), options.password\n        ? new TextEncoder().encode(options.password)\n        : new Uint8Array());\n    const accountKey = rootKey.derive(harden(1852))\n        .derive(harden(1815))\n        .derive(harden(options.accountIndex));\n    const paymentKey = accountKey.derive(0).derive(0).to_raw_key();\n    const stakeKey = accountKey.derive(2).derive(0).to_raw_key();\n    const paymentKeyHash = paymentKey.to_public().hash();\n    const stakeKeyHash = stakeKey.to_public().hash();\n    const networkId = options.network === \"Mainnet\" ? 1 : 0;\n    const address = options.addressType === \"Base\"\n        ? _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BaseAddress[\"new\"](networkId, _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(paymentKeyHash), _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(stakeKeyHash)).to_address().to_bech32(undefined)\n        : _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.EnterpriseAddress[\"new\"](networkId, _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(paymentKeyHash)).to_address().to_bech32(undefined);\n    const rewardAddress = options.addressType === \"Base\"\n        ? _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress[\"new\"](networkId, _mod_js__WEBPACK_IMPORTED_MODULE_0__.C.StakeCredential.from_keyhash(stakeKeyHash)).to_address().to_bech32(undefined)\n        : null;\n    return {\n        address,\n        rewardAddress,\n        paymentKey: paymentKey.to_bech32(),\n        stakeKey: options.addressType === \"Base\" ? stakeKey.to_bech32() : null,\n    };\n}\nfunction discoverOwnUsedTxKeyHashes(tx, ownKeyHashes, ownUtxos) {\n    const usedKeyHashes = [];\n    // key hashes from inputs\n    const inputs = tx.body().inputs();\n    for (let i = 0; i < inputs.len(); i++) {\n        const input = inputs.get(i);\n        const txHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(input.transaction_id().to_bytes());\n        const outputIndex = parseInt(input.index().to_str());\n        const utxo = ownUtxos.find((utxo) => utxo.txHash === txHash && utxo.outputIndex === outputIndex);\n        if (utxo) {\n            const { paymentCredential } = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.getAddressDetails)(utxo.address);\n            usedKeyHashes.push(paymentCredential?.hash);\n        }\n    }\n    const txBody = tx.body();\n    // key hashes from certificates\n    function keyHashFromCert(txBody) {\n        const certs = txBody.certs();\n        if (!certs)\n            return;\n        for (let i = 0; i < certs.len(); i++) {\n            const cert = certs.get(i);\n            if (cert.kind() === 0) {\n                const credential = cert.as_stake_registration()?.stake_credential();\n                if (credential?.kind() === 0) {\n                    // Key hash not needed for registration\n                }\n            }\n            else if (cert.kind() === 1) {\n                const credential = cert.as_stake_deregistration()?.stake_credential();\n                if (credential?.kind() === 0) {\n                    const keyHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(credential.to_keyhash().to_bytes());\n                    usedKeyHashes.push(keyHash);\n                }\n            }\n            else if (cert.kind() === 2) {\n                const credential = cert.as_stake_delegation()?.stake_credential();\n                if (credential?.kind() === 0) {\n                    const keyHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(credential.to_keyhash().to_bytes());\n                    usedKeyHashes.push(keyHash);\n                }\n            }\n            else if (cert.kind() === 3) {\n                const poolParams = cert\n                    .as_pool_registration()?.pool_params();\n                const owners = poolParams\n                    ?.pool_owners();\n                if (!owners)\n                    break;\n                for (let i = 0; i < owners.len(); i++) {\n                    const keyHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(owners.get(i).to_bytes());\n                    usedKeyHashes.push(keyHash);\n                }\n                const operator = poolParams.operator().to_hex();\n                usedKeyHashes.push(operator);\n            }\n            else if (cert.kind() === 4) {\n                const operator = cert.as_pool_retirement().pool_keyhash().to_hex();\n                usedKeyHashes.push(operator);\n            }\n            else if (cert.kind() === 6) {\n                const instantRewards = cert\n                    .as_move_instantaneous_rewards_cert()\n                    ?.move_instantaneous_reward().as_to_stake_creds()\n                    ?.keys();\n                if (!instantRewards)\n                    break;\n                for (let i = 0; i < instantRewards.len(); i++) {\n                    const credential = instantRewards.get(i);\n                    if (credential.kind() === 0) {\n                        const keyHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(credential.to_keyhash().to_bytes());\n                        usedKeyHashes.push(keyHash);\n                    }\n                }\n            }\n        }\n    }\n    if (txBody.certs())\n        keyHashFromCert(txBody);\n    // key hashes from withdrawals\n    const withdrawals = txBody.withdrawals();\n    function keyHashFromWithdrawal(withdrawals) {\n        const rewardAddresses = withdrawals.keys();\n        for (let i = 0; i < rewardAddresses.len(); i++) {\n            const credential = rewardAddresses.get(i).payment_cred();\n            if (credential.kind() === 0) {\n                usedKeyHashes.push(credential.to_keyhash().to_hex());\n            }\n        }\n    }\n    if (withdrawals)\n        keyHashFromWithdrawal(withdrawals);\n    // key hashes from scripts\n    const scripts = tx.witness_set().native_scripts();\n    function keyHashFromScript(scripts) {\n        for (let i = 0; i < scripts.len(); i++) {\n            const script = scripts.get(i);\n            if (script.kind() === 0) {\n                const keyHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(script.as_script_pubkey().addr_keyhash().to_bytes());\n                usedKeyHashes.push(keyHash);\n            }\n            if (script.kind() === 1) {\n                keyHashFromScript(script.as_script_all().native_scripts());\n                return;\n            }\n            if (script.kind() === 2) {\n                keyHashFromScript(script.as_script_any().native_scripts());\n                return;\n            }\n            if (script.kind() === 3) {\n                keyHashFromScript(script.as_script_n_of_k().native_scripts());\n                return;\n            }\n        }\n    }\n    if (scripts)\n        keyHashFromScript(scripts);\n    // keyHashes from required signers\n    const requiredSigners = txBody.required_signers();\n    if (requiredSigners) {\n        for (let i = 0; i < requiredSigners.len(); i++) {\n            usedKeyHashes.push((0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(requiredSigners.get(i).to_bytes()));\n        }\n    }\n    // keyHashes from collateral\n    const collateral = txBody.collateral();\n    if (collateral) {\n        for (let i = 0; i < collateral.len(); i++) {\n            const input = collateral.get(i);\n            const txHash = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(input.transaction_id().to_bytes());\n            const outputIndex = parseInt(input.index().to_str());\n            const utxo = ownUtxos.find((utxo) => utxo.txHash === txHash && utxo.outputIndex === outputIndex);\n            if (utxo) {\n                const { paymentCredential } = (0,_mod_js__WEBPACK_IMPORTED_MODULE_0__.getAddressDetails)(utxo.address);\n                usedKeyHashes.push(paymentCredential?.hash);\n            }\n        }\n    }\n    return usedKeyHashes.filter((k) => ownKeyHashes.includes(k));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/misc/wallet.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/mod.js":
/*!***************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/mod.js ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blockfrost\": () => (/* reexport safe */ _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__.Blockfrost),\n/* harmony export */   \"C\": () => (/* reexport safe */ _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   \"Constr\": () => (/* reexport safe */ _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__.Constr),\n/* harmony export */   \"Data\": () => (/* reexport safe */ _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__.Data),\n/* harmony export */   \"Emulator\": () => (/* reexport safe */ _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__.Emulator),\n/* harmony export */   \"Kupmios\": () => (/* reexport safe */ _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__.Kupmios),\n/* harmony export */   \"Lucid\": () => (/* reexport safe */ _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__.Lucid),\n/* harmony export */   \"M\": () => (/* reexport safe */ _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   \"MerkleTree\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.MerkleTree),\n/* harmony export */   \"PROTOCOL_PARAMETERS_DEFAULT\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.PROTOCOL_PARAMETERS_DEFAULT),\n/* harmony export */   \"SLOT_CONFIG_NETWORK\": () => (/* reexport safe */ _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__.SLOT_CONFIG_NETWORK),\n/* harmony export */   \"Tx\": () => (/* reexport safe */ _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__.Tx),\n/* harmony export */   \"TxComplete\": () => (/* reexport safe */ _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__.TxComplete),\n/* harmony export */   \"TxSigned\": () => (/* reexport safe */ _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__.TxSigned),\n/* harmony export */   \"Utils\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.Utils),\n/* harmony export */   \"applyDoubleCborEncoding\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.applyDoubleCborEncoding),\n/* harmony export */   \"applyParamsToScript\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.applyParamsToScript),\n/* harmony export */   \"assetsToValue\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.assetsToValue),\n/* harmony export */   \"combineHash\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.combineHash),\n/* harmony export */   \"concat\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.concat),\n/* harmony export */   \"coreToUtxo\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.coreToUtxo),\n/* harmony export */   \"createCostModels\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.createCostModels),\n/* harmony export */   \"datumJsonToCbor\": () => (/* reexport safe */ _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__.datumJsonToCbor),\n/* harmony export */   \"equals\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.equals),\n/* harmony export */   \"fromHex\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.fromHex),\n/* harmony export */   \"fromLabel\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.fromLabel),\n/* harmony export */   \"fromScriptRef\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.fromScriptRef),\n/* harmony export */   \"fromText\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.fromText),\n/* harmony export */   \"fromUnit\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.fromUnit),\n/* harmony export */   \"generatePrivateKey\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.generatePrivateKey),\n/* harmony export */   \"generateSeedPhrase\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.generateSeedPhrase),\n/* harmony export */   \"getAddressDetails\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.getAddressDetails),\n/* harmony export */   \"nativeScriptFromJson\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.nativeScriptFromJson),\n/* harmony export */   \"networkToId\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.networkToId),\n/* harmony export */   \"paymentCredentialOf\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.paymentCredentialOf),\n/* harmony export */   \"sha256\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.sha256),\n/* harmony export */   \"slotToBeginUnixTime\": () => (/* reexport safe */ _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__.slotToBeginUnixTime),\n/* harmony export */   \"stakeCredentialOf\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.stakeCredentialOf),\n/* harmony export */   \"toHex\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.toHex),\n/* harmony export */   \"toLabel\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.toLabel),\n/* harmony export */   \"toPublicKey\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.toPublicKey),\n/* harmony export */   \"toScriptRef\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.toScriptRef),\n/* harmony export */   \"toText\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.toText),\n/* harmony export */   \"toUnit\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.toUnit),\n/* harmony export */   \"unixTimeToEnclosingSlot\": () => (/* reexport safe */ _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__.unixTimeToEnclosingSlot),\n/* harmony export */   \"utxoToCore\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.utxoToCore),\n/* harmony export */   \"valueToAssets\": () => (/* reexport safe */ _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__.valueToAssets)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lucid/mod.js */ \"./node_modules/lucid-cardano/esm/src/lucid/mod.js\");\n/* harmony import */ var _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./provider/mod.js */ \"./node_modules/lucid-cardano/esm/src/provider/mod.js\");\n/* harmony import */ var _types_mod_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/mod.js */ \"./node_modules/lucid-cardano/esm/src/types/mod.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\n/* harmony import */ var _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plutus/mod.js */ \"./node_modules/lucid-cardano/esm/src/plutus/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__, _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__, _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _lucid_mod_js__WEBPACK_IMPORTED_MODULE_1__, _provider_mod_js__WEBPACK_IMPORTED_MODULE_2__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_4__, _plutus_mod_js__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/plutus/data.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/plutus/data.js ***!
  \***********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Constr\": () => (/* binding */ Constr),\n/* harmony export */   \"Data\": () => (/* binding */ Data)\n/* harmony export */ });\n/* harmony import */ var _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/deno.land/x/typebox@0.25.13/src/typebox.js */ \"./node_modules/lucid-cardano/esm/deps/deno.land/x/typebox@0.25.13/src/typebox.js\");\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"./node_modules/lucid-cardano/esm/src/utils/utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_1__, _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_1__, _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass Constr {\n    constructor(index, fields) {\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fields\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.index = index;\n        this.fields = fields;\n    }\n}\nconst Data = {\n    // Types\n    // Note: Recursive types are not supported (yet)\n    Integer: function (options) {\n        const integer = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Unsafe({ dataType: \"integer\" });\n        if (options) {\n            Object.entries(options).forEach(([key, value]) => {\n                integer[key] = value;\n            });\n        }\n        return integer;\n    },\n    Bytes: function (options) {\n        const bytes = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Unsafe({ dataType: \"bytes\" });\n        if (options) {\n            Object.entries(options).forEach(([key, value]) => {\n                bytes[key] = value;\n            });\n        }\n        return bytes;\n    },\n    Boolean: function () {\n        return _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Unsafe({\n            anyOf: [\n                {\n                    title: \"False\",\n                    dataType: \"constructor\",\n                    index: 0,\n                    fields: [],\n                },\n                {\n                    title: \"True\",\n                    dataType: \"constructor\",\n                    index: 1,\n                    fields: [],\n                },\n            ],\n        });\n    },\n    Any: function () {\n        return _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Unsafe({ description: \"Any Data.\" });\n    },\n    Array: function (items, options) {\n        const array = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Array(items);\n        replaceProperties(array, { dataType: \"list\", items });\n        if (options) {\n            Object.entries(options).forEach(([key, value]) => {\n                array[key] = value;\n            });\n        }\n        return array;\n    },\n    Map: function (keys, values, options) {\n        const map = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Unsafe({\n            dataType: \"map\",\n            keys,\n            values,\n        });\n        if (options) {\n            Object.entries(options).forEach(([key, value]) => {\n                map[key] = value;\n            });\n        }\n        return map;\n    },\n    /**\n     * Object applies by default a PlutusData Constr with index 0.\\\n     * Set 'hasConstr' to false to serialize Object as PlutusData List.\n     */\n    Object: function (properties, options) {\n        const object = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Object(properties);\n        replaceProperties(object, {\n            anyOf: [{\n                    dataType: \"constructor\",\n                    index: 0,\n                    fields: Object.entries(properties).map(([title, p]) => ({\n                        ...p,\n                        title,\n                    })),\n                }],\n        });\n        object.anyOf[0].hasConstr = typeof options?.hasConstr === \"undefined\" ||\n            options.hasConstr;\n        return object;\n    },\n    Enum: function (items) {\n        const union = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Union(items);\n        replaceProperties(union, {\n            anyOf: items.map((item, index) => item.anyOf[0].fields.length === 0\n                ? ({\n                    ...item.anyOf[0],\n                    index,\n                })\n                : ({\n                    dataType: \"constructor\",\n                    title: (() => {\n                        const title = item.anyOf[0].fields[0].title;\n                        if (title.charAt(0) !==\n                            title.charAt(0).toUpperCase()) {\n                            throw new Error(`Enum '${title}' needs to start with an uppercase letter.`);\n                        }\n                        return item.anyOf[0].fields[0].title;\n                    })(),\n                    index,\n                    fields: item.anyOf[0].fields[0].items,\n                })),\n        });\n        return union;\n    },\n    /**\n     * Tuple is by default a PlutusData List.\\\n     * Set 'hasConstr' to true to apply a PlutusData Constr with index 0.\n     */\n    Tuple: function (items, options) {\n        const tuple = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Tuple(items);\n        replaceProperties(tuple, {\n            dataType: \"list\",\n            items,\n        });\n        if (options) {\n            Object.entries(options).forEach(([key, value]) => {\n                tuple[key] = value;\n            });\n        }\n        return tuple;\n    },\n    Literal: function (title) {\n        if (title.charAt(0) !== title.charAt(0).toUpperCase()) {\n            throw new Error(`Enum '${title}' needs to start with an uppercase letter.`);\n        }\n        const literal = _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Literal(title);\n        replaceProperties(literal, {\n            anyOf: [{\n                    dataType: \"constructor\",\n                    title,\n                    index: 0,\n                    fields: [],\n                }],\n        });\n        return literal;\n    },\n    Nullable: function (item) {\n        return _deps_deno_land_x_typebox_0_25_13_src_typebox_js__WEBPACK_IMPORTED_MODULE_0__.Type.Unsafe({\n            anyOf: [\n                {\n                    title: \"Some\",\n                    description: \"An optional value.\",\n                    dataType: \"constructor\",\n                    index: 0,\n                    fields: [\n                        item,\n                    ],\n                },\n                {\n                    title: \"None\",\n                    description: \"Nothing.\",\n                    dataType: \"constructor\",\n                    index: 1,\n                    fields: [],\n                },\n            ],\n        });\n    },\n    /**\n     * Convert PlutusData to Cbor encoded data.\\\n     * Or apply a shape and convert the provided data struct to Cbor encoded data.\n     */\n    to,\n    /** Convert Cbor encoded data to PlutusData */\n    from,\n    /**\n     * Note Constr cannot be used here.\\\n     * Strings prefixed with '0x' are not UTF-8 encoded.\n     */\n    fromJson,\n    /**\n     * Note Constr cannot be used here, also only bytes/integers as Json keys.\\\n     */\n    toJson,\n    void: function () {\n        return \"d87980\";\n    },\n    castFrom,\n    castTo,\n};\n/**\n * Convert PlutusData to Cbor encoded data.\\\n * Or apply a shape and convert the provided data struct to Cbor encoded data.\n */\nfunction to(data, shape) {\n    function serialize(data) {\n        try {\n            if (typeof data === \"bigint\") {\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.new_integer(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BigInt.from_str(data.toString()));\n            }\n            else if (typeof data === \"string\") {\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.new_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(data));\n            }\n            else if (data instanceof Constr) {\n                const { index, fields } = data;\n                const plutusList = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusList[\"new\"]();\n                fields.forEach((field) => plutusList.add(serialize(field)));\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.new_constr_plutus_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ConstrPlutusData[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BigNum.from_str(index.toString()), plutusList));\n            }\n            else if (data instanceof Array) {\n                const plutusList = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusList[\"new\"]();\n                data.forEach((arg) => plutusList.add(serialize(arg)));\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.new_list(plutusList);\n            }\n            else if (data instanceof Map) {\n                const plutusMap = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusMap[\"new\"]();\n                for (const [key, value] of data.entries()) {\n                    plutusMap.insert(serialize(key), serialize(value));\n                }\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.new_map(plutusMap);\n            }\n            throw new Error(\"Unsupported type\");\n        }\n        catch (error) {\n            throw new Error(\"Could not serialize the data: \" + error);\n        }\n    }\n    const d = shape ? castTo(data, shape) : data;\n    return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(serialize(d).to_bytes());\n}\n/**\n *  Convert Cbor encoded data to Data.\\\n *  Or apply a shape and cast the cbor encoded data to a certain type.\n */\nfunction from(raw, shape) {\n    function deserialize(data) {\n        if (data.kind() === 0) {\n            const constr = data.as_constr_plutus_data();\n            const l = constr.data();\n            const desL = [];\n            for (let i = 0; i < l.len(); i++) {\n                desL.push(deserialize(l.get(i)));\n            }\n            return new Constr(parseInt(constr.alternative().to_str()), desL);\n        }\n        else if (data.kind() === 1) {\n            const m = data.as_map();\n            const desM = new Map();\n            const keys = m.keys();\n            for (let i = 0; i < keys.len(); i++) {\n                desM.set(deserialize(keys.get(i)), deserialize(m.get(keys.get(i))));\n            }\n            return desM;\n        }\n        else if (data.kind() === 2) {\n            const l = data.as_list();\n            const desL = [];\n            for (let i = 0; i < l.len(); i++) {\n                desL.push(deserialize(l.get(i)));\n            }\n            return desL;\n        }\n        else if (data.kind() === 3) {\n            return BigInt(data.as_integer().to_str());\n        }\n        else if (data.kind() === 4) {\n            return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(data.as_bytes());\n        }\n        throw new Error(\"Unsupported type\");\n    }\n    const data = deserialize(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(raw)));\n    return shape ? castFrom(data, shape) : data;\n}\n/**\n * Note Constr cannot be used here.\\\n * Strings prefixed with '0x' are not UTF-8 encoded.\n */\nfunction fromJson(json) {\n    function toData(json) {\n        if (typeof json === \"string\") {\n            return json.startsWith(\"0x\")\n                ? (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.toHex)((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(json.slice(2)))\n                : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromText)(json);\n        }\n        if (typeof json === \"number\")\n            return BigInt(json);\n        if (typeof json === \"bigint\")\n            return json;\n        if (json instanceof Array)\n            return json.map((v) => toData(v));\n        if (json instanceof Object) {\n            const tempMap = new Map();\n            Object.entries(json).forEach(([key, value]) => {\n                tempMap.set(toData(key), toData(value));\n            });\n            return tempMap;\n        }\n        throw new Error(\"Unsupported type\");\n    }\n    return toData(json);\n}\n/**\n * Note Constr cannot be used here, also only bytes/integers as Json keys.\\\n */\nfunction toJson(plutusData) {\n    function fromData(data) {\n        if (typeof data === \"bigint\" ||\n            typeof data === \"number\" ||\n            (typeof data === \"string\" &&\n                !isNaN(parseInt(data)) &&\n                data.slice(-1) === \"n\")) {\n            const bigint = typeof data === \"string\"\n                ? BigInt(data.slice(0, -1))\n                : data;\n            return parseInt(bigint.toString());\n        }\n        if (typeof data === \"string\") {\n            try {\n                return new TextDecoder(undefined, { fatal: true }).decode((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(data));\n            }\n            catch (_) {\n                return \"0x\" + (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.toHex)((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(data));\n            }\n        }\n        if (data instanceof Array)\n            return data.map((v) => fromData(v));\n        if (data instanceof Map) {\n            const tempJson = {};\n            data.forEach((value, key) => {\n                const convertedKey = fromData(key);\n                if (typeof convertedKey !== \"string\" &&\n                    typeof convertedKey !== \"number\") {\n                    throw new Error(\"Unsupported type (Note: Only bytes or integers can be keys of a JSON object)\");\n                }\n                tempJson[convertedKey] = fromData(value);\n            });\n            return tempJson;\n        }\n        throw new Error(\"Unsupported type (Note: Constructor cannot be converted to JSON)\");\n    }\n    return fromData(plutusData);\n}\nfunction castFrom(data, shape) {\n    if (!shape)\n        throw new Error(\"Could not type cast data.\");\n    const shapeType = (shape.anyOf ? \"enum\" : \"\") || shape.dataType;\n    switch (shapeType) {\n        case \"integer\": {\n            if (typeof data !== \"bigint\") {\n                throw new Error(\"Could not type cast to integer.\");\n            }\n            integerConstraints(data, shape);\n            return data;\n        }\n        case \"bytes\": {\n            if (typeof data !== \"string\") {\n                throw new Error(\"Could not type cast to bytes.\");\n            }\n            bytesConstraints(data, shape);\n            return data;\n        }\n        case \"constructor\": {\n            if (data instanceof Constr && data.index === shape.index &&\n                (shape.hasConstr || shape.hasConstr === undefined)) {\n                const fields = {};\n                if (shape.fields.length !== data.fields.length) {\n                    throw new Error(\"Could not ype cast to object. Fields do not match.\");\n                }\n                shape.fields.forEach((field, fieldIndex) => {\n                    if ((/[A-Z]/.test(field.title[0]))) {\n                        throw new Error(\"Could not type cast to object. Object properties need to start with a lowercase letter.\");\n                    }\n                    fields[field.title] = castFrom(data.fields[fieldIndex], field);\n                });\n                return fields;\n            }\n            else if (data instanceof Array && !shape.hasConstr &&\n                shape.hasConstr !== undefined) {\n                const fields = {};\n                if (shape.fields.length !== data.length) {\n                    throw new Error(\"Could not ype cast to object. Fields do not match.\");\n                }\n                shape.fields.forEach((field, fieldIndex) => {\n                    if ((/[A-Z]/.test(field.title[0]))) {\n                        throw new Error(\"Could not type cast to object. Object properties need to start with a lowercase letter.\");\n                    }\n                    fields[field.title] = castFrom(data[fieldIndex], field);\n                });\n                return fields;\n            }\n            throw new Error(\"Could not type cast to object.\");\n        }\n        case \"enum\": {\n            // When enum has only one entry it's a single constructor/record object\n            if (shape.anyOf.length === 1) {\n                return castFrom(data, shape.anyOf[0]);\n            }\n            if (!(data instanceof Constr)) {\n                throw new Error(\"Could not type cast to enum.\");\n            }\n            const enumShape = shape.anyOf.find((entry) => entry.index === data.index);\n            if (!enumShape || enumShape.fields.length !== data.fields.length) {\n                throw new Error(\"Could not type cast to enum.\");\n            }\n            if (isBoolean(shape)) {\n                if (data.fields.length !== 0) {\n                    throw new Error(\"Could not type cast to boolean.\");\n                }\n                switch (data.index) {\n                    case 0:\n                        return false;\n                    case 1:\n                        return true;\n                }\n                throw new Error(\"Could not type cast to boolean.\");\n            }\n            else if (isNullable(shape)) {\n                switch (data.index) {\n                    case 0: {\n                        if (data.fields.length !== 1) {\n                            throw new Error(\"Could not type cast to nullable object.\");\n                        }\n                        return castFrom(data.fields[0], shape.anyOf[0].fields[0]);\n                    }\n                    case 1: {\n                        if (data.fields.length !== 0) {\n                            throw new Error(\"Could not type cast to nullable object.\");\n                        }\n                        return null;\n                    }\n                }\n                throw new Error(\"Could not type cast to nullable object.\");\n            }\n            switch (enumShape.dataType) {\n                case \"constructor\": {\n                    if (enumShape.fields.length === 0) {\n                        if (/[A-Z]/.test(enumShape.title[0])) {\n                            return enumShape.title;\n                        }\n                        throw new Error(\"Could not type cast to enum.\");\n                    }\n                    else {\n                        if (!(/[A-Z]/.test(enumShape.title))) {\n                            throw new Error(\"Could not type cast to enum. Enums need to start with an uppercase letter.\");\n                        }\n                        if (enumShape.fields.length !== data.fields.length) {\n                            throw new Error(\"Could not type cast to enum.\");\n                        }\n                        return {\n                            [enumShape.title]: enumShape.fields.map((field, index) => castFrom(data.fields[index], field)),\n                        };\n                    }\n                }\n            }\n            throw new Error(\"Could not type cast to enum.\");\n        }\n        case \"list\": {\n            if (shape.items instanceof Array) {\n                // tuple\n                if (data instanceof Constr &&\n                    data.index === 0 &&\n                    shape.hasConstr) {\n                    return data.fields.map((field, index) => castFrom(field, shape.items[index]));\n                }\n                else if (data instanceof Array && !shape.hasConstr) {\n                    return data.map((field, index) => castFrom(field, shape.items[index]));\n                }\n                throw new Error(\"Could not type cast to tuple.\");\n            }\n            else {\n                // array\n                if (!(data instanceof Array)) {\n                    throw new Error(\"Could not type cast to array.\");\n                }\n                listConstraints(data, shape);\n                return data.map((field) => castFrom(field, shape.items));\n            }\n        }\n        case \"map\": {\n            if (!(data instanceof Map)) {\n                throw new Error(\"Could not type cast to map.\");\n            }\n            mapConstraints(data, shape);\n            const map = new Map();\n            for (const [key, value] of (data)\n                .entries()) {\n                map.set(castFrom(key, shape.keys), castFrom(value, shape.values));\n            }\n            return map;\n        }\n        case undefined: {\n            return data;\n        }\n    }\n    throw new Error(\"Could not type cast data.\");\n}\nfunction castTo(struct, shape) {\n    if (!shape)\n        throw new Error(\"Could not type cast struct.\");\n    const shapeType = (shape.anyOf ? \"enum\" : \"\") || shape.dataType;\n    switch (shapeType) {\n        case \"integer\": {\n            if (typeof struct !== \"bigint\") {\n                throw new Error(\"Could not type cast to integer.\");\n            }\n            integerConstraints(struct, shape);\n            return struct;\n        }\n        case \"bytes\": {\n            if (typeof struct !== \"string\") {\n                throw new Error(\"Could not type cast to bytes.\");\n            }\n            bytesConstraints(struct, shape);\n            return struct;\n        }\n        case \"constructor\": {\n            if (typeof struct !== \"object\" || struct === null) {\n                throw new Error(\"Could not type cast to constructor.\");\n            }\n            const fields = shape.fields.map((field) => castTo(struct[field.title], field));\n            return (shape.hasConstr || shape.hasConstr === undefined)\n                ? new Constr(shape.index, fields)\n                : fields;\n        }\n        case \"enum\": {\n            // When enum has only one entry it's a single constructor/record object\n            if (shape.anyOf.length === 1) {\n                return castTo(struct, shape.anyOf[0]);\n            }\n            if (isBoolean(shape)) {\n                if (typeof struct !== \"boolean\") {\n                    throw new Error(\"Could not type cast to boolean.\");\n                }\n                return new Constr(struct ? 1 : 0, []);\n            }\n            else if (isNullable(shape)) {\n                if (struct === null)\n                    return new Constr(1, []);\n                else {\n                    const fields = shape.anyOf[0].fields;\n                    if (fields.length !== 1) {\n                        throw new Error(\"Could not type cast to nullable object.\");\n                    }\n                    return new Constr(0, [\n                        castTo(struct, fields[0]),\n                    ]);\n                }\n            }\n            switch (typeof struct) {\n                case \"string\": {\n                    if (!(/[A-Z]/.test(struct[0]))) {\n                        throw new Error(\"Could not type cast to enum. Enum needs to start with an uppercase letter.\");\n                    }\n                    const enumIndex = shape.anyOf.findIndex((s) => s.dataType === \"constructor\" &&\n                        s.fields.length === 0 &&\n                        s.title === struct);\n                    if (enumIndex === -1)\n                        throw new Error(\"Could not type cast to enum.\");\n                    return new Constr(enumIndex, []);\n                }\n                case \"object\": {\n                    if (struct === null)\n                        throw new Error(\"Could not type cast to enum.\");\n                    const structTitle = Object.keys(struct)[0];\n                    if (!(/[A-Z]/.test(structTitle))) {\n                        throw new Error(\"Could not type cast to enum. Enum needs to start with an uppercase letter.\");\n                    }\n                    const enumEntry = shape.anyOf.find((s) => s.dataType === \"constructor\" &&\n                        s.title === structTitle);\n                    if (!enumEntry)\n                        throw new Error(\"Could not type cast to enum.\");\n                    return new Constr(enumEntry.index, struct[structTitle].map((item, index) => castTo(item, enumEntry.fields[index])));\n                }\n            }\n            throw new Error(\"Could not type cast to enum.\");\n        }\n        case \"list\": {\n            if (!(struct instanceof Array)) {\n                throw new Error(\"Could not type cast to array/tuple.\");\n            }\n            if (shape.items instanceof Array) {\n                // tuple\n                const fields = struct.map((item, index) => castTo(item, shape.items[index]));\n                return shape.hasConstr ? new Constr(0, fields) : fields;\n            }\n            else {\n                // array\n                listConstraints(struct, shape);\n                return struct.map((item) => castTo(item, shape.items));\n            }\n        }\n        case \"map\": {\n            if (!(struct instanceof Map)) {\n                throw new Error(\"Could not type cast to map.\");\n            }\n            mapConstraints(struct, shape);\n            const map = new Map();\n            for (const [key, value] of (struct)\n                .entries()) {\n                map.set(castTo(key, shape.keys), castTo(value, shape.values));\n            }\n            return map;\n        }\n        case undefined: {\n            return struct;\n        }\n    }\n    throw new Error(\"Could not type cast struct.\");\n}\nfunction integerConstraints(integer, shape) {\n    if (shape.minimum && integer < BigInt(shape.minimum)) {\n        throw new Error(`Integer ${integer} is below the minimum ${shape.minimum}.`);\n    }\n    if (shape.maximum && integer > BigInt(shape.maximum)) {\n        throw new Error(`Integer ${integer} is above the maxiumum ${shape.maximum}.`);\n    }\n    if (shape.exclusiveMinimum && integer <= BigInt(shape.exclusiveMinimum)) {\n        throw new Error(`Integer ${integer} is below the exclusive minimum ${shape.exclusiveMinimum}.`);\n    }\n    if (shape.exclusiveMaximum && integer >= BigInt(shape.exclusiveMaximum)) {\n        throw new Error(`Integer ${integer} is above the exclusive maximum ${shape.exclusiveMaximum}.`);\n    }\n}\nfunction bytesConstraints(bytes, shape) {\n    if (shape.enum && !shape.enum.some((keyword) => keyword === bytes))\n        throw new Error(`None of the keywords match with '${bytes}'.`);\n    if (shape.minLength && bytes.length / 2 < shape.minLength) {\n        throw new Error(`Bytes need to have a length of at least ${shape.minLength} bytes.`);\n    }\n    if (shape.maxLength && bytes.length / 2 > shape.maxLength) {\n        throw new Error(`Bytes can have a length of at most ${shape.minLength} bytes.`);\n    }\n}\nfunction listConstraints(list, shape) {\n    if (shape.minItems && list.length < shape.minItems) {\n        throw new Error(`Array needs to contain at least ${shape.minItems} items.`);\n    }\n    if (shape.maxItems && list.length > shape.maxItems) {\n        throw new Error(`Array can contain at most ${shape.maxItems} items.`);\n    }\n    if (shape.uniqueItems && (new Set(list)).size !== list.length) {\n        // Note this only works for primitive types like string and bigint.\n        throw new Error(\"Array constains duplicates.\");\n    }\n}\nfunction mapConstraints(map, shape) {\n    if (shape.minItems && map.size < shape.minItems) {\n        throw new Error(`Map needs to contain at least ${shape.minItems} items.`);\n    }\n    if (shape.maxItems && map.size > shape.maxItems) {\n        throw new Error(`Map can contain at most ${shape.maxItems} items.`);\n    }\n}\nfunction isBoolean(shape) {\n    return shape.anyOf && shape.anyOf[0]?.title === \"False\" &&\n        shape.anyOf[1]?.title === \"True\";\n}\nfunction isNullable(shape) {\n    return shape.anyOf && shape.anyOf[0]?.title === \"Some\" &&\n        shape.anyOf[1]?.title === \"None\";\n}\nfunction replaceProperties(object, properties) {\n    Object.keys(object).forEach((key) => {\n        delete object[key];\n    });\n    Object.assign(object, properties);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/plutus/data.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/plutus/mod.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/plutus/mod.js ***!
  \**********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Constr\": () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.Constr),\n/* harmony export */   \"Data\": () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_0__.Data),\n/* harmony export */   \"SLOT_CONFIG_NETWORK\": () => (/* reexport safe */ _time_js__WEBPACK_IMPORTED_MODULE_1__.SLOT_CONFIG_NETWORK),\n/* harmony export */   \"slotToBeginUnixTime\": () => (/* reexport safe */ _time_js__WEBPACK_IMPORTED_MODULE_1__.slotToBeginUnixTime),\n/* harmony export */   \"unixTimeToEnclosingSlot\": () => (/* reexport safe */ _time_js__WEBPACK_IMPORTED_MODULE_1__.unixTimeToEnclosingSlot)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"./node_modules/lucid-cardano/esm/src/plutus/data.js\");\n/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./time.js */ \"./node_modules/lucid-cardano/esm/src/plutus/time.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_data_js__WEBPACK_IMPORTED_MODULE_0__]);\n_data_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/plutus/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/plutus/time.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/plutus/time.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SLOT_CONFIG_NETWORK\": () => (/* binding */ SLOT_CONFIG_NETWORK),\n/* harmony export */   \"slotToBeginUnixTime\": () => (/* binding */ slotToBeginUnixTime),\n/* harmony export */   \"unixTimeToEnclosingSlot\": () => (/* binding */ unixTimeToEnclosingSlot)\n/* harmony export */ });\nconst SLOT_CONFIG_NETWORK = {\n    Mainnet: { zeroTime: 1596059091000, zeroSlot: 4492800, slotLength: 1000 },\n    Preview: { zeroTime: 1666656000000, zeroSlot: 0, slotLength: 1000 },\n    Preprod: {\n        zeroTime: 1654041600000 + 1728000000,\n        zeroSlot: 86400,\n        slotLength: 1000,\n    },\n    /** Customizable slot config (Initialized with 0 values). */\n    Custom: { zeroTime: 0, zeroSlot: 0, slotLength: 0 },\n};\nfunction slotToBeginUnixTime(slot, slotConfig) {\n    const msAfterBegin = (slot - slotConfig.zeroSlot) * slotConfig.slotLength;\n    return slotConfig.zeroTime + msAfterBegin;\n}\n// slotToBeginUnixTime and slotToEndUnixTime are identical when slotLength == 1. So we don't need to worry about this now.\n// function slotToEndUnixTime(slot: Slot, slotConfig: SlotConfig): UnixTime {\n//   return slotToBeginUnixTime(slot, slotConfig) + (slotConfig.slotLength - 1);\n// }\nfunction unixTimeToEnclosingSlot(unixTime, slotConfig) {\n    const timePassed = unixTime - slotConfig.zeroTime;\n    const slotsPassed = Math.floor(timePassed / slotConfig.slotLength);\n    return slotsPassed + slotConfig.zeroSlot;\n}\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/plutus/time.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/provider/blockfrost.js":
/*!*******************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/provider/blockfrost.js ***!
  \*******************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blockfrost\": () => (/* binding */ Blockfrost),\n/* harmony export */   \"datumJsonToCbor\": () => (/* binding */ datumJsonToCbor)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\n/* harmony import */ var _package_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../package.js */ \"./node_modules/lucid-cardano/esm/package.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass Blockfrost {\n    constructor(url, projectId) {\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"projectId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.url = url;\n        this.projectId = projectId || \"\";\n    }\n    async getProtocolParameters() {\n        const result = await fetch(`${this.url}/epochs/latest/parameters`, {\n            headers: { project_id: this.projectId, lucid },\n        }).then((res) => res.json());\n        return {\n            minFeeA: parseInt(result.min_fee_a),\n            minFeeB: parseInt(result.min_fee_b),\n            maxTxSize: parseInt(result.max_tx_size),\n            maxValSize: parseInt(result.max_val_size),\n            keyDeposit: BigInt(result.key_deposit),\n            poolDeposit: BigInt(result.pool_deposit),\n            priceMem: parseFloat(result.price_mem),\n            priceStep: parseFloat(result.price_step),\n            maxTxExMem: BigInt(result.max_tx_ex_mem),\n            maxTxExSteps: BigInt(result.max_tx_ex_steps),\n            coinsPerUtxoByte: BigInt(result.coins_per_utxo_size),\n            collateralPercentage: parseInt(result.collateral_percent),\n            maxCollateralInputs: parseInt(result.max_collateral_inputs),\n            costModels: result.cost_models,\n        };\n    }\n    async getUtxos(addressOrCredential) {\n        const queryPredicate = (() => {\n            if (typeof addressOrCredential === \"string\")\n                return addressOrCredential;\n            const credentialBech32 = addressOrCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_hex(addressOrCredential.hash).to_bech32(\"addr_vkh\")\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_hex(addressOrCredential.hash).to_bech32(\"addr_vkh\"); // should be 'script' (CIP-0005)\n            return credentialBech32;\n        })();\n        let result = [];\n        let page = 1;\n        while (true) {\n            const pageResult = await fetch(`${this.url}/addresses/${queryPredicate}/utxos?page=${page}`, { headers: { project_id: this.projectId, lucid } }).then((res) => res.json());\n            if (pageResult.error) {\n                if (pageResult.status_code === 404) {\n                    return [];\n                }\n                else {\n                    throw new Error(\"Could not fetch UTxOs from Blockfrost. Try again.\");\n                }\n            }\n            result = result.concat(pageResult);\n            if (pageResult.length <= 0)\n                break;\n            page++;\n        }\n        return this.blockfrostUtxosToUtxos(result);\n    }\n    async getUtxosWithUnit(addressOrCredential, unit) {\n        const queryPredicate = (() => {\n            if (typeof addressOrCredential === \"string\")\n                return addressOrCredential;\n            const credentialBech32 = addressOrCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_hex(addressOrCredential.hash).to_bech32(\"addr_vkh\")\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHash.from_hex(addressOrCredential.hash).to_bech32(\"addr_vkh\"); // should be 'script' (CIP-0005)\n            return credentialBech32;\n        })();\n        let result = [];\n        let page = 1;\n        while (true) {\n            const pageResult = await fetch(`${this.url}/addresses/${queryPredicate}/utxos/${unit}?page=${page}`, { headers: { project_id: this.projectId, lucid } }).then((res) => res.json());\n            if (pageResult.error) {\n                if (pageResult.status_code === 404) {\n                    return [];\n                }\n                else {\n                    throw new Error(\"Could not fetch UTxOs from Blockfrost. Try again.\");\n                }\n            }\n            result = result.concat(pageResult);\n            if (pageResult.length <= 0)\n                break;\n            page++;\n        }\n        return this.blockfrostUtxosToUtxos(result);\n    }\n    async getUtxoByUnit(unit) {\n        const addresses = await fetch(`${this.url}/assets/${unit}/addresses?count=2`, { headers: { project_id: this.projectId, lucid } }).then((res) => res.json());\n        if (!addresses || addresses.error) {\n            throw new Error(\"Unit not found.\");\n        }\n        if (addresses.length > 1) {\n            throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n        }\n        const address = addresses[0].address;\n        const utxos = await this.getUtxosWithUnit(address, unit);\n        if (utxos.length > 1) {\n            throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n        }\n        return utxos[0];\n    }\n    async getUtxosByOutRef(outRefs) {\n        const queryHashes = [...new Set(outRefs.map((outRef) => outRef.txHash))];\n        const utxos = await Promise.all(queryHashes.map(async (txHash) => {\n            const result = await fetch(`${this.url}/txs/${txHash}/utxos`, { headers: { project_id: this.projectId, lucid } }).then((res) => res.json());\n            if (!result || result.error) {\n                return [];\n            }\n            const utxosResult = result.outputs.map((\n            // deno-lint-ignore no-explicit-any\n            r) => ({\n                ...r,\n                tx_hash: txHash,\n            }));\n            return this.blockfrostUtxosToUtxos(utxosResult);\n        }));\n        return utxos.reduce((acc, utxos) => acc.concat(utxos), []).filter((utxo) => outRefs.some((outRef) => utxo.txHash === outRef.txHash && utxo.outputIndex === outRef.outputIndex));\n    }\n    async getDelegation(rewardAddress) {\n        const result = await fetch(`${this.url}/accounts/${rewardAddress}`, { headers: { project_id: this.projectId, lucid } }).then((res) => res.json());\n        if (!result || result.error) {\n            return { poolId: null, rewards: 0n };\n        }\n        return {\n            poolId: result.pool_id || null,\n            rewards: BigInt(result.withdrawable_amount),\n        };\n    }\n    async getDatum(datumHash) {\n        const datum = await fetch(`${this.url}/scripts/datum/${datumHash}/cbor`, {\n            headers: { project_id: this.projectId, lucid },\n        })\n            .then((res) => res.json())\n            .then((res) => res.cbor);\n        if (!datum || datum.error) {\n            throw new Error(`No datum found for datum hash: ${datumHash}`);\n        }\n        return datum;\n    }\n    awaitTx(txHash, checkInterval = 3000) {\n        return new Promise((res) => {\n            const confirmation = setInterval(async () => {\n                const isConfirmed = await fetch(`${this.url}/txs/${txHash}`, {\n                    headers: { project_id: this.projectId, lucid },\n                }).then((res) => res.json());\n                if (isConfirmed && !isConfirmed.error) {\n                    clearInterval(confirmation);\n                    res(true);\n                    return;\n                }\n            }, checkInterval);\n        });\n    }\n    async submitTx(tx) {\n        const result = await fetch(`${this.url}/tx/submit`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/cbor\",\n                project_id: this.projectId,\n                lucid,\n            },\n            body: (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(tx),\n        }).then((res) => res.json());\n        if (!result || result.error) {\n            if (result?.status_code === 400)\n                throw new Error(result.message);\n            else\n                throw new Error(\"Could not submit transaction.\");\n        }\n        return result;\n    }\n    async blockfrostUtxosToUtxos(result) {\n        return (await Promise.all(result.map(async (r) => ({\n            txHash: r.tx_hash,\n            outputIndex: r.output_index,\n            assets: (() => {\n                const a = {};\n                r.amount.forEach((am) => {\n                    a[am.unit] = BigInt(am.quantity);\n                });\n                return a;\n            })(),\n            address: r.address,\n            datumHash: !r.inline_datum ? r.data_hash : undefined,\n            datum: r.inline_datum,\n            scriptRef: r.reference_script_hash &&\n                (await (async () => {\n                    const { type, } = await fetch(`${this.url}/scripts/${r.reference_script_hash}`, {\n                        headers: { project_id: this.projectId, lucid },\n                    }).then((res) => res.json());\n                    // TODO: support native scripts\n                    if (type === \"Native\" || type === \"native\") {\n                        throw new Error(\"Native script ref not implemented!\");\n                    }\n                    const { cbor: script } = await fetch(`${this.url}/scripts/${r.reference_script_hash}/cbor`, { headers: { project_id: this.projectId, lucid } }).then((res) => res.json());\n                    return {\n                        type: type === \"plutusV1\" ? \"PlutusV1\" : \"PlutusV2\",\n                        script: (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.applyDoubleCborEncoding)(script),\n                    };\n                })()),\n        }))));\n    }\n}\n/**\n * This function is temporarily needed only, until Blockfrost returns the datum natively in Cbor.\n * The conversion is ambigious, that's why it's better to get the datum directly in Cbor.\n */\nfunction datumJsonToCbor(json) {\n    const convert = (json) => {\n        if (!isNaN(json.int)) {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.new_integer(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigInt.from_str(json.int.toString()));\n        }\n        else if (json.bytes || !isNaN(Number(json.bytes))) {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.new_bytes((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(json.bytes));\n        }\n        else if (json.map) {\n            const m = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusMap[\"new\"]();\n            json.map.forEach(({ k, v }) => {\n                m.insert(convert(k), convert(v));\n            });\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.new_map(m);\n        }\n        else if (json.list) {\n            const l = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusList[\"new\"]();\n            json.list.forEach((v) => {\n                l.add(convert(v));\n            });\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.new_list(l);\n        }\n        else if (!isNaN(json.constructor)) {\n            const l = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusList[\"new\"]();\n            json.fields.forEach((v) => {\n                l.add(convert(v));\n            });\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusData.new_constr_plutus_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.ConstrPlutusData[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(json.constructor.toString()), l));\n        }\n        throw new Error(\"Unsupported type\");\n    };\n    return (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(convert(json).to_bytes());\n}\nconst lucid = _package_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].version; // Lucid version\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/provider/blockfrost.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/provider/emulator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/provider/emulator.js ***!
  \*****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Emulator\": () => (/* binding */ Emulator)\n/* harmony export */ });\n/* harmony import */ var _core_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.js */ \"./node_modules/lucid-cardano/esm/src/core/core.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"./node_modules/lucid-cardano/esm/src/utils/utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_core_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__, _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_core_core_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__, _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass Emulator {\n    constructor(accounts, protocolParameters = _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.PROTOCOL_PARAMETERS_DEFAULT) {\n        Object.defineProperty(this, \"ledger\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mempool\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        /**\n         * Only stake key registrations/delegations and rewards are tracked.\n         * Other certificates are not tracked.\n         */\n        Object.defineProperty(this, \"chain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"blockHeight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"slot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"protocolParameters\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"datumTable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        const GENESIS_HASH = \"00\".repeat(32);\n        this.blockHeight = 0;\n        this.slot = 0;\n        this.time = Date.now();\n        this.ledger = {};\n        accounts.forEach(({ address, assets }, index) => {\n            this.ledger[GENESIS_HASH + index] = {\n                utxo: {\n                    txHash: GENESIS_HASH,\n                    outputIndex: index,\n                    address,\n                    assets,\n                },\n                spent: false,\n            };\n        });\n        this.protocolParameters = protocolParameters;\n    }\n    now() {\n        return this.time;\n    }\n    awaitSlot(length = 1) {\n        this.slot += length;\n        this.time += length * 1000;\n        const currentHeight = this.blockHeight;\n        this.blockHeight = Math.floor(this.slot / 20);\n        if (this.blockHeight > currentHeight) {\n            for (const [outRef, { utxo, spent }] of Object.entries(this.mempool)) {\n                this.ledger[outRef] = { utxo, spent };\n            }\n            for (const [outRef, { spent }] of Object.entries(this.ledger)) {\n                if (spent)\n                    delete this.ledger[outRef];\n            }\n            this.mempool = {};\n        }\n    }\n    awaitBlock(height = 1) {\n        this.blockHeight += height;\n        this.slot += height * 20;\n        this.time += height * 20 * 1000;\n        for (const [outRef, { utxo, spent }] of Object.entries(this.mempool)) {\n            this.ledger[outRef] = { utxo, spent };\n        }\n        for (const [outRef, { spent }] of Object.entries(this.ledger)) {\n            if (spent)\n                delete this.ledger[outRef];\n        }\n        this.mempool = {};\n    }\n    getUtxos(addressOrCredential) {\n        const utxos = Object.values(this.ledger).flatMap(({ utxo }) => {\n            if (typeof addressOrCredential === \"string\") {\n                return addressOrCredential === utxo.address ? utxo : [];\n            }\n            else {\n                const { paymentCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(utxo.address);\n                return paymentCredential?.hash === addressOrCredential.hash ? utxo : [];\n            }\n        });\n        return Promise.resolve(utxos);\n    }\n    getProtocolParameters() {\n        return Promise.resolve(this.protocolParameters);\n    }\n    getDatum(datumHash) {\n        return Promise.resolve(this.datumTable[datumHash]);\n    }\n    getUtxosWithUnit(addressOrCredential, unit) {\n        const utxos = Object.values(this.ledger).flatMap(({ utxo }) => {\n            if (typeof addressOrCredential === \"string\") {\n                return addressOrCredential === utxo.address && utxo.assets[unit] > 0n\n                    ? utxo\n                    : [];\n            }\n            else {\n                const { paymentCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(utxo.address);\n                return paymentCredential?.hash === addressOrCredential.hash &&\n                    utxo.assets[unit] > 0n\n                    ? utxo\n                    : [];\n            }\n        });\n        return Promise.resolve(utxos);\n    }\n    getUtxosByOutRef(outRefs) {\n        return Promise.resolve(outRefs.flatMap((outRef) => this.ledger[outRef.txHash + outRef.outputIndex]?.utxo || []));\n    }\n    getUtxoByUnit(unit) {\n        const utxos = Object.values(this.ledger).flatMap(({ utxo }) => utxo.assets[unit] > 0n ? utxo : []);\n        if (utxos.length > 1) {\n            throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n        }\n        return Promise.resolve(utxos[0]);\n    }\n    getDelegation(rewardAddress) {\n        return Promise.resolve({\n            poolId: this.chain[rewardAddress]?.delegation?.poolId || null,\n            rewards: this.chain[rewardAddress]?.delegation?.rewards || 0n,\n        });\n    }\n    awaitTx(txHash) {\n        if (this.mempool[txHash + 0]) {\n            this.awaitBlock();\n            return Promise.resolve(true);\n        }\n        return Promise.resolve(true);\n    }\n    /**\n     * Emulates the behaviour of the reward distribution at epoch boundaries.\n     * Stake keys need to be registered and delegated like on a real chain in order to receive rewards.\n     */\n    distributeRewards(rewards) {\n        for (const [rewardAddress, { registeredStake, delegation }] of Object.entries(this.chain)) {\n            if (registeredStake && delegation.poolId) {\n                this.chain[rewardAddress] = {\n                    registeredStake,\n                    delegation: {\n                        poolId: delegation.poolId,\n                        rewards: delegation.rewards += rewards,\n                    },\n                };\n            }\n        }\n        this.awaitBlock();\n    }\n    submitTx(tx) {\n        /*\n            Checks that are already handled by the transaction builder:\n              - Fee calculation\n              - Phase 2 evaluation\n              - Input value == Output value (including mint value)\n              - Min ada requirement\n              - Stake key registration deposit amount\n              - Collateral\n    \r\n            Checks that need to be done:\n              - Verify witnesses\n              - Correct count of scripts and vkeys\n              - Stake key registration\n              - Withdrawals\n              - Validity interval\n         */\n        const desTx = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.Transaction.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(tx));\n        const body = desTx.body();\n        const witnesses = desTx.witness_set();\n        const datums = witnesses.plutus_data();\n        const txHash = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_transaction(body).to_hex();\n        // Validity interval\n        // Lower bound is inclusive?\n        // Upper bound is inclusive?\n        const lowerBound = body.validity_start_interval()\n            ? parseInt(body.validity_start_interval().to_str())\n            : null;\n        const upperBound = body.ttl() ? parseInt(body.ttl().to_str()) : null;\n        if (Number.isInteger(lowerBound) && this.slot < lowerBound) {\n            throw new Error(`Lower bound (${lowerBound}) not in slot range (${this.slot}).`);\n        }\n        if (Number.isInteger(upperBound) && this.slot > upperBound) {\n            throw new Error(`Upper bound (${upperBound}) not in slot range (${this.slot}).`);\n        }\n        // Datums in witness set\n        const datumTable = (() => {\n            const table = {};\n            for (let i = 0; i < (datums?.len() || 0); i++) {\n                const datum = datums.get(i);\n                const datumHash = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.hash_plutus_data(datum).to_hex();\n                table[datumHash] = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(datum.to_bytes());\n            }\n            return table;\n        })();\n        const consumedHashes = new Set();\n        // Witness keys\n        const keyHashes = (() => {\n            const keyHashes = [];\n            for (let i = 0; i < (witnesses.vkeys()?.len() || 0); i++) {\n                const witness = witnesses.vkeys().get(i);\n                const publicKey = witness.vkey().public_key();\n                const keyHash = publicKey.hash().to_hex();\n                if (!publicKey.verify((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(txHash), witness.signature())) {\n                    throw new Error(`Invalid vkey witness. Key hash: ${keyHash}`);\n                }\n                keyHashes.push(keyHash);\n            }\n            return keyHashes;\n        })();\n        // We only need this to verify native scripts. The check happens in the CML.\n        const edKeyHashes = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHashes[\"new\"]();\n        keyHashes.forEach((keyHash) => edKeyHashes.add(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.Ed25519KeyHash.from_hex(keyHash)));\n        const nativeHashes = (() => {\n            const scriptHashes = [];\n            for (let i = 0; i < (witnesses.native_scripts()?.len() || 0); i++) {\n                const witness = witnesses.native_scripts().get(i);\n                const scriptHash = witness.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.NativeScript)\n                    .to_hex();\n                if (!witness.verify(Number.isInteger(lowerBound)\n                    ? _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(lowerBound.toString())\n                    : undefined, Number.isInteger(upperBound)\n                    ? _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(upperBound.toString())\n                    : undefined, edKeyHashes)) {\n                    throw new Error(`Invalid native script witness. Script hash: ${scriptHash}`);\n                }\n                for (let i = 0; i < witness.get_required_signers().len(); i++) {\n                    const keyHash = witness.get_required_signers().get(i).to_hex();\n                    consumedHashes.add(keyHash);\n                }\n                scriptHashes.push(scriptHash);\n            }\n            return scriptHashes;\n        })();\n        const nativeHashesOptional = {};\n        const plutusHashesOptional = [];\n        const plutusHashes = (() => {\n            const scriptHashes = [];\n            for (let i = 0; i < (witnesses.plutus_scripts()?.len() || 0); i++) {\n                const script = witnesses.plutus_scripts().get(i);\n                const scriptHash = script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.PlutusV1)\n                    .to_hex();\n                scriptHashes.push(scriptHash);\n            }\n            for (let i = 0; i < (witnesses.plutus_v2_scripts()?.len() || 0); i++) {\n                const script = witnesses.plutus_v2_scripts().get(i);\n                const scriptHash = script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.PlutusV2)\n                    .to_hex();\n                scriptHashes.push(scriptHash);\n            }\n            return scriptHashes;\n        })();\n        const inputs = body.inputs();\n        inputs.sort();\n        const resolvedInputs = [];\n        // Check existence of inputs and look for script refs.\n        for (let i = 0; i < inputs.len(); i++) {\n            const input = inputs.get(i);\n            const outRef = input.transaction_id().to_hex() + input.index().to_str();\n            const entryLedger = this.ledger[outRef];\n            const { entry, type } = !entryLedger\n                ? { entry: this.mempool[outRef], type: \"Mempool\" }\n                : { entry: entryLedger, type: \"Ledger\" };\n            if (!entry || entry.spent) {\n                throw new Error(`Could not spend UTxO: ${JSON.stringify({\n                    txHash: entry?.utxo.txHash,\n                    outputIndex: entry?.utxo.outputIndex,\n                })}\\nIt does not exist or was already spent.`);\n            }\n            const scriptRef = entry.utxo.scriptRef;\n            if (scriptRef) {\n                switch (scriptRef.type) {\n                    case \"Native\": {\n                        const script = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.NativeScript.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(scriptRef.script));\n                        nativeHashesOptional[script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.NativeScript).to_hex()] = script;\n                        break;\n                    }\n                    case \"PlutusV1\": {\n                        const script = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(scriptRef.script));\n                        plutusHashesOptional.push(script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.PlutusV1).to_hex());\n                        break;\n                    }\n                    case \"PlutusV2\": {\n                        const script = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(scriptRef.script));\n                        plutusHashesOptional.push(script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.PlutusV2).to_hex());\n                        break;\n                    }\n                }\n            }\n            if (entry.utxo.datumHash)\n                consumedHashes.add(entry.utxo.datumHash);\n            resolvedInputs.push({ entry, type });\n        }\n        // Check existence of reference inputs and look for script refs.\n        for (let i = 0; i < (body.reference_inputs()?.len() || 0); i++) {\n            const input = body.reference_inputs().get(i);\n            const outRef = input.transaction_id().to_hex() + input.index().to_str();\n            const entry = this.ledger[outRef] || this.mempool[outRef];\n            if (!entry || entry.spent) {\n                throw new Error(`Could not read UTxO: ${JSON.stringify({\n                    txHash: entry?.utxo.txHash,\n                    outputIndex: entry?.utxo.outputIndex,\n                })}\\nIt does not exist or was already spent.`);\n            }\n            const scriptRef = entry.utxo.scriptRef;\n            if (scriptRef) {\n                switch (scriptRef.type) {\n                    case \"Native\": {\n                        const script = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.NativeScript.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(scriptRef.script));\n                        nativeHashesOptional[script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.NativeScript).to_hex()] = script;\n                        break;\n                    }\n                    case \"PlutusV1\": {\n                        const script = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(scriptRef.script));\n                        plutusHashesOptional.push(script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.PlutusV1).to_hex());\n                        break;\n                    }\n                    case \"PlutusV2\": {\n                        const script = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript.from_bytes((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromHex)(scriptRef.script));\n                        plutusHashesOptional.push(script.hash(_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.ScriptHashNamespace.PlutusV2).to_hex());\n                        break;\n                    }\n                }\n            }\n            if (entry.utxo.datumHash)\n                consumedHashes.add(entry.utxo.datumHash);\n        }\n        const redeemers = (() => {\n            const tagMap = {\n                0: \"Spend\",\n                1: \"Mint\",\n                2: \"Cert\",\n                3: \"Reward\",\n            };\n            const collected = [];\n            for (let i = 0; i < (witnesses.redeemers()?.len() || 0); i++) {\n                const redeemer = witnesses.redeemers().get(i);\n                collected.push({\n                    tag: tagMap[redeemer.tag().kind()],\n                    index: parseInt(redeemer.index().to_str()),\n                });\n            }\n            return collected;\n        })();\n        function checkAndConsumeHash(credential, tag, index) {\n            switch (credential.type) {\n                case \"Key\": {\n                    if (!keyHashes.includes(credential.hash)) {\n                        throw new Error(`Missing vkey witness. Key hash: ${credential.hash}`);\n                    }\n                    consumedHashes.add(credential.hash);\n                    break;\n                }\n                case \"Script\": {\n                    if (nativeHashes.includes(credential.hash)) {\n                        consumedHashes.add(credential.hash);\n                        break;\n                    }\n                    else if (nativeHashesOptional[credential.hash]) {\n                        if (!nativeHashesOptional[credential.hash].verify(Number.isInteger(lowerBound)\n                            ? _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(lowerBound.toString())\n                            : undefined, Number.isInteger(upperBound)\n                            ? _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(upperBound.toString())\n                            : undefined, edKeyHashes)) {\n                            throw new Error(`Invalid native script witness. Script hash: ${credential.hash}`);\n                        }\n                        break;\n                    }\n                    else if (plutusHashes.includes(credential.hash) ||\n                        plutusHashesOptional.includes(credential.hash)) {\n                        if (redeemers.find((redeemer) => redeemer.tag === tag && redeemer.index === index)) {\n                            consumedHashes.add(credential.hash);\n                            break;\n                        }\n                    }\n                    throw new Error(`Missing script witness. Script hash: ${credential.hash}`);\n                }\n            }\n        }\n        // Check collateral inputs\n        for (let i = 0; i < (body.collateral()?.len() || 0); i++) {\n            const input = body.collateral().get(i);\n            const outRef = input.transaction_id().to_hex() + input.index().to_str();\n            const entry = this.ledger[outRef] || this.mempool[outRef];\n            if (!entry || entry.spent) {\n                throw new Error(`Could not read UTxO: ${JSON.stringify({\n                    txHash: entry?.utxo.txHash,\n                    outputIndex: entry?.utxo.outputIndex,\n                })}\\nIt does not exist or was already spent.`);\n            }\n            const { paymentCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(entry.utxo.address);\n            if (paymentCredential?.type === \"Script\") {\n                throw new Error(\"Collateral inputs can only contain vkeys.\");\n            }\n            checkAndConsumeHash(paymentCredential, null, null);\n        }\n        // Check required signers\n        for (let i = 0; i < (body.required_signers()?.len() || 0); i++) {\n            const signer = body.required_signers().get(i);\n            checkAndConsumeHash({ type: \"Key\", hash: signer.to_hex() }, null, null);\n        }\n        // Check mint witnesses\n        for (let index = 0; index < (body.mint()?.keys().len() || 0); index++) {\n            const policyId = body.mint().keys().get(index).to_hex();\n            checkAndConsumeHash({ type: \"Script\", hash: policyId }, \"Mint\", index);\n        }\n        // Check withdrawal witnesses\n        const withdrawalRequests = [];\n        for (let index = 0; index < (body.withdrawals()?.keys().len() || 0); index++) {\n            const rawAddress = body.withdrawals().keys().get(index);\n            const withdrawal = BigInt(body.withdrawals().get(rawAddress).to_str());\n            const rewardAddress = rawAddress.to_address().to_bech32(undefined);\n            const { stakeCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(rewardAddress);\n            checkAndConsumeHash(stakeCredential, \"Reward\", index);\n            if (this.chain[rewardAddress]?.delegation.rewards !== withdrawal) {\n                throw new Error(\"Withdrawal amount doesn't match actual reward balance.\");\n            }\n            withdrawalRequests.push({ rewardAddress, withdrawal });\n        }\n        // Check cert witnesses\n        const certRequests = [];\n        for (let index = 0; index < (body.certs()?.len() || 0); index++) {\n            /*\n              Checking only:\n              1. Stake registration\n              2. Stake deregistration\n              3. Stake delegation\n      \r\n              All other certificate types are not checked and considered valid.\n            */\n            const cert = body.certs().get(index);\n            switch (cert.kind()) {\n                case 0: {\n                    const registration = cert.as_stake_registration();\n                    const rewardAddress = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress[\"new\"](_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.NetworkInfo.testnet().network_id(), registration.stake_credential()).to_address().to_bech32(undefined);\n                    if (this.chain[rewardAddress]?.registeredStake) {\n                        throw new Error(`Stake key is already registered. Reward address: ${rewardAddress}`);\n                    }\n                    certRequests.push({ type: \"Registration\", rewardAddress });\n                    break;\n                }\n                case 1: {\n                    const deregistration = cert.as_stake_deregistration();\n                    const rewardAddress = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress[\"new\"](_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.NetworkInfo.testnet().network_id(), deregistration.stake_credential()).to_address().to_bech32(undefined);\n                    const { stakeCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(rewardAddress);\n                    checkAndConsumeHash(stakeCredential, \"Cert\", index);\n                    if (!this.chain[rewardAddress]?.registeredStake) {\n                        throw new Error(`Stake key is already deregistered. Reward address: ${rewardAddress}`);\n                    }\n                    certRequests.push({ type: \"Deregistration\", rewardAddress });\n                    break;\n                }\n                case 2: {\n                    const delegation = cert.as_stake_delegation();\n                    const rewardAddress = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.RewardAddress[\"new\"](_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.NetworkInfo.testnet().network_id(), delegation.stake_credential()).to_address().to_bech32(undefined);\n                    const poolId = delegation.pool_keyhash().to_bech32(\"pool\");\n                    const { stakeCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(rewardAddress);\n                    checkAndConsumeHash(stakeCredential, \"Cert\", index);\n                    if (!this.chain[rewardAddress]?.registeredStake &&\n                        !certRequests.find((request) => request.type === \"Registration\" &&\n                            request.rewardAddress === rewardAddress)) {\n                        throw new Error(`Stake key is not registered. Reward address: ${rewardAddress}`);\n                    }\n                    certRequests.push({ type: \"Delegation\", rewardAddress, poolId });\n                    break;\n                }\n            }\n        }\n        // Check input witnesses\n        resolvedInputs.forEach(({ entry: { utxo } }, index) => {\n            const { paymentCredential } = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddressDetails)(utxo.address);\n            checkAndConsumeHash(paymentCredential, \"Spend\", index);\n        });\n        // Create outputs and consume datum hashes\n        const outputs = (() => {\n            const collected = [];\n            for (let i = 0; i < body.outputs().len(); i++) {\n                const output = body.outputs().get(i);\n                const unspentOutput = _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionUnspentOutput[\"new\"](_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionInput[\"new\"](_core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.TransactionHash.from_hex(txHash), _core_core_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(i.toString())), output);\n                const utxo = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.coreToUtxo)(unspentOutput);\n                if (utxo.datumHash)\n                    consumedHashes.add(utxo.datumHash);\n                collected.push({\n                    utxo,\n                    spent: false,\n                });\n            }\n            return collected;\n        })();\n        // Check consumed witnesses\n        const [extraKeyHash] = keyHashes.filter((keyHash) => !consumedHashes.has(keyHash));\n        if (extraKeyHash) {\n            throw new Error(`Extraneous vkey witness. Key hash: ${extraKeyHash}`);\n        }\n        const [extraNativeHash] = nativeHashes.filter((scriptHash) => !consumedHashes.has(scriptHash));\n        if (extraNativeHash) {\n            throw new Error(`Extraneous native script. Script hash: ${extraNativeHash}`);\n        }\n        const [extraPlutusHash] = plutusHashes.filter((scriptHash) => !consumedHashes.has(scriptHash));\n        if (extraPlutusHash) {\n            throw new Error(`Extraneous plutus script. Script hash: ${extraPlutusHash}`);\n        }\n        const [extraDatumHash] = Object.keys(datumTable).filter((datumHash) => !consumedHashes.has(datumHash));\n        if (extraDatumHash) {\n            throw new Error(`Extraneous plutus data. Datum hash: ${extraDatumHash}`);\n        }\n        // Apply transitions\n        resolvedInputs.forEach(({ entry, type }) => {\n            const outRef = entry.utxo.txHash + entry.utxo.outputIndex;\n            entry.spent = true;\n            if (type === \"Ledger\")\n                this.ledger[outRef] = entry;\n            else if (type === \"Mempool\")\n                this.mempool[outRef] = entry;\n        });\n        withdrawalRequests.forEach(({ rewardAddress, withdrawal }) => {\n            this.chain[rewardAddress].delegation.rewards -= withdrawal;\n        });\n        certRequests.forEach(({ type, rewardAddress, poolId }) => {\n            switch (type) {\n                case \"Registration\": {\n                    if (this.chain[rewardAddress]) {\n                        this.chain[rewardAddress].registeredStake = true;\n                    }\n                    else {\n                        this.chain[rewardAddress] = {\n                            registeredStake: true,\n                            delegation: { poolId: null, rewards: 0n },\n                        };\n                    }\n                    break;\n                }\n                case \"Deregistration\": {\n                    this.chain[rewardAddress].registeredStake = false;\n                    this.chain[rewardAddress].delegation.poolId = null;\n                    break;\n                }\n                case \"Delegation\": {\n                    this.chain[rewardAddress].delegation.poolId = poolId;\n                }\n            }\n        });\n        outputs.forEach(({ utxo, spent }) => {\n            this.mempool[utxo.txHash + utxo.outputIndex] = {\n                utxo,\n                spent,\n            };\n        });\n        for (const [datumHash, datum] of Object.entries(datumTable)) {\n            this.datumTable[datumHash] = datum;\n        }\n        return Promise.resolve(txHash);\n    }\n    log() {\n        function getRandomColor(unit) {\n            const seed = unit === \"lovelace\" ? \"1\" : unit;\n            // Convert the seed string to a number\n            let num = 0;\n            for (let i = 0; i < seed.length; i++) {\n                num += seed.charCodeAt(i);\n            }\n            // Generate a color based on the seed number\n            const r = (num * 123) % 256;\n            const g = (num * 321) % 256;\n            const b = (num * 213) % 256;\n            // Return the color as a hex string\n            return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n        }\n        const totalBalances = {};\n        const balances = {};\n        for (const { utxo } of Object.values(this.ledger)) {\n            for (const [unit, quantity] of Object.entries(utxo.assets)) {\n                if (!balances[utxo.address]) {\n                    balances[utxo.address] = { [unit]: quantity };\n                }\n                else if (!balances[utxo.address]?.[unit]) {\n                    balances[utxo.address][unit] = quantity;\n                }\n                else {\n                    balances[utxo.address][unit] += quantity;\n                }\n                if (!totalBalances[unit]) {\n                    totalBalances[unit] = quantity;\n                }\n                else {\n                    totalBalances[unit] += quantity;\n                }\n            }\n        }\n        console.log(\"\\n%cBlockchain state\", \"color:purple\");\n        console.log(`\n    Block height:   %c${this.blockHeight}%c\n    Slot:           %c${this.slot}%c\n    Unix time:      %c${this.time}\n  `, \"color:yellow\", \"color:white\", \"color:yellow\", \"color:white\", \"color:yellow\");\n        console.log(\"\\n\");\n        for (const [address, assets] of Object.entries(balances)) {\n            console.log(`Address: %c${address}`, \"color:blue\", \"\\n\");\n            for (const [unit, quantity] of Object.entries(assets)) {\n                const barLength = Math.max(Math.floor(60 * (Number(quantity) / Number(totalBalances[unit]))), 1);\n                console.log(`%c${\"\\u2586\".repeat(barLength) + \" \".repeat(60 - barLength)}`, `color: ${getRandomColor(unit)}`, \"\", `${unit}:`, quantity, \"\");\n            }\n            console.log(`\\n${\"\\u2581\".repeat(60)}\\n`);\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/provider/emulator.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/provider/kupmios.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/provider/kupmios.js ***!
  \****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Kupmios\": () => (/* binding */ Kupmios)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mod.js */ \"./node_modules/lucid-cardano/esm/src/utils/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__, _utils_mod_js__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nclass Kupmios {\n    /**\n     * @param kupoUrl: http(s)://localhost:1442\n     * @param ogmiosUrl: ws(s)://localhost:1337\n     */\n    constructor(kupoUrl, ogmiosUrl) {\n        Object.defineProperty(this, \"kupoUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ogmiosUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.kupoUrl = kupoUrl;\n        this.ogmiosUrl = ogmiosUrl;\n    }\n    async getProtocolParameters() {\n        const client = await this.ogmiosWsp(\"Query\", {\n            query: \"currentProtocolParameters\",\n        });\n        return new Promise((res, rej) => {\n            client.addEventListener(\"message\", (msg) => {\n                try {\n                    const { result } = JSON.parse(msg.data);\n                    // deno-lint-ignore no-explicit-any\n                    const costModels = {};\n                    Object.keys(result.costModels).forEach((v) => {\n                        const version = v.split(\":\")[1].toUpperCase();\n                        const plutusVersion = \"Plutus\" + version;\n                        costModels[plutusVersion] = result.costModels[v];\n                    });\n                    const [memNum, memDenom] = result.prices.memory.split(\"/\");\n                    const [stepsNum, stepsDenom] = result.prices.steps.split(\"/\");\n                    res({\n                        minFeeA: parseInt(result.minFeeCoefficient),\n                        minFeeB: parseInt(result.minFeeConstant),\n                        maxTxSize: parseInt(result.maxTxSize),\n                        maxValSize: parseInt(result.maxValueSize),\n                        keyDeposit: BigInt(result.stakeKeyDeposit),\n                        poolDeposit: BigInt(result.poolDeposit),\n                        priceMem: parseInt(memNum) / parseInt(memDenom),\n                        priceStep: parseInt(stepsNum) / parseInt(stepsDenom),\n                        maxTxExMem: BigInt(result.maxExecutionUnitsPerTransaction.memory),\n                        maxTxExSteps: BigInt(result.maxExecutionUnitsPerTransaction.steps),\n                        coinsPerUtxoByte: BigInt(result.coinsPerUtxoByte),\n                        collateralPercentage: parseInt(result.collateralPercentage),\n                        maxCollateralInputs: parseInt(result.maxCollateralInputs),\n                        costModels,\n                    });\n                    client.close();\n                }\n                catch (e) {\n                    rej(e);\n                }\n            }, { once: true });\n        });\n    }\n    async getUtxos(addressOrCredential) {\n        const isAddress = typeof addressOrCredential === \"string\";\n        const queryPredicate = isAddress\n            ? addressOrCredential\n            : addressOrCredential.hash;\n        const result = await fetch(`${this.kupoUrl}/matches/${queryPredicate}${isAddress ? \"\" : \"/*\"}?unspent`)\n            .then((res) => res.json());\n        return this.kupmiosUtxosToUtxos(result);\n    }\n    async getUtxosWithUnit(addressOrCredential, unit) {\n        const isAddress = typeof addressOrCredential === \"string\";\n        const queryPredicate = isAddress\n            ? addressOrCredential\n            : addressOrCredential.hash;\n        const { policyId, assetName } = (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromUnit)(unit);\n        const result = await fetch(`${this.kupoUrl}/matches/${queryPredicate}${isAddress ? \"\" : \"/*\"}?unspent&policy_id=${policyId}${assetName ? `&asset_name=${assetName}` : \"\"}`)\n            .then((res) => res.json());\n        return this.kupmiosUtxosToUtxos(result);\n    }\n    async getUtxoByUnit(unit) {\n        const { policyId, assetName } = (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromUnit)(unit);\n        const result = await fetch(`${this.kupoUrl}/matches/${policyId}.${assetName ? `${assetName}` : \"*\"}?unspent`)\n            .then((res) => res.json());\n        const utxos = await this.kupmiosUtxosToUtxos(result);\n        if (utxos.length > 1) {\n            throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n        }\n        return utxos[0];\n    }\n    async getUtxosByOutRef(outRefs) {\n        const queryHashes = [...new Set(outRefs.map((outRef) => outRef.txHash))];\n        const utxos = await Promise.all(queryHashes.map(async (txHash) => {\n            const result = await fetch(`${this.kupoUrl}/matches/*@${txHash}?unspent`).then((res) => res.json());\n            return this.kupmiosUtxosToUtxos(result);\n        }));\n        return utxos.reduce((acc, utxos) => acc.concat(utxos), []).filter((utxo) => outRefs.some((outRef) => utxo.txHash === outRef.txHash && utxo.outputIndex === outRef.outputIndex));\n    }\n    async getDelegation(rewardAddress) {\n        const client = await this.ogmiosWsp(\"Query\", {\n            query: { \"delegationsAndRewards\": [rewardAddress] },\n        });\n        return new Promise((res, rej) => {\n            client.addEventListener(\"message\", (msg) => {\n                try {\n                    const { result } = JSON.parse(msg.data);\n                    const delegation = (result ? Object.values(result)[0] : {});\n                    res({\n                        poolId: delegation?.delegate || null,\n                        rewards: BigInt(delegation?.rewards || 0),\n                    });\n                    client.close();\n                }\n                catch (e) {\n                    rej(e);\n                }\n            }, { once: true });\n        });\n    }\n    async getDatum(datumHash) {\n        const result = await fetch(`${this.kupoUrl}/datums/${datumHash}`).then((res) => res.json());\n        if (!result || !result.datum) {\n            throw new Error(`No datum found for datum hash: ${datumHash}`);\n        }\n        return result.datum;\n    }\n    awaitTx(txHash, checkInterval = 3000) {\n        return new Promise((res) => {\n            const confirmation = setInterval(async () => {\n                const isConfirmed = await fetch(`${this.kupoUrl}/matches/*@${txHash}?unspent`).then((res) => res.json());\n                if (isConfirmed && isConfirmed.length > 0) {\n                    clearInterval(confirmation);\n                    res(true);\n                    return;\n                }\n            }, checkInterval);\n        });\n    }\n    async submitTx(tx) {\n        const client = await this.ogmiosWsp(\"SubmitTx\", {\n            submit: tx,\n        });\n        return new Promise((res, rej) => {\n            client.addEventListener(\"message\", (msg) => {\n                try {\n                    const { result } = JSON.parse(msg.data);\n                    if (result.SubmitSuccess)\n                        res(result.SubmitSuccess.txId);\n                    else\n                        rej(result.SubmitFail);\n                    client.close();\n                }\n                catch (e) {\n                    rej(e);\n                }\n            }, { once: true });\n        });\n    }\n    kupmiosUtxosToUtxos(utxos) {\n        // deno-lint-ignore no-explicit-any\n        return Promise.all(utxos.map(async (utxo) => {\n            return ({\n                txHash: utxo.transaction_id,\n                outputIndex: parseInt(utxo.output_index),\n                address: utxo.address,\n                assets: (() => {\n                    const a = { lovelace: BigInt(utxo.value.coins) };\n                    Object.keys(utxo.value.assets).forEach((unit) => {\n                        a[unit.replace(\".\", \"\")] = BigInt(utxo.value.assets[unit]);\n                    });\n                    return a;\n                })(),\n                datumHash: utxo?.datum_type === \"hash\" ? utxo.datum_hash : null,\n                datum: utxo?.datum_type === \"inline\"\n                    ? await this.getDatum(utxo.datum_hash)\n                    : null,\n                scriptRef: utxo.script_hash &&\n                    (await (async () => {\n                        const { script, language, } = await fetch(`${this.kupoUrl}/scripts/${utxo.script_hash}`).then((res) => res.json());\n                        if (language === \"native\") {\n                            return { type: \"Native\", script };\n                        }\n                        else if (language === \"plutus:v1\") {\n                            return {\n                                type: \"PlutusV1\",\n                                script: (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript[\"new\"]((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(script)).to_bytes()),\n                            };\n                        }\n                        else if (language === \"plutus:v2\") {\n                            return {\n                                type: \"PlutusV2\",\n                                script: (0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.PlutusScript[\"new\"]((0,_utils_mod_js__WEBPACK_IMPORTED_MODULE_1__.fromHex)(script)).to_bytes()),\n                            };\n                        }\n                    })()),\n            });\n        }));\n    }\n    async ogmiosWsp(methodname, args) {\n        const client = new WebSocket(this.ogmiosUrl);\n        await new Promise((res) => {\n            client.addEventListener(\"open\", () => res(1), { once: true });\n        });\n        client.send(JSON.stringify({\n            type: \"jsonwsp/request\",\n            version: \"1.0\",\n            servicename: \"ogmios\",\n            methodname,\n            args,\n        }));\n        return client;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/provider/kupmios.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/provider/mod.js":
/*!************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/provider/mod.js ***!
  \************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blockfrost\": () => (/* reexport safe */ _blockfrost_js__WEBPACK_IMPORTED_MODULE_0__.Blockfrost),\n/* harmony export */   \"Emulator\": () => (/* reexport safe */ _emulator_js__WEBPACK_IMPORTED_MODULE_2__.Emulator),\n/* harmony export */   \"Kupmios\": () => (/* reexport safe */ _kupmios_js__WEBPACK_IMPORTED_MODULE_1__.Kupmios),\n/* harmony export */   \"datumJsonToCbor\": () => (/* reexport safe */ _blockfrost_js__WEBPACK_IMPORTED_MODULE_0__.datumJsonToCbor)\n/* harmony export */ });\n/* harmony import */ var _blockfrost_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blockfrost.js */ \"./node_modules/lucid-cardano/esm/src/provider/blockfrost.js\");\n/* harmony import */ var _kupmios_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kupmios.js */ \"./node_modules/lucid-cardano/esm/src/provider/kupmios.js\");\n/* harmony import */ var _emulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emulator.js */ \"./node_modules/lucid-cardano/esm/src/provider/emulator.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_blockfrost_js__WEBPACK_IMPORTED_MODULE_0__, _kupmios_js__WEBPACK_IMPORTED_MODULE_1__, _emulator_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_blockfrost_js__WEBPACK_IMPORTED_MODULE_0__, _kupmios_js__WEBPACK_IMPORTED_MODULE_1__, _emulator_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/provider/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/types/global.js":
/*!************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/types/global.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/types/global.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/types/mod.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/types/mod.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/lucid-cardano/esm/src/types/types.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global.js */ \"./node_modules/lucid-cardano/esm/src/types/global.js\");\n\n\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/types/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/types/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/types/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/types/types.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/utils/cost_model.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/utils/cost_model.js ***!
  \****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PROTOCOL_PARAMETERS_DEFAULT\": () => (/* binding */ PROTOCOL_PARAMETERS_DEFAULT),\n/* harmony export */   \"createCostModels\": () => (/* binding */ createCostModels)\n/* harmony export */ });\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_0__]);\n_core_mod_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nfunction createCostModels(costModels) {\n    const costmdls = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Costmdls[\"new\"]();\n    // add plutus v1\n    const costmdlV1 = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.CostModel[\"new\"]();\n    Object.values(costModels.PlutusV1).forEach((cost, index) => {\n        costmdlV1.set(index, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Int[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(cost.toString())));\n    });\n    costmdls.insert(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Language.new_plutus_v1(), costmdlV1);\n    // add plutus v2\n    const costmdlV2 = _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.CostModel.new_plutus_v2();\n    Object.values(costModels.PlutusV2 || []).forEach((cost, index) => {\n        costmdlV2.set(index, _core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Int[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.BigNum.from_str(cost.toString())));\n    });\n    costmdls.insert(_core_mod_js__WEBPACK_IMPORTED_MODULE_0__.C.Language.new_plutus_v2(), costmdlV2);\n    return costmdls;\n}\nconst PROTOCOL_PARAMETERS_DEFAULT = {\n    minFeeA: 44,\n    minFeeB: 155381,\n    maxTxSize: 16384,\n    maxValSize: 5000,\n    keyDeposit: 2000000n,\n    poolDeposit: 500000000n,\n    priceMem: 0.0577,\n    priceStep: 0.0000721,\n    maxTxExMem: 14000000n,\n    maxTxExSteps: 10000000000n,\n    coinsPerUtxoByte: 4310n,\n    collateralPercentage: 150,\n    maxCollateralInputs: 3,\n    costModels: {\n        PlutusV1: {\n            \"addInteger-cpu-arguments-intercept\": 205665,\n            \"addInteger-cpu-arguments-slope\": 812,\n            \"addInteger-memory-arguments-intercept\": 1,\n            \"addInteger-memory-arguments-slope\": 1,\n            \"appendByteString-cpu-arguments-intercept\": 1000,\n            \"appendByteString-cpu-arguments-slope\": 571,\n            \"appendByteString-memory-arguments-intercept\": 0,\n            \"appendByteString-memory-arguments-slope\": 1,\n            \"appendString-cpu-arguments-intercept\": 1000,\n            \"appendString-cpu-arguments-slope\": 24177,\n            \"appendString-memory-arguments-intercept\": 4,\n            \"appendString-memory-arguments-slope\": 1,\n            \"bData-cpu-arguments\": 1000,\n            \"bData-memory-arguments\": 32,\n            \"blake2b_256-cpu-arguments-intercept\": 117366,\n            \"blake2b_256-cpu-arguments-slope\": 10475,\n            \"blake2b_256-memory-arguments\": 4,\n            \"cekApplyCost-exBudgetCPU\": 23000,\n            \"cekApplyCost-exBudgetMemory\": 100,\n            \"cekBuiltinCost-exBudgetCPU\": 23000,\n            \"cekBuiltinCost-exBudgetMemory\": 100,\n            \"cekConstCost-exBudgetCPU\": 23000,\n            \"cekConstCost-exBudgetMemory\": 100,\n            \"cekDelayCost-exBudgetCPU\": 23000,\n            \"cekDelayCost-exBudgetMemory\": 100,\n            \"cekForceCost-exBudgetCPU\": 23000,\n            \"cekForceCost-exBudgetMemory\": 100,\n            \"cekLamCost-exBudgetCPU\": 23000,\n            \"cekLamCost-exBudgetMemory\": 100,\n            \"cekStartupCost-exBudgetCPU\": 100,\n            \"cekStartupCost-exBudgetMemory\": 100,\n            \"cekVarCost-exBudgetCPU\": 23000,\n            \"cekVarCost-exBudgetMemory\": 100,\n            \"chooseData-cpu-arguments\": 19537,\n            \"chooseData-memory-arguments\": 32,\n            \"chooseList-cpu-arguments\": 175354,\n            \"chooseList-memory-arguments\": 32,\n            \"chooseUnit-cpu-arguments\": 46417,\n            \"chooseUnit-memory-arguments\": 4,\n            \"consByteString-cpu-arguments-intercept\": 221973,\n            \"consByteString-cpu-arguments-slope\": 511,\n            \"consByteString-memory-arguments-intercept\": 0,\n            \"consByteString-memory-arguments-slope\": 1,\n            \"constrData-cpu-arguments\": 89141,\n            \"constrData-memory-arguments\": 32,\n            \"decodeUtf8-cpu-arguments-intercept\": 497525,\n            \"decodeUtf8-cpu-arguments-slope\": 14068,\n            \"decodeUtf8-memory-arguments-intercept\": 4,\n            \"decodeUtf8-memory-arguments-slope\": 2,\n            \"divideInteger-cpu-arguments-constant\": 196500,\n            \"divideInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"divideInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"divideInteger-memory-arguments-intercept\": 0,\n            \"divideInteger-memory-arguments-minimum\": 1,\n            \"divideInteger-memory-arguments-slope\": 1,\n            \"encodeUtf8-cpu-arguments-intercept\": 1000,\n            \"encodeUtf8-cpu-arguments-slope\": 28662,\n            \"encodeUtf8-memory-arguments-intercept\": 4,\n            \"encodeUtf8-memory-arguments-slope\": 2,\n            \"equalsByteString-cpu-arguments-constant\": 245000,\n            \"equalsByteString-cpu-arguments-intercept\": 216773,\n            \"equalsByteString-cpu-arguments-slope\": 62,\n            \"equalsByteString-memory-arguments\": 1,\n            \"equalsData-cpu-arguments-intercept\": 1060367,\n            \"equalsData-cpu-arguments-slope\": 12586,\n            \"equalsData-memory-arguments\": 1,\n            \"equalsInteger-cpu-arguments-intercept\": 208512,\n            \"equalsInteger-cpu-arguments-slope\": 421,\n            \"equalsInteger-memory-arguments\": 1,\n            \"equalsString-cpu-arguments-constant\": 187000,\n            \"equalsString-cpu-arguments-intercept\": 1000,\n            \"equalsString-cpu-arguments-slope\": 52998,\n            \"equalsString-memory-arguments\": 1,\n            \"fstPair-cpu-arguments\": 80436,\n            \"fstPair-memory-arguments\": 32,\n            \"headList-cpu-arguments\": 43249,\n            \"headList-memory-arguments\": 32,\n            \"iData-cpu-arguments\": 1000,\n            \"iData-memory-arguments\": 32,\n            \"ifThenElse-cpu-arguments\": 80556,\n            \"ifThenElse-memory-arguments\": 1,\n            \"indexByteString-cpu-arguments\": 57667,\n            \"indexByteString-memory-arguments\": 4,\n            \"lengthOfByteString-cpu-arguments\": 1000,\n            \"lengthOfByteString-memory-arguments\": 10,\n            \"lessThanByteString-cpu-arguments-intercept\": 197145,\n            \"lessThanByteString-cpu-arguments-slope\": 156,\n            \"lessThanByteString-memory-arguments\": 1,\n            \"lessThanEqualsByteString-cpu-arguments-intercept\": 197145,\n            \"lessThanEqualsByteString-cpu-arguments-slope\": 156,\n            \"lessThanEqualsByteString-memory-arguments\": 1,\n            \"lessThanEqualsInteger-cpu-arguments-intercept\": 204924,\n            \"lessThanEqualsInteger-cpu-arguments-slope\": 473,\n            \"lessThanEqualsInteger-memory-arguments\": 1,\n            \"lessThanInteger-cpu-arguments-intercept\": 208896,\n            \"lessThanInteger-cpu-arguments-slope\": 511,\n            \"lessThanInteger-memory-arguments\": 1,\n            \"listData-cpu-arguments\": 52467,\n            \"listData-memory-arguments\": 32,\n            \"mapData-cpu-arguments\": 64832,\n            \"mapData-memory-arguments\": 32,\n            \"mkCons-cpu-arguments\": 65493,\n            \"mkCons-memory-arguments\": 32,\n            \"mkNilData-cpu-arguments\": 22558,\n            \"mkNilData-memory-arguments\": 32,\n            \"mkNilPairData-cpu-arguments\": 16563,\n            \"mkNilPairData-memory-arguments\": 32,\n            \"mkPairData-cpu-arguments\": 76511,\n            \"mkPairData-memory-arguments\": 32,\n            \"modInteger-cpu-arguments-constant\": 196500,\n            \"modInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"modInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"modInteger-memory-arguments-intercept\": 0,\n            \"modInteger-memory-arguments-minimum\": 1,\n            \"modInteger-memory-arguments-slope\": 1,\n            \"multiplyInteger-cpu-arguments-intercept\": 69522,\n            \"multiplyInteger-cpu-arguments-slope\": 11687,\n            \"multiplyInteger-memory-arguments-intercept\": 0,\n            \"multiplyInteger-memory-arguments-slope\": 1,\n            \"nullList-cpu-arguments\": 60091,\n            \"nullList-memory-arguments\": 32,\n            \"quotientInteger-cpu-arguments-constant\": 196500,\n            \"quotientInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"quotientInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"quotientInteger-memory-arguments-intercept\": 0,\n            \"quotientInteger-memory-arguments-minimum\": 1,\n            \"quotientInteger-memory-arguments-slope\": 1,\n            \"remainderInteger-cpu-arguments-constant\": 196500,\n            \"remainderInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"remainderInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"remainderInteger-memory-arguments-intercept\": 0,\n            \"remainderInteger-memory-arguments-minimum\": 1,\n            \"remainderInteger-memory-arguments-slope\": 1,\n            \"sha2_256-cpu-arguments-intercept\": 806990,\n            \"sha2_256-cpu-arguments-slope\": 30482,\n            \"sha2_256-memory-arguments\": 4,\n            \"sha3_256-cpu-arguments-intercept\": 1927926,\n            \"sha3_256-cpu-arguments-slope\": 82523,\n            \"sha3_256-memory-arguments\": 4,\n            \"sliceByteString-cpu-arguments-intercept\": 265318,\n            \"sliceByteString-cpu-arguments-slope\": 0,\n            \"sliceByteString-memory-arguments-intercept\": 4,\n            \"sliceByteString-memory-arguments-slope\": 0,\n            \"sndPair-cpu-arguments\": 85931,\n            \"sndPair-memory-arguments\": 32,\n            \"subtractInteger-cpu-arguments-intercept\": 205665,\n            \"subtractInteger-cpu-arguments-slope\": 812,\n            \"subtractInteger-memory-arguments-intercept\": 1,\n            \"subtractInteger-memory-arguments-slope\": 1,\n            \"tailList-cpu-arguments\": 41182,\n            \"tailList-memory-arguments\": 32,\n            \"trace-cpu-arguments\": 212342,\n            \"trace-memory-arguments\": 32,\n            \"unBData-cpu-arguments\": 31220,\n            \"unBData-memory-arguments\": 32,\n            \"unConstrData-cpu-arguments\": 32696,\n            \"unConstrData-memory-arguments\": 32,\n            \"unIData-cpu-arguments\": 43357,\n            \"unIData-memory-arguments\": 32,\n            \"unListData-cpu-arguments\": 32247,\n            \"unListData-memory-arguments\": 32,\n            \"unMapData-cpu-arguments\": 38314,\n            \"unMapData-memory-arguments\": 32,\n            \"verifyEd25519Signature-cpu-arguments-intercept\": 9462713,\n            \"verifyEd25519Signature-cpu-arguments-slope\": 1021,\n            \"verifyEd25519Signature-memory-arguments\": 10,\n        },\n        PlutusV2: {\n            \"addInteger-cpu-arguments-intercept\": 205665,\n            \"addInteger-cpu-arguments-slope\": 812,\n            \"addInteger-memory-arguments-intercept\": 1,\n            \"addInteger-memory-arguments-slope\": 1,\n            \"appendByteString-cpu-arguments-intercept\": 1000,\n            \"appendByteString-cpu-arguments-slope\": 571,\n            \"appendByteString-memory-arguments-intercept\": 0,\n            \"appendByteString-memory-arguments-slope\": 1,\n            \"appendString-cpu-arguments-intercept\": 1000,\n            \"appendString-cpu-arguments-slope\": 24177,\n            \"appendString-memory-arguments-intercept\": 4,\n            \"appendString-memory-arguments-slope\": 1,\n            \"bData-cpu-arguments\": 1000,\n            \"bData-memory-arguments\": 32,\n            \"blake2b_256-cpu-arguments-intercept\": 117366,\n            \"blake2b_256-cpu-arguments-slope\": 10475,\n            \"blake2b_256-memory-arguments\": 4,\n            \"cekApplyCost-exBudgetCPU\": 23000,\n            \"cekApplyCost-exBudgetMemory\": 100,\n            \"cekBuiltinCost-exBudgetCPU\": 23000,\n            \"cekBuiltinCost-exBudgetMemory\": 100,\n            \"cekConstCost-exBudgetCPU\": 23000,\n            \"cekConstCost-exBudgetMemory\": 100,\n            \"cekDelayCost-exBudgetCPU\": 23000,\n            \"cekDelayCost-exBudgetMemory\": 100,\n            \"cekForceCost-exBudgetCPU\": 23000,\n            \"cekForceCost-exBudgetMemory\": 100,\n            \"cekLamCost-exBudgetCPU\": 23000,\n            \"cekLamCost-exBudgetMemory\": 100,\n            \"cekStartupCost-exBudgetCPU\": 100,\n            \"cekStartupCost-exBudgetMemory\": 100,\n            \"cekVarCost-exBudgetCPU\": 23000,\n            \"cekVarCost-exBudgetMemory\": 100,\n            \"chooseData-cpu-arguments\": 19537,\n            \"chooseData-memory-arguments\": 32,\n            \"chooseList-cpu-arguments\": 175354,\n            \"chooseList-memory-arguments\": 32,\n            \"chooseUnit-cpu-arguments\": 46417,\n            \"chooseUnit-memory-arguments\": 4,\n            \"consByteString-cpu-arguments-intercept\": 221973,\n            \"consByteString-cpu-arguments-slope\": 511,\n            \"consByteString-memory-arguments-intercept\": 0,\n            \"consByteString-memory-arguments-slope\": 1,\n            \"constrData-cpu-arguments\": 89141,\n            \"constrData-memory-arguments\": 32,\n            \"decodeUtf8-cpu-arguments-intercept\": 497525,\n            \"decodeUtf8-cpu-arguments-slope\": 14068,\n            \"decodeUtf8-memory-arguments-intercept\": 4,\n            \"decodeUtf8-memory-arguments-slope\": 2,\n            \"divideInteger-cpu-arguments-constant\": 196500,\n            \"divideInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"divideInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"divideInteger-memory-arguments-intercept\": 0,\n            \"divideInteger-memory-arguments-minimum\": 1,\n            \"divideInteger-memory-arguments-slope\": 1,\n            \"encodeUtf8-cpu-arguments-intercept\": 1000,\n            \"encodeUtf8-cpu-arguments-slope\": 28662,\n            \"encodeUtf8-memory-arguments-intercept\": 4,\n            \"encodeUtf8-memory-arguments-slope\": 2,\n            \"equalsByteString-cpu-arguments-constant\": 245000,\n            \"equalsByteString-cpu-arguments-intercept\": 216773,\n            \"equalsByteString-cpu-arguments-slope\": 62,\n            \"equalsByteString-memory-arguments\": 1,\n            \"equalsData-cpu-arguments-intercept\": 1060367,\n            \"equalsData-cpu-arguments-slope\": 12586,\n            \"equalsData-memory-arguments\": 1,\n            \"equalsInteger-cpu-arguments-intercept\": 208512,\n            \"equalsInteger-cpu-arguments-slope\": 421,\n            \"equalsInteger-memory-arguments\": 1,\n            \"equalsString-cpu-arguments-constant\": 187000,\n            \"equalsString-cpu-arguments-intercept\": 1000,\n            \"equalsString-cpu-arguments-slope\": 52998,\n            \"equalsString-memory-arguments\": 1,\n            \"fstPair-cpu-arguments\": 80436,\n            \"fstPair-memory-arguments\": 32,\n            \"headList-cpu-arguments\": 43249,\n            \"headList-memory-arguments\": 32,\n            \"iData-cpu-arguments\": 1000,\n            \"iData-memory-arguments\": 32,\n            \"ifThenElse-cpu-arguments\": 80556,\n            \"ifThenElse-memory-arguments\": 1,\n            \"indexByteString-cpu-arguments\": 57667,\n            \"indexByteString-memory-arguments\": 4,\n            \"lengthOfByteString-cpu-arguments\": 1000,\n            \"lengthOfByteString-memory-arguments\": 10,\n            \"lessThanByteString-cpu-arguments-intercept\": 197145,\n            \"lessThanByteString-cpu-arguments-slope\": 156,\n            \"lessThanByteString-memory-arguments\": 1,\n            \"lessThanEqualsByteString-cpu-arguments-intercept\": 197145,\n            \"lessThanEqualsByteString-cpu-arguments-slope\": 156,\n            \"lessThanEqualsByteString-memory-arguments\": 1,\n            \"lessThanEqualsInteger-cpu-arguments-intercept\": 204924,\n            \"lessThanEqualsInteger-cpu-arguments-slope\": 473,\n            \"lessThanEqualsInteger-memory-arguments\": 1,\n            \"lessThanInteger-cpu-arguments-intercept\": 208896,\n            \"lessThanInteger-cpu-arguments-slope\": 511,\n            \"lessThanInteger-memory-arguments\": 1,\n            \"listData-cpu-arguments\": 52467,\n            \"listData-memory-arguments\": 32,\n            \"mapData-cpu-arguments\": 64832,\n            \"mapData-memory-arguments\": 32,\n            \"mkCons-cpu-arguments\": 65493,\n            \"mkCons-memory-arguments\": 32,\n            \"mkNilData-cpu-arguments\": 22558,\n            \"mkNilData-memory-arguments\": 32,\n            \"mkNilPairData-cpu-arguments\": 16563,\n            \"mkNilPairData-memory-arguments\": 32,\n            \"mkPairData-cpu-arguments\": 76511,\n            \"mkPairData-memory-arguments\": 32,\n            \"modInteger-cpu-arguments-constant\": 196500,\n            \"modInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"modInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"modInteger-memory-arguments-intercept\": 0,\n            \"modInteger-memory-arguments-minimum\": 1,\n            \"modInteger-memory-arguments-slope\": 1,\n            \"multiplyInteger-cpu-arguments-intercept\": 69522,\n            \"multiplyInteger-cpu-arguments-slope\": 11687,\n            \"multiplyInteger-memory-arguments-intercept\": 0,\n            \"multiplyInteger-memory-arguments-slope\": 1,\n            \"nullList-cpu-arguments\": 60091,\n            \"nullList-memory-arguments\": 32,\n            \"quotientInteger-cpu-arguments-constant\": 196500,\n            \"quotientInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"quotientInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"quotientInteger-memory-arguments-intercept\": 0,\n            \"quotientInteger-memory-arguments-minimum\": 1,\n            \"quotientInteger-memory-arguments-slope\": 1,\n            \"remainderInteger-cpu-arguments-constant\": 196500,\n            \"remainderInteger-cpu-arguments-model-arguments-intercept\": 453240,\n            \"remainderInteger-cpu-arguments-model-arguments-slope\": 220,\n            \"remainderInteger-memory-arguments-intercept\": 0,\n            \"remainderInteger-memory-arguments-minimum\": 1,\n            \"remainderInteger-memory-arguments-slope\": 1,\n            \"serialiseData-cpu-arguments-intercept\": 1159724,\n            \"serialiseData-cpu-arguments-slope\": 392670,\n            \"serialiseData-memory-arguments-intercept\": 0,\n            \"serialiseData-memory-arguments-slope\": 2,\n            \"sha2_256-cpu-arguments-intercept\": 806990,\n            \"sha2_256-cpu-arguments-slope\": 30482,\n            \"sha2_256-memory-arguments\": 4,\n            \"sha3_256-cpu-arguments-intercept\": 1927926,\n            \"sha3_256-cpu-arguments-slope\": 82523,\n            \"sha3_256-memory-arguments\": 4,\n            \"sliceByteString-cpu-arguments-intercept\": 265318,\n            \"sliceByteString-cpu-arguments-slope\": 0,\n            \"sliceByteString-memory-arguments-intercept\": 4,\n            \"sliceByteString-memory-arguments-slope\": 0,\n            \"sndPair-cpu-arguments\": 85931,\n            \"sndPair-memory-arguments\": 32,\n            \"subtractInteger-cpu-arguments-intercept\": 205665,\n            \"subtractInteger-cpu-arguments-slope\": 812,\n            \"subtractInteger-memory-arguments-intercept\": 1,\n            \"subtractInteger-memory-arguments-slope\": 1,\n            \"tailList-cpu-arguments\": 41182,\n            \"tailList-memory-arguments\": 32,\n            \"trace-cpu-arguments\": 212342,\n            \"trace-memory-arguments\": 32,\n            \"unBData-cpu-arguments\": 31220,\n            \"unBData-memory-arguments\": 32,\n            \"unConstrData-cpu-arguments\": 32696,\n            \"unConstrData-memory-arguments\": 32,\n            \"unIData-cpu-arguments\": 43357,\n            \"unIData-memory-arguments\": 32,\n            \"unListData-cpu-arguments\": 32247,\n            \"unListData-memory-arguments\": 32,\n            \"unMapData-cpu-arguments\": 38314,\n            \"unMapData-memory-arguments\": 32,\n            \"verifyEcdsaSecp256k1Signature-cpu-arguments\": 35892428,\n            \"verifyEcdsaSecp256k1Signature-memory-arguments\": 10,\n            \"verifyEd25519Signature-cpu-arguments-intercept\": 57996947,\n            \"verifyEd25519Signature-cpu-arguments-slope\": 18975,\n            \"verifyEd25519Signature-memory-arguments\": 10,\n            \"verifySchnorrSecp256k1Signature-cpu-arguments-intercept\": 38887044,\n            \"verifySchnorrSecp256k1Signature-cpu-arguments-slope\": 32947,\n            \"verifySchnorrSecp256k1Signature-memory-arguments\": 10,\n        },\n    },\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/utils/cost_model.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/utils/merkle_tree.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/utils/merkle_tree.js ***!
  \*****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MerkleTree\": () => (/* binding */ MerkleTree),\n/* harmony export */   \"combineHash\": () => (/* binding */ combineHash),\n/* harmony export */   \"concat\": () => (/* reexport safe */ _deps_deno_land_std_0_148_0_bytes_mod_js__WEBPACK_IMPORTED_MODULE_0__.concat),\n/* harmony export */   \"equals\": () => (/* reexport safe */ _deps_deno_land_std_0_148_0_bytes_mod_js__WEBPACK_IMPORTED_MODULE_0__.equals),\n/* harmony export */   \"sha256\": () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _deps_deno_land_std_0_148_0_bytes_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/deno.land/std@0.148.0/bytes/mod.js */ \"./node_modules/lucid-cardano/esm/deps/deno.land/std@0.148.0/bytes/mod.js\");\n/* harmony import */ var _deps_deno_land_std_0_153_0_hash_sha256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../deps/deno.land/std@0.153.0/hash/sha256.js */ \"./node_modules/lucid-cardano/esm/deps/deno.land/std@0.153.0/hash/sha256.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/lucid-cardano/esm/src/utils/utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_js__WEBPACK_IMPORTED_MODULE_2__]);\n_utils_js__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Haskell implementation: https://github.com/input-output-hk/hydra-poc/blob/master/plutus-merkle-tree/src/Plutus/MerkleTree.hs\n\n\n\nclass MerkleTree {\n    /** Construct Merkle tree from data, which get hashed with sha256 */\n    constructor(data) {\n        Object.defineProperty(this, \"root\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.root = MerkleTree.buildRecursively(data.map((d) => sha256(d)));\n    }\n    /** Construct Merkle tree from sha256 hashes */\n    static fromHashes(hashes) {\n        return new this(hashes);\n    }\n    static buildRecursively(hashes) {\n        if (hashes.length <= 0)\n            return null;\n        if (hashes.length === 1) {\n            return {\n                node: hashes[0],\n                left: null,\n                right: null,\n            };\n        }\n        const cutoff = Math.floor(hashes.length / 2);\n        const [left, right] = [hashes.slice(0, cutoff), hashes.slice(cutoff)];\n        const lnode = this.buildRecursively(left);\n        const rnode = this.buildRecursively(right);\n        if (lnode === null || rnode === null)\n            return null;\n        return {\n            node: combineHash(lnode.node, rnode.node),\n            left: lnode,\n            right: rnode,\n        };\n    }\n    rootHash() {\n        if (this.root === null)\n            throw new Error(\"Merkle tree root hash not found.\");\n        return this.root.node;\n    }\n    getProof(data) {\n        const hash = sha256(data);\n        const proof = [];\n        const searchRecursively = (tree) => {\n            if (tree && (0,_deps_deno_land_std_0_148_0_bytes_mod_js__WEBPACK_IMPORTED_MODULE_0__.equals)(tree.node, hash))\n                return true;\n            if (tree?.right) {\n                if (searchRecursively(tree.left)) {\n                    proof.push({ right: tree.right.node });\n                    return true;\n                }\n            }\n            if (tree?.left) {\n                if (searchRecursively(tree.right)) {\n                    proof.push({ left: tree.left.node });\n                    return true;\n                }\n            }\n        };\n        searchRecursively(this.root);\n        return proof;\n    }\n    size() {\n        const searchRecursively = (tree) => {\n            if (tree === null)\n                return 0;\n            return 1 + searchRecursively(tree.left) + searchRecursively(tree.right);\n        };\n        return searchRecursively(this.root);\n    }\n    static verify(data, rootHash, proof) {\n        const hash = sha256(data);\n        const searchRecursively = (rootHash2, proof) => {\n            if (proof.length <= 0)\n                return (0,_deps_deno_land_std_0_148_0_bytes_mod_js__WEBPACK_IMPORTED_MODULE_0__.equals)(rootHash, rootHash2);\n            const [h, t] = [proof[0], proof.slice(1)];\n            if (h.left) {\n                return searchRecursively(combineHash(h.left, rootHash2), t);\n            }\n            if (h.right) {\n                return searchRecursively(combineHash(rootHash2, h.right), t);\n            }\n            return false;\n        };\n        return searchRecursively(hash, proof);\n    }\n    toString() {\n        // deno-lint-ignore no-explicit-any\n        const searchRecursively = (tree) => {\n            if (tree === null)\n                return null;\n            return {\n                node: (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toHex)(tree.node),\n                left: searchRecursively(tree.left),\n                right: searchRecursively(tree.right),\n            };\n        };\n        return JSON.stringify(searchRecursively(this.root), null, 2);\n    }\n}\n\nfunction sha256(data) {\n    return new Uint8Array(new _deps_deno_land_std_0_153_0_hash_sha256_js__WEBPACK_IMPORTED_MODULE_1__.Sha256().update(data).arrayBuffer());\n}\nfunction combineHash(hash1, hash2) {\n    return sha256((0,_deps_deno_land_std_0_148_0_bytes_mod_js__WEBPACK_IMPORTED_MODULE_0__.concat)(hash1, hash2));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/utils/merkle_tree.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/utils/mod.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/utils/mod.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MerkleTree\": () => (/* reexport safe */ _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__.MerkleTree),\n/* harmony export */   \"PROTOCOL_PARAMETERS_DEFAULT\": () => (/* reexport safe */ _cost_model_js__WEBPACK_IMPORTED_MODULE_0__.PROTOCOL_PARAMETERS_DEFAULT),\n/* harmony export */   \"Utils\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.Utils),\n/* harmony export */   \"applyDoubleCborEncoding\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.applyDoubleCborEncoding),\n/* harmony export */   \"applyParamsToScript\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.applyParamsToScript),\n/* harmony export */   \"assetsToValue\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.assetsToValue),\n/* harmony export */   \"combineHash\": () => (/* reexport safe */ _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__.combineHash),\n/* harmony export */   \"concat\": () => (/* reexport safe */ _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__.concat),\n/* harmony export */   \"coreToUtxo\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.coreToUtxo),\n/* harmony export */   \"createCostModels\": () => (/* reexport safe */ _cost_model_js__WEBPACK_IMPORTED_MODULE_0__.createCostModels),\n/* harmony export */   \"equals\": () => (/* reexport safe */ _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__.equals),\n/* harmony export */   \"fromHex\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.fromHex),\n/* harmony export */   \"fromLabel\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.fromLabel),\n/* harmony export */   \"fromScriptRef\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.fromScriptRef),\n/* harmony export */   \"fromText\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.fromText),\n/* harmony export */   \"fromUnit\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.fromUnit),\n/* harmony export */   \"generatePrivateKey\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.generatePrivateKey),\n/* harmony export */   \"generateSeedPhrase\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.generateSeedPhrase),\n/* harmony export */   \"getAddressDetails\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddressDetails),\n/* harmony export */   \"nativeScriptFromJson\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.nativeScriptFromJson),\n/* harmony export */   \"networkToId\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.networkToId),\n/* harmony export */   \"paymentCredentialOf\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.paymentCredentialOf),\n/* harmony export */   \"sha256\": () => (/* reexport safe */ _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__.sha256),\n/* harmony export */   \"stakeCredentialOf\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.stakeCredentialOf),\n/* harmony export */   \"toHex\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.toHex),\n/* harmony export */   \"toLabel\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.toLabel),\n/* harmony export */   \"toPublicKey\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.toPublicKey),\n/* harmony export */   \"toScriptRef\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.toScriptRef),\n/* harmony export */   \"toText\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.toText),\n/* harmony export */   \"toUnit\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.toUnit),\n/* harmony export */   \"utxoToCore\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.utxoToCore),\n/* harmony export */   \"valueToAssets\": () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.valueToAssets)\n/* harmony export */ });\n/* harmony import */ var _cost_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cost_model.js */ \"./node_modules/lucid-cardano/esm/src/utils/cost_model.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/lucid-cardano/esm/src/utils/utils.js\");\n/* harmony import */ var _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./merkle_tree.js */ \"./node_modules/lucid-cardano/esm/src/utils/merkle_tree.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_cost_model_js__WEBPACK_IMPORTED_MODULE_0__, _utils_js__WEBPACK_IMPORTED_MODULE_1__, _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_cost_model_js__WEBPACK_IMPORTED_MODULE_0__, _utils_js__WEBPACK_IMPORTED_MODULE_1__, _merkle_tree_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/utils/mod.js?");

/***/ }),

/***/ "./node_modules/lucid-cardano/esm/src/utils/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/utils/utils.js ***!
  \***********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Utils\": () => (/* binding */ Utils),\n/* harmony export */   \"applyDoubleCborEncoding\": () => (/* binding */ applyDoubleCborEncoding),\n/* harmony export */   \"applyParamsToScript\": () => (/* binding */ applyParamsToScript),\n/* harmony export */   \"assetsToValue\": () => (/* binding */ assetsToValue),\n/* harmony export */   \"coreToUtxo\": () => (/* binding */ coreToUtxo),\n/* harmony export */   \"fromHex\": () => (/* binding */ fromHex),\n/* harmony export */   \"fromLabel\": () => (/* binding */ fromLabel),\n/* harmony export */   \"fromScriptRef\": () => (/* binding */ fromScriptRef),\n/* harmony export */   \"fromText\": () => (/* binding */ fromText),\n/* harmony export */   \"fromUnit\": () => (/* binding */ fromUnit),\n/* harmony export */   \"generatePrivateKey\": () => (/* binding */ generatePrivateKey),\n/* harmony export */   \"generateSeedPhrase\": () => (/* binding */ generateSeedPhrase),\n/* harmony export */   \"getAddressDetails\": () => (/* binding */ getAddressDetails),\n/* harmony export */   \"nativeScriptFromJson\": () => (/* binding */ nativeScriptFromJson),\n/* harmony export */   \"networkToId\": () => (/* binding */ networkToId),\n/* harmony export */   \"paymentCredentialOf\": () => (/* binding */ paymentCredentialOf),\n/* harmony export */   \"stakeCredentialOf\": () => (/* binding */ stakeCredentialOf),\n/* harmony export */   \"toHex\": () => (/* binding */ toHex),\n/* harmony export */   \"toLabel\": () => (/* binding */ toLabel),\n/* harmony export */   \"toPublicKey\": () => (/* binding */ toPublicKey),\n/* harmony export */   \"toScriptRef\": () => (/* binding */ toScriptRef),\n/* harmony export */   \"toText\": () => (/* binding */ toText),\n/* harmony export */   \"toUnit\": () => (/* binding */ toUnit),\n/* harmony export */   \"utxoToCore\": () => (/* binding */ utxoToCore),\n/* harmony export */   \"valueToAssets\": () => (/* binding */ valueToAssets)\n/* harmony export */ });\n/* harmony import */ var _deps_deno_land_std_0_100_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/deno.land/std@0.100.0/encoding/hex.js */ \"./node_modules/lucid-cardano/esm/deps/deno.land/std@0.100.0/encoding/hex.js\");\n/* harmony import */ var _core_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/mod.js */ \"./node_modules/lucid-cardano/esm/src/core/mod.js\");\n/* harmony import */ var _misc_bip39_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/bip39.js */ \"./node_modules/lucid-cardano/esm/src/misc/bip39.js\");\n/* harmony import */ var _misc_crc8_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../misc/crc8.js */ \"./node_modules/lucid-cardano/esm/src/misc/crc8.js\");\n/* harmony import */ var _plutus_time_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../plutus/time.js */ \"./node_modules/lucid-cardano/esm/src/plutus/time.js\");\n/* harmony import */ var _plutus_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../plutus/data.js */ \"./node_modules/lucid-cardano/esm/src/plutus/data.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_mod_js__WEBPACK_IMPORTED_MODULE_1__, _misc_bip39_js__WEBPACK_IMPORTED_MODULE_2__, _plutus_data_js__WEBPACK_IMPORTED_MODULE_5__]);\n([_core_mod_js__WEBPACK_IMPORTED_MODULE_1__, _misc_bip39_js__WEBPACK_IMPORTED_MODULE_2__, _plutus_data_js__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\nclass Utils {\n    constructor(lucid) {\n        Object.defineProperty(this, \"lucid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lucid = lucid;\n    }\n    validatorToAddress(validator, stakeCredential) {\n        const validatorHash = this.validatorToScriptHash(validator);\n        if (stakeCredential) {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BaseAddress[\"new\"](networkToId(this.lucid.network), _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(validatorHash)), stakeCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Ed25519KeyHash.from_hex(stakeCredential.hash))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(stakeCredential.hash)))\n                .to_address()\n                .to_bech32(undefined);\n        }\n        else {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.EnterpriseAddress[\"new\"](networkToId(this.lucid.network), _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(validatorHash)))\n                .to_address()\n                .to_bech32(undefined);\n        }\n    }\n    credentialToAddress(paymentCredential, stakeCredential) {\n        if (stakeCredential) {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BaseAddress[\"new\"](networkToId(this.lucid.network), paymentCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Ed25519KeyHash.from_hex(paymentCredential.hash))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(paymentCredential.hash)), stakeCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Ed25519KeyHash.from_hex(stakeCredential.hash))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(stakeCredential.hash)))\n                .to_address()\n                .to_bech32(undefined);\n        }\n        else {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.EnterpriseAddress[\"new\"](networkToId(this.lucid.network), paymentCredential.type === \"Key\"\n                ? _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Ed25519KeyHash.from_hex(paymentCredential.hash))\n                : _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(paymentCredential.hash)))\n                .to_address()\n                .to_bech32(undefined);\n        }\n    }\n    validatorToRewardAddress(validator) {\n        const validatorHash = this.validatorToScriptHash(validator);\n        return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.RewardAddress[\"new\"](networkToId(this.lucid.network), _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(validatorHash)))\n            .to_address()\n            .to_bech32(undefined);\n    }\n    credentialToRewardAddress(stakeCredential) {\n        return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.RewardAddress[\"new\"](networkToId(this.lucid.network), stakeCredential.type === \"Key\"\n            ? _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_keyhash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Ed25519KeyHash.from_hex(stakeCredential.hash))\n            : _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.StakeCredential.from_scripthash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_hex(stakeCredential.hash)))\n            .to_address()\n            .to_bech32(undefined);\n    }\n    validatorToScriptHash(validator) {\n        switch (validator.type) {\n            case \"Native\":\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.NativeScript.from_bytes(fromHex(validator.script))\n                    .hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHashNamespace.NativeScript)\n                    .to_hex();\n            case \"PlutusV1\":\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(fromHex(applyDoubleCborEncoding(validator.script)))\n                    .hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHashNamespace.PlutusV1)\n                    .to_hex();\n            case \"PlutusV2\":\n                return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(fromHex(applyDoubleCborEncoding(validator.script)))\n                    .hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHashNamespace.PlutusV2)\n                    .to_hex();\n            default:\n                throw new Error(\"No variant matched\");\n        }\n    }\n    mintingPolicyToId(mintingPolicy) {\n        return this.validatorToScriptHash(mintingPolicy);\n    }\n    datumToHash(datum) {\n        return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.hash_plutus_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.from_bytes(fromHex(datum))).to_hex();\n    }\n    scriptHashToCredential(scriptHash) {\n        return {\n            type: \"Script\",\n            hash: scriptHash,\n        };\n    }\n    keyHashToCredential(keyHash) {\n        return {\n            type: \"Key\",\n            hash: keyHash,\n        };\n    }\n    generatePrivateKey() {\n        return generatePrivateKey();\n    }\n    generateSeedPhrase() {\n        return generateSeedPhrase();\n    }\n    unixTimeToSlot(unixTime) {\n        return (0,_plutus_time_js__WEBPACK_IMPORTED_MODULE_4__.unixTimeToEnclosingSlot)(unixTime, _plutus_time_js__WEBPACK_IMPORTED_MODULE_4__.SLOT_CONFIG_NETWORK[this.lucid.network]);\n    }\n    slotToUnixTime(slot) {\n        return (0,_plutus_time_js__WEBPACK_IMPORTED_MODULE_4__.slotToBeginUnixTime)(slot, _plutus_time_js__WEBPACK_IMPORTED_MODULE_4__.SLOT_CONFIG_NETWORK[this.lucid.network]);\n    }\n    /** Address can be in Bech32 or Hex. */\n    getAddressDetails(address) {\n        return getAddressDetails(address);\n    }\n    /**\n     * Convert a native script from Json to the Hex representation.\n     * It follows this Json format: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n     */\n    nativeScriptFromJson(nativeScript) {\n        return nativeScriptFromJson(nativeScript);\n    }\n    paymentCredentialOf(address) {\n        return paymentCredentialOf(address);\n    }\n    stakeCredentialOf(rewardAddress) {\n        return stakeCredentialOf(rewardAddress);\n    }\n}\nfunction addressFromHexOrBech32(address) {\n    try {\n        return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Address.from_bytes(fromHex(address));\n    }\n    catch (_e) {\n        try {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Address.from_bech32(address);\n        }\n        catch (_e) {\n            throw new Error(\"Could not deserialize address.\");\n        }\n    }\n}\n/** Address can be in Bech32 or Hex. */\nfunction getAddressDetails(address) {\n    // Base Address\n    try {\n        const parsedAddress = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BaseAddress.from_address(addressFromHexOrBech32(address));\n        const paymentCredential = parsedAddress.payment_cred().kind() === 0\n            ? {\n                type: \"Key\",\n                hash: toHex(parsedAddress.payment_cred().to_keyhash().to_bytes()),\n            }\n            : {\n                type: \"Script\",\n                hash: toHex(parsedAddress.payment_cred().to_scripthash().to_bytes()),\n            };\n        const stakeCredential = parsedAddress.stake_cred().kind() === 0\n            ? {\n                type: \"Key\",\n                hash: toHex(parsedAddress.stake_cred().to_keyhash().to_bytes()),\n            }\n            : {\n                type: \"Script\",\n                hash: toHex(parsedAddress.stake_cred().to_scripthash().to_bytes()),\n            };\n        return {\n            type: \"Base\",\n            networkId: parsedAddress.to_address().network_id(),\n            address: {\n                bech32: parsedAddress.to_address().to_bech32(undefined),\n                hex: toHex(parsedAddress.to_address().to_bytes()),\n            },\n            paymentCredential,\n            stakeCredential,\n        };\n    }\n    catch (_e) { /* pass */ }\n    // Enterprise Address\n    try {\n        const parsedAddress = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.EnterpriseAddress.from_address(addressFromHexOrBech32(address));\n        const paymentCredential = parsedAddress.payment_cred().kind() === 0\n            ? {\n                type: \"Key\",\n                hash: toHex(parsedAddress.payment_cred().to_keyhash().to_bytes()),\n            }\n            : {\n                type: \"Script\",\n                hash: toHex(parsedAddress.payment_cred().to_scripthash().to_bytes()),\n            };\n        return {\n            type: \"Enterprise\",\n            networkId: parsedAddress.to_address().network_id(),\n            address: {\n                bech32: parsedAddress.to_address().to_bech32(undefined),\n                hex: toHex(parsedAddress.to_address().to_bytes()),\n            },\n            paymentCredential,\n        };\n    }\n    catch (_e) { /* pass */ }\n    // Pointer Address\n    try {\n        const parsedAddress = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PointerAddress.from_address(addressFromHexOrBech32(address));\n        const paymentCredential = parsedAddress.payment_cred().kind() === 0\n            ? {\n                type: \"Key\",\n                hash: toHex(parsedAddress.payment_cred().to_keyhash().to_bytes()),\n            }\n            : {\n                type: \"Script\",\n                hash: toHex(parsedAddress.payment_cred().to_scripthash().to_bytes()),\n            };\n        return {\n            type: \"Pointer\",\n            networkId: parsedAddress.to_address().network_id(),\n            address: {\n                bech32: parsedAddress.to_address().to_bech32(undefined),\n                hex: toHex(parsedAddress.to_address().to_bytes()),\n            },\n            paymentCredential,\n        };\n    }\n    catch (_e) { /* pass */ }\n    // Reward Address\n    try {\n        const parsedAddress = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.RewardAddress.from_address(addressFromHexOrBech32(address));\n        const stakeCredential = parsedAddress.payment_cred().kind() === 0\n            ? {\n                type: \"Key\",\n                hash: toHex(parsedAddress.payment_cred().to_keyhash().to_bytes()),\n            }\n            : {\n                type: \"Script\",\n                hash: toHex(parsedAddress.payment_cred().to_scripthash().to_bytes()),\n            };\n        return {\n            type: \"Reward\",\n            networkId: parsedAddress.to_address().network_id(),\n            address: {\n                bech32: parsedAddress.to_address().to_bech32(undefined),\n                hex: toHex(parsedAddress.to_address().to_bytes()),\n            },\n            stakeCredential,\n        };\n    }\n    catch (_e) { /* pass */ }\n    throw new Error(\"No address type matched for: \" + address);\n}\nfunction paymentCredentialOf(address) {\n    const { paymentCredential } = getAddressDetails(address);\n    if (!paymentCredential) {\n        throw new Error(\"The specified address does not contain a payment credential.\");\n    }\n    return paymentCredential;\n}\nfunction stakeCredentialOf(rewardAddress) {\n    const { stakeCredential } = getAddressDetails(rewardAddress);\n    if (!stakeCredential) {\n        throw new Error(\"The specified address does not contain a stake credential.\");\n    }\n    return stakeCredential;\n}\nfunction generatePrivateKey() {\n    return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PrivateKey.generate_ed25519().to_bech32();\n}\nfunction generateSeedPhrase() {\n    return (0,_misc_bip39_js__WEBPACK_IMPORTED_MODULE_2__.generateMnemonic)(256);\n}\nfunction valueToAssets(value) {\n    const assets = {};\n    assets[\"lovelace\"] = BigInt(value.coin().to_str());\n    const ma = value.multiasset();\n    if (ma) {\n        const multiAssets = ma.keys();\n        for (let j = 0; j < multiAssets.len(); j++) {\n            const policy = multiAssets.get(j);\n            const policyAssets = ma.get(policy);\n            const assetNames = policyAssets.keys();\n            for (let k = 0; k < assetNames.len(); k++) {\n                const policyAsset = assetNames.get(k);\n                const quantity = policyAssets.get(policyAsset);\n                const unit = toHex(policy.to_bytes()) + toHex(policyAsset.name());\n                assets[unit] = BigInt(quantity.to_str());\n            }\n        }\n    }\n    return assets;\n}\nfunction assetsToValue(assets) {\n    const multiAsset = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.MultiAsset[\"new\"]();\n    const lovelace = assets[\"lovelace\"];\n    const units = Object.keys(assets);\n    const policies = Array.from(new Set(units\n        .filter((unit) => unit !== \"lovelace\")\n        .map((unit) => unit.slice(0, 56))));\n    policies.forEach((policy) => {\n        const policyUnits = units.filter((unit) => unit.slice(0, 56) === policy);\n        const assetsValue = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Assets[\"new\"]();\n        policyUnits.forEach((unit) => {\n            assetsValue.insert(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.AssetName[\"new\"](fromHex(unit.slice(56))), _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BigNum.from_str(assets[unit].toString()));\n        });\n        multiAsset.insert(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptHash.from_bytes(fromHex(policy)), assetsValue);\n    });\n    const value = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Value[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BigNum.from_str(lovelace ? lovelace.toString() : \"0\"));\n    if (units.length > 1 || !lovelace)\n        value.set_multiasset(multiAsset);\n    return value;\n}\nfunction fromScriptRef(scriptRef) {\n    const kind = scriptRef.get().kind();\n    switch (kind) {\n        case 0:\n            return {\n                type: \"Native\",\n                script: toHex(scriptRef.get().as_native().to_bytes()),\n            };\n        case 1:\n            return {\n                type: \"PlutusV1\",\n                script: toHex(scriptRef.get().as_plutus_v1().to_bytes()),\n            };\n        case 2:\n            return {\n                type: \"PlutusV2\",\n                script: toHex(scriptRef.get().as_plutus_v2().to_bytes()),\n            };\n        default:\n            throw new Error(\"No variant matched.\");\n    }\n}\nfunction toScriptRef(script) {\n    switch (script.type) {\n        case \"Native\":\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptRef[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Script.new_native(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.NativeScript.from_bytes(fromHex(script.script))));\n        case \"PlutusV1\":\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptRef[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Script.new_plutus_v1(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(fromHex(applyDoubleCborEncoding(script.script)))));\n        case \"PlutusV2\":\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptRef[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Script.new_plutus_v2(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(fromHex(applyDoubleCborEncoding(script.script)))));\n        default:\n            throw new Error(\"No variant matched.\");\n    }\n}\nfunction utxoToCore(utxo) {\n    const address = (() => {\n        try {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Address.from_bech32(utxo.address);\n        }\n        catch (_e) {\n            return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ByronAddress.from_base58(utxo.address).to_address();\n        }\n    })();\n    const output = _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.TransactionOutput[\"new\"](address, assetsToValue(utxo.assets));\n    if (utxo.datumHash) {\n        output.set_datum(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Datum.new_data_hash(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.DataHash.from_bytes(fromHex(utxo.datumHash))));\n    }\n    // inline datum\n    if (!utxo.datumHash && utxo.datum) {\n        output.set_datum(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Datum.new_data(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.Data[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusData.from_bytes(fromHex(utxo.datum)))));\n    }\n    if (utxo.scriptRef) {\n        output.set_script_ref(toScriptRef(utxo.scriptRef));\n    }\n    return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.TransactionUnspentOutput[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.TransactionInput[\"new\"](_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.TransactionHash.from_bytes(fromHex(utxo.txHash)), _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.BigNum.from_str(utxo.outputIndex.toString())), output);\n}\nfunction coreToUtxo(coreUtxo) {\n    return {\n        txHash: toHex(coreUtxo.input().transaction_id().to_bytes()),\n        outputIndex: parseInt(coreUtxo.input().index().to_str()),\n        assets: valueToAssets(coreUtxo.output().amount()),\n        address: coreUtxo.output().address().as_byron()\n            ? coreUtxo.output().address().as_byron()?.to_base58()\n            : coreUtxo.output().address().to_bech32(undefined),\n        datumHash: coreUtxo.output()?.datum()?.as_data_hash()?.to_hex(),\n        datum: coreUtxo.output()?.datum()?.as_data() &&\n            toHex(coreUtxo.output().datum().as_data().get().to_bytes()),\n        scriptRef: coreUtxo.output()?.script_ref() &&\n            fromScriptRef(coreUtxo.output().script_ref()),\n    };\n}\nfunction networkToId(network) {\n    switch (network) {\n        case \"Preview\":\n            return 0;\n        case \"Preprod\":\n            return 0;\n        case \"Custom\":\n            return 0;\n        case \"Mainnet\":\n            return 1;\n        default:\n            throw new Error(\"Network not found\");\n    }\n}\nfunction fromHex(hex) {\n    return (0,_deps_deno_land_std_0_100_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.decodeString)(hex);\n}\nfunction toHex(bytes) {\n    return (0,_deps_deno_land_std_0_100_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.encodeToString)(bytes);\n}\n/** Convert a Hex encoded string to a Utf-8 encoded string. */\nfunction toText(hex) {\n    return new TextDecoder().decode((0,_deps_deno_land_std_0_100_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.decode)(new TextEncoder().encode(hex)));\n}\n/** Convert a Utf-8 encoded string to a Hex encoded string. */\nfunction fromText(text) {\n    return toHex(new TextEncoder().encode(text));\n}\nfunction toPublicKey(privateKey) {\n    return _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PrivateKey.from_bech32(privateKey).to_public().to_bech32();\n}\n/** Padded number in Hex. */\nfunction checksum(num) {\n    return (0,_misc_crc8_js__WEBPACK_IMPORTED_MODULE_3__.crc8)(fromHex(num)).toString(16).padStart(2, \"0\");\n}\nfunction toLabel(num) {\n    if (num < 0 || num > 65535) {\n        throw new Error(`Label ${num} out of range: min label 1 - max label 65535.`);\n    }\n    const numHex = num.toString(16).padStart(4, \"0\");\n    return \"0\" + numHex + checksum(numHex) + \"0\";\n}\nfunction fromLabel(label) {\n    if (label.length !== 8 || !(label[0] === \"0\" && label[7] === \"0\")) {\n        return null;\n    }\n    const numHex = label.slice(1, 5);\n    const num = parseInt(numHex, 16);\n    const check = label.slice(5, 7);\n    return check === checksum(numHex) ? num : null;\n}\n/**\n * @param name Hex encoded\n */\nfunction toUnit(policyId, name, label) {\n    const hexLabel = Number.isInteger(label) ? toLabel(label) : \"\";\n    const n = name ? name : \"\";\n    if ((n + hexLabel).length > 64) {\n        throw new Error(\"Asset name size exceeds 32 bytes.\");\n    }\n    if (policyId.length !== 56) {\n        throw new Error(`Policy id invalid: ${policyId}.`);\n    }\n    return policyId + hexLabel + n;\n}\n/**\n * Splits unit into policy id, asset name (entire asset name), name (asset name without label) and label if applicable.\n * name will be returned in Hex.\n */\nfunction fromUnit(unit) {\n    const policyId = unit.slice(0, 56);\n    const assetName = unit.slice(56) || null;\n    const label = fromLabel(unit.slice(56, 64));\n    const name = (() => {\n        const hexName = Number.isInteger(label) ? unit.slice(64) : unit.slice(56);\n        return hexName || null;\n    })();\n    return { policyId, assetName, name, label };\n}\n/**\n * Convert a native script from Json to the Hex representation.\n * It follows this Json format: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n */\nfunction nativeScriptFromJson(nativeScript) {\n    return {\n        type: \"Native\",\n        script: toHex(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.encode_json_str_to_native_script(JSON.stringify(nativeScript), \"\", _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.ScriptSchema.Node).to_bytes()),\n    };\n}\nfunction applyParamsToScript(plutusScript, params, shape) {\n    const p = (shape ? _plutus_data_js__WEBPACK_IMPORTED_MODULE_5__.Data.castTo(params, shape) : params);\n    return toHex(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.apply_params_to_plutus_script(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusList.from_bytes(fromHex(_plutus_data_js__WEBPACK_IMPORTED_MODULE_5__.Data.to(p))), _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(fromHex(applyDoubleCborEncoding(plutusScript)))).to_bytes());\n}\n/** Returns double cbor encoded script. If script is already double cbor encoded it's returned as it is. */\nfunction applyDoubleCborEncoding(script) {\n    try {\n        _core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript.from_bytes(fromHex(script)).bytes());\n        return script;\n    }\n    catch (_e) {\n        return toHex(_core_mod_js__WEBPACK_IMPORTED_MODULE_1__.C.PlutusScript[\"new\"](fromHex(script)).to_bytes());\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/utils/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./wwwroot/scripts/App.ts");
/******/ 	
/******/ })()
;