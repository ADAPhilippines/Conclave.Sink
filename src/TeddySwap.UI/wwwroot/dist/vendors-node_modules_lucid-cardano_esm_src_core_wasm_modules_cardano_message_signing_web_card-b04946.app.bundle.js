"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkteddyswap_ui"] = self["webpackChunkteddyswap_ui"] || []).push([["vendors-node_modules_lucid-cardano_esm_src_core_wasm_modules_cardano_message_signing_web_card-b04946"],{

/***/ "./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_message_signing_web/cardano_message_signing.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_message_signing_web/cardano_message_signing.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AlgorithmId\": () => (/* binding */ AlgorithmId),\n/* harmony export */   \"BigNum\": () => (/* binding */ BigNum),\n/* harmony export */   \"CBORArray\": () => (/* binding */ CBORArray),\n/* harmony export */   \"CBORObject\": () => (/* binding */ CBORObject),\n/* harmony export */   \"CBORSpecial\": () => (/* binding */ CBORSpecial),\n/* harmony export */   \"CBORSpecialType\": () => (/* binding */ CBORSpecialType),\n/* harmony export */   \"CBORValue\": () => (/* binding */ CBORValue),\n/* harmony export */   \"CBORValueKind\": () => (/* binding */ CBORValueKind),\n/* harmony export */   \"COSEEncrypt\": () => (/* binding */ COSEEncrypt),\n/* harmony export */   \"COSEEncrypt0\": () => (/* binding */ COSEEncrypt0),\n/* harmony export */   \"COSEKey\": () => (/* binding */ COSEKey),\n/* harmony export */   \"COSERecipient\": () => (/* binding */ COSERecipient),\n/* harmony export */   \"COSERecipients\": () => (/* binding */ COSERecipients),\n/* harmony export */   \"COSESign\": () => (/* binding */ COSESign),\n/* harmony export */   \"COSESign1\": () => (/* binding */ COSESign1),\n/* harmony export */   \"COSESign1Builder\": () => (/* binding */ COSESign1Builder),\n/* harmony export */   \"COSESignBuilder\": () => (/* binding */ COSESignBuilder),\n/* harmony export */   \"COSESignature\": () => (/* binding */ COSESignature),\n/* harmony export */   \"COSESignatures\": () => (/* binding */ COSESignatures),\n/* harmony export */   \"CounterSignature\": () => (/* binding */ CounterSignature),\n/* harmony export */   \"CurveType\": () => (/* binding */ CurveType),\n/* harmony export */   \"ECKey\": () => (/* binding */ ECKey),\n/* harmony export */   \"EdDSA25519Key\": () => (/* binding */ EdDSA25519Key),\n/* harmony export */   \"HeaderMap\": () => (/* binding */ HeaderMap),\n/* harmony export */   \"Headers\": () => (/* binding */ Headers),\n/* harmony export */   \"Int\": () => (/* binding */ Int),\n/* harmony export */   \"KeyOperation\": () => (/* binding */ KeyOperation),\n/* harmony export */   \"KeyType\": () => (/* binding */ KeyType),\n/* harmony export */   \"Label\": () => (/* binding */ Label),\n/* harmony export */   \"LabelKind\": () => (/* binding */ LabelKind),\n/* harmony export */   \"Labels\": () => (/* binding */ Labels),\n/* harmony export */   \"PasswordEncryption\": () => (/* binding */ PasswordEncryption),\n/* harmony export */   \"ProtectedHeaderMap\": () => (/* binding */ ProtectedHeaderMap),\n/* harmony export */   \"PubKeyEncryption\": () => (/* binding */ PubKeyEncryption),\n/* harmony export */   \"SigContext\": () => (/* binding */ SigContext),\n/* harmony export */   \"SigStructure\": () => (/* binding */ SigStructure),\n/* harmony export */   \"SignedMessage\": () => (/* binding */ SignedMessage),\n/* harmony export */   \"SignedMessageKind\": () => (/* binding */ SignedMessageKind),\n/* harmony export */   \"TaggedCBOR\": () => (/* binding */ TaggedCBOR),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nlet wasm;\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null ||\n        cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = typeof cachedTextEncoder.encodeInto === \"function\"\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length,\n        };\n    };\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null ||\n        cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null ||\n        cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/** */\nconst LabelKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Text: 1,\n    \"1\": \"Text\",\n});\n/** */\nconst SignedMessageKind = Object.freeze({\n    COSESIGN: 0,\n    \"0\": \"COSESIGN\",\n    COSESIGN1: 1,\n    \"1\": \"COSESIGN1\",\n});\n/** */\nconst SigContext = Object.freeze({\n    Signature: 0,\n    \"0\": \"Signature\",\n    Signature1: 1,\n    \"1\": \"Signature1\",\n    CounterSignature: 2,\n    \"2\": \"CounterSignature\",\n});\n/** */\nconst CBORSpecialType = Object.freeze({\n    Bool: 0,\n    \"0\": \"Bool\",\n    Float: 1,\n    \"1\": \"Float\",\n    Unassigned: 2,\n    \"2\": \"Unassigned\",\n    Break: 3,\n    \"3\": \"Break\",\n    Undefined: 4,\n    \"4\": \"Undefined\",\n    Null: 5,\n    \"5\": \"Null\",\n});\n/** */\nconst CBORValueKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Bytes: 1,\n    \"1\": \"Bytes\",\n    Text: 2,\n    \"2\": \"Text\",\n    Array: 3,\n    \"3\": \"Array\",\n    Object: 4,\n    \"4\": \"Object\",\n    TaggedCBOR: 5,\n    \"5\": \"TaggedCBOR\",\n    Special: 6,\n    \"6\": \"Special\",\n});\n/** */\nconst AlgorithmId = Object.freeze({\n    /**\n     * r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n     */\n    EdDSA: 0,\n    \"0\": \"EdDSA\",\n    /**\n     * r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n     */\n    ChaCha20Poly1305: 1,\n    \"1\": \"ChaCha20Poly1305\",\n});\n/** */\nconst KeyType = Object.freeze({\n    /**\n     * r\" octet key pair\n     */\n    OKP: 0,\n    \"0\": \"OKP\",\n    /**\n     * r\" 2-coord EC\n     */\n    EC2: 1,\n    \"1\": \"EC2\",\n    Symmetric: 2,\n    \"2\": \"Symmetric\",\n});\n/** */\nconst ECKey = Object.freeze({\n    CRV: 0,\n    \"0\": \"CRV\",\n    X: 1,\n    \"1\": \"X\",\n    Y: 2,\n    \"2\": \"Y\",\n    D: 3,\n    \"3\": \"D\",\n});\n/** */\nconst CurveType = Object.freeze({\n    P256: 0,\n    \"0\": \"P256\",\n    P384: 1,\n    \"1\": \"P384\",\n    P521: 2,\n    \"2\": \"P521\",\n    X25519: 3,\n    \"3\": \"X25519\",\n    X448: 4,\n    \"4\": \"X448\",\n    Ed25519: 5,\n    \"5\": \"Ed25519\",\n    Ed448: 6,\n    \"6\": \"Ed448\",\n});\n/** */\nconst KeyOperation = Object.freeze({\n    Sign: 0,\n    \"0\": \"Sign\",\n    Verify: 1,\n    \"1\": \"Verify\",\n    Encrypt: 2,\n    \"2\": \"Encrypt\",\n    Decrypt: 3,\n    \"3\": \"Decrypt\",\n    WrapKey: 4,\n    \"4\": \"WrapKey\",\n    UnwrapKey: 5,\n    \"5\": \"UnwrapKey\",\n    DeriveKey: 6,\n    \"6\": \"DeriveKey\",\n    DeriveBits: 7,\n    \"7\": \"DeriveBits\",\n});\n/** */\nclass BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nclass CBORArray {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORArray}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {CBORValue}\n     */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} elem\n     */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/** */\nclass CBORObject {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORObject}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject}\n     */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {CBORValue} key\n     * @param {CBORValue} value\n     * @returns {CBORValue | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} key\n     * @returns {CBORValue | undefined}\n     */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/** */\nclass CBORSpecial {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORSpecial}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {boolean} b\n     * @returns {CBORSpecial}\n     */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {number} u\n     * @returns {CBORSpecial}\n     */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/** */\nclass CBORValue {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {CBORValue}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {CBORValue}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORArray} arr\n     * @returns {CBORValue}\n     */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORObject} obj\n     * @returns {CBORValue}\n     */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {TaggedCBOR} tagged\n     * @returns {CBORValue}\n     */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORSpecial} special\n     * @returns {CBORValue}\n     */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue}\n     */\n    static from_label(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cborvalue_from_label(label.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CBORArray | undefined}\n     */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject | undefined}\n     */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {TaggedCBOR | undefined}\n     */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial | undefined}\n     */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\n/** */\nclass COSEEncrypt {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @param {COSERecipients} recipients\n     * @returns {COSEEncrypt}\n     */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\n/** */\nclass COSEEncrypt0 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt0}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSEEncrypt0}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\n/** */\nclass COSEKey {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n     * @param {Label} key_type\n     */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n     * @returns {Label}\n     */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} key_ops\n     */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} base_init_vector\n     */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n     * @param {Label} key_type\n     * @returns {COSEKey}\n     */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/** */\nclass COSERecipient {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipient}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSERecipient}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\n/** */\nclass COSERecipients {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipients}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSERecipient}\n     */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @param {COSERecipient} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass COSESign {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {COSESignatures} signatures\n     * @returns {COSESign}\n     */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/** */\nclass COSESign1 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign1}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n     * # Arguments\n     * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n     * @param {Uint8Array | undefined} external_aad\n     * @param {Uint8Array | undefined} external_payload\n     * @returns {SigStructure}\n     */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad)\n            ? 0\n            : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload)\n            ? 0\n            : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {Uint8Array} signature\n     * @returns {COSESign1}\n     */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\n/** */\nclass COSESign1Builder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESign1Builder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} signed_sig_structure\n     * @returns {COSESign1}\n     */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\n/** */\nclass COSESignBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESignBuilder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} signed_sig_structure\n     * @returns {COSESign}\n     */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/** */\nclass COSESignature {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} signature\n     * @returns {COSESignature}\n     */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\n/** */\nclass COSESignatures {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignatures}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSESignature}\n     */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass CounterSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CounterSignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} cose_signature\n     * @returns {CounterSignature}\n     */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} cose_signatures\n     * @returns {CounterSignature}\n     */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\n/** */\nclass EdDSA25519Key {\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} pubkey_bytes\n     * @returns {EdDSA25519Key}\n     */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} private_key_bytes\n     */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /** */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /** */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n     * @returns {COSEKey}\n     */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/** */\nclass HeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} criticality\n     */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Label} content_type\n     */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} init_vector\n     */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} partial_init_vector\n     */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CounterSignature} counter_signature\n     */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n     * @returns {CounterSignature | undefined}\n     */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n     * @returns {Labels}\n     */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\n/** */\nclass Headers {\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Headers}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {ProtectedHeaderMap} protected_\n     * @param {HeaderMap} unprotected_\n     * @returns {Headers}\n     */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\n/** */\nclass Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Label {\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Label}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {Label}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {Label}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} id\n     * @returns {Label}\n     */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_type\n     * @returns {Label}\n     */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} ec_key\n     * @returns {Label}\n     */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} curve_type\n     * @returns {Label}\n     */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_op\n     * @returns {Label}\n     */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\n/** */\nclass Labels {\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Labels}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {Labels}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Label}\n     */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Label} elem\n     */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass PasswordEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PasswordEncryption}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n     * @param {COSEEncrypt0} data\n     * @returns {PasswordEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\n/** */\nclass ProtectedHeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtectedHeaderMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {HeaderMap} header_map\n     * @returns {ProtectedHeaderMap}\n     */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\n/** */\nclass PubKeyEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PubKeyEncryption}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n     * @param {COSEEncrypt} data\n     * @returns {PubKeyEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\n/** */\nclass SigStructure {\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SigStructure}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap | undefined}\n     */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ProtectedHeaderMap} sign_protected\n     */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n     * @param {number} context\n     * @param {ProtectedHeaderMap} body_protected\n     * @param {Uint8Array} external_aad\n     * @param {Uint8Array} payload\n     * @returns {SigStructure}\n     */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\n/** */\nclass SignedMessage {\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SignedMessage}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign} cose_sign\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign1} cose_sign1\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {SignedMessage}\n     */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {COSESign | undefined}\n     */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {COSESign1 | undefined}\n     */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\n/** */\nclass TaggedCBOR {\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TaggedCBOR}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {CBORValue}\n     */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tag\n     * @param {CBORValue} value\n     * @returns {TaggedCBOR}\n     */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            }\n            catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    }\n    else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n        }\n        else {\n            return instance;\n        }\n    }\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(/* asset import */ __webpack_require__(/*! cardano_message_signing_bg.wasm */ \"./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_message_signing_web/cardano_message_signing_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_string_new = function (arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function (arg0, arg1) {\n        var ret = debugString(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function (arg0) {\n        throw takeObject(arg0);\n    };\n    if (typeof input === \"string\" ||\n        (typeof Request === \"function\" && input instanceof Request) ||\n        (typeof URL === \"function\" && input instanceof URL)) {\n        input = fetch(input);\n    }\n    const { instance, module } = await load(await input, imports);\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    return wasm;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n//# sourceURL=webpack://teddyswap.ui/./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_message_signing_web/cardano_message_signing.js?");

/***/ })

}]);